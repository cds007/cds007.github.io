<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring2-IOC 和 DI 的注解开发模式</title>
      <link href="/2024/12/14/Spring2-IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/12/14/Spring2-IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring2-IOC-和-DI-的注解开发模式"><a href="#Spring2-IOC-和-DI-的注解开发模式" class="headerlink" title="Spring2-IOC 和 DI 的注解开发模式"></a>Spring2-IOC 和 DI 的注解开发模式</h2><p><strong>目标</strong></p><blockquote><ul><li>掌握IOC&#x2F;DI配置管理第三方bean</li><li>掌握IOC&#x2F;DI的注解开发</li><li>掌握IOC&#x2F;DI注解管理第三方bean</li><li>完成Spring与Mybatis及Junit的整合开发</li></ul></blockquote><h2 id="1，IOC-DI配置管理第三方bean"><a href="#1，IOC-DI配置管理第三方bean" class="headerlink" title="1，IOC&#x2F;DI配置管理第三方bean"></a>1，IOC&#x2F;DI配置管理第三方bean</h2><p>前面所讲的知识点都是基于我们自己写的类，现在如果有需求让我们去管理第三方jar包中的类，该如何管理?</p><h3 id="1-1-案例-数据源对象管理"><a href="#1-1-案例-数据源对象管理" class="headerlink" title="1.1 案例:数据源对象管理"></a>1.1 案例:数据源对象管理</h3><p>在这一节中，我们将通过一个案例来学习下对于第三方bean该如何进行配置管理。</p><p>以后我们会用到很多第三方的bean,本次案例将使用咱们前面提到过的数据源<code>Druid(德鲁伊)</code>和<code>C3P0</code>来配置学习下。</p><h4 id="1-1-1-环境准备"><a href="#1-1-1-环境准备" class="headerlink" title="1.1.1 环境准备"></a>1.1.1 环境准备</h4><p>学习之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p><p><img src="/../images/2024/12/1214/1629860338328.png" alt="1629860338328"></p></li><li><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-2-思路分析"><a href="#1-1-2-思路分析" class="headerlink" title="1.1.2 思路分析"></a>1.1.2 思路分析</h4><p>在上述环境下，我们来对数据源进行配置管理，先来分析下思路:</p><blockquote><p>需求:使用Spring的IOC容器来管理Druid连接池对象</p><p>1.使用第三方的技术，需要在pom.xml添加依赖</p><p>2.在配置文件中将【第三方的类】制作成一个bean，让IOC容器进行管理</p><p>3.数据库连接需要基础的四要素<code>驱动</code>、<code>连接</code>、<code>用户名</code>和<code>密码</code>，【如何注入】到对应的bean中</p><p>4.从IOC容器中获取对应的bean对象，将其打印到控制台查看结果</p></blockquote><p><strong>思考:</strong></p><ul><li>第三方的类指的是什么?</li><li>如何注入数据库连接四要素?</li></ul><h4 id="1-1-3-实现Druid管理"><a href="#1-1-3-实现Druid管理" class="headerlink" title="1.1.3 实现Druid管理"></a>1.1.3 实现Druid管理</h4><p>带着这两个问题，把下面的案例实现下:</p><h5 id="步骤1-导入druid的依赖"><a href="#步骤1-导入druid的依赖" class="headerlink" title="步骤1:导入druid的依赖"></a>步骤1:导入<code>druid</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-配置第三方bean"><a href="#步骤2-配置第三方bean" class="headerlink" title="步骤2:配置第三方bean"></a>步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加<code>DruidDataSource</code>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>driverClassName:数据库驱动</li><li>url:数据库连接地址</li><li>username:数据库连接用户名</li><li>password:数据库连接密码</li><li>数据库连接的四要素要和自己使用的数据库信息一致。</li></ul><h5 id="步骤3-从IOC容器中获取对应的bean对象"><a href="#步骤3-从IOC容器中获取对应的bean对象" class="headerlink" title="步骤3:从IOC容器中获取对应的bean对象"></a>步骤3:从IOC容器中获取对应的bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">       System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>打印如下结果: 说明第三方bean对象已经被spring的IOC容器进行管理</p><p><img src="/../images/2024/12/1214/1629887733081.png" alt="1629887733081"></p><p>做完案例后，我们可以将刚才思考的两个问题答案说下:</p><ul><li><p>第三方的类指的是什么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DruidDataSource</span><br></pre></td></tr></table></figure></li><li><p>如何注入数据库连接四要素?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setter注入</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-加载properties文件"><a href="#1-2-加载properties文件" class="headerlink" title="1.2 加载properties文件"></a>1.2 加载properties文件</h3><p>上节中我们已经完成两个数据源<code>druid</code>和<code>C3P0</code>的配置，但是其中包含了一些问题，我们来分析下:</p><ul><li>这两个数据源中都使用到了一些固定的常量如数据库连接四要素，把这些值写在Spring的配置文件中不利于后期维护</li><li>需要将这些值提取到一个外部的properties配置文件中</li><li>Spring框架如何从配置文件中读取属性值来配置就是接下来要解决的问题。</li></ul><p>问题提出来后，具体该如何实现?</p><h6 id="步骤1-准备properties配置文件"><a href="#步骤1-准备properties配置文件" class="headerlink" title="步骤1:准备properties配置文件"></a>步骤1:准备properties配置文件</h6><p>resources下创建一个jdbc.properties文件,并添加对应的属性键值对</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h6 id="步骤2-开启context命名空间"><a href="#步骤2-开启context命名空间" class="headerlink" title="步骤2:开启context命名空间"></a>步骤2:开启<code>context</code>命名空间</h6><p>在applicationContext.xml中开<code>context</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3-加载properties配置文件"><a href="#步骤3-加载properties配置文件" class="headerlink" title="步骤3:加载properties配置文件"></a>步骤3:加载properties配置文件</h6><p>在配置文件中使用<code>context</code>命名空间下的标签来加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤4-完成属性注入"><a href="#步骤4-完成属性注入" class="headerlink" title="步骤4:完成属性注入"></a>步骤4:完成属性注入</h6><p>使用<code>$&#123;key&#125;</code>来读取properties配置文件中的内容并完成属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，读取外部properties配置文件中的内容就已经完成。</p><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><p>至此，读取properties配置文件中的内容就已经完成，但是在使用的时候，有些注意事项:</p><ul><li><p>问题一:键值对的key为<code>username</code>引发的问题</p><p>1.在properties中配置键值对的时候，如果key设置为<code>username</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=root666</span><br></pre></td></tr></table></figure><p>2.在applicationContext.xml注入该属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.运行后，在控制台打印的却不是<code>root666</code>，而是自己电脑的用户名</p><p><img src="/../images/2024/12/1214/1629975934694.png" alt="1629975934694"></p><p>4.出现问题的原因是<code>&lt;context:property-placeholder/&gt;</code>标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">    System.out.println(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以自行运行，在打印出来的结果中会有一个USERNAME&#x3D;XXX[自己电脑的用户名称]</p><p>5.解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>system-properties-mode:设置为NEVER,表示不加载系统属性，就可以解决上述问题。</p><p>当然还有一个解决方案就是避免使用<code>username</code>作为属性的<code>key</code>。</p></li><li><p>问题二:当有多个properties配置文件需要被加载，该如何配置?</p><p>1.调整下配置文件的内容，在resources下添加<code>jdbc.properties</code>,<code>jdbc2.properties</code>,内容如下:</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>jdbc2.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root666</span></span><br></pre></td></tr></table></figure><p>2.修改applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>方式一:可以实现，如果配置文件多的话，每个都需要配置</li><li>方式二:<code>*.properties</code>代表所有以properties结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li><li>方式三:标准的写法，<code>classpath:</code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li><li>方式四:不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的properties配置文件</li></ul></li></ul><h2 id="2，核心容器"><a href="#2，核心容器" class="headerlink" title="2，核心容器"></a>2，核心容器</h2><p>前面已经完成bean与依赖注入的相关知识学习，接下来我们主要学习的是IOC容器中的&#x3D;&#x3D;核心容器&#x3D;&#x3D;。</p><p>这里所说的核心容器，大家可以把它简单的理解为<code>ApplicationContext</code>，前面虽然已经用到过，但是并没有系统的学习，接下来咱们从以下几个问题入手来学习下容器的相关知识:</p><ul><li>如何创建容器?</li><li>创建好容器后，如何从容器中获取bean对象?</li><li>容器类的层次结构是什么?</li><li>BeanFactory是什么?</li></ul><h3 id="2-1-容器"><a href="#2-1-容器" class="headerlink" title="2.1 容器"></a>2.1 容器</h3><h4 id="2-1-1-容器的创建方式"><a href="#2-1-1-容器的创建方式" class="headerlink" title="2.1.1 容器的创建方式"></a>2.1.1 容器的创建方式</h4><p>案例中创建<code>ApplicationContext</code>的方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;类路径下的XML配置文件&#x3D;&#x3D;</p><p>除了上面这种方式，Spring还提供了另外一种创建方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;文件系统下的XML配置文件&#x3D;&#x3D;</p><p>使用这种方式，运行，会出现如下错误:</p><p><img src="/../images/2024/12/1214/1629983245121.png" alt="1629983245121"></p><p>从错误信息中能发现，这种方式是从项目路径下开始查找<code>applicationContext.xml</code>配置文件的，所以需要将其修改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\workspace\\spring\\spring_10_container\\src\\main\\resources\\applicationContext.xml&quot;</span>); </span><br></pre></td></tr></table></figure><p>**说明:**大家练习的时候，写自己的具体路径。</p><p>这种方式虽能实现，但是当项目的位置发生变化后,代码也需要跟着改,耦合度较高,不推荐使用。</p><h4 id="2-1-2-Bean的三种获取方式"><a href="#2-1-2-Bean的三种获取方式" class="headerlink" title="2.1.2 Bean的三种获取方式"></a>2.1.2 Bean的三种获取方式</h4><p>方式一，就是目前案例中获取的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式存在的问题是每次获取的时候都需要进行类型转换，有没有更简单的方式呢?</p><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;，BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式可以解决类型强转问题，但是参数又多加了一个，相对来说没有简化多少。</p><p>方式三:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式就类似我们之前所学习依赖注入中的按类型注入。必须要确保IOC容器中该类型对应的bean对象只能有一个。</p><h4 id="2-1-3-容器类层次结构"><a href="#2-1-3-容器类层次结构" class="headerlink" title="2.1.3 容器类层次结构"></a>2.1.3 容器类层次结构</h4><p>(1)在IDEA中双击<code>shift</code>,输入BeanFactory</p><p><img src="/../images/2024/12/1214/1629985148294.png" alt="1629985148294"></p><p>(2)点击进入BeanFactory类，ctrl+h,就能查看到如下结构的层次关系</p><p><img src="/../images/2024/12/1214/1629984980781.png" alt="1629984980781"></p><p>从图中可以看出，容器类也是从无到有根据需要一层层叠加上来的，大家重点理解下这种设计思想。</p><h4 id="2-1-4-BeanFactory的使用"><a href="#2-1-4-BeanFactory的使用" class="headerlink" title="2.1.4 BeanFactory的使用"></a>2.1.4 BeanFactory的使用</h4><p>使用BeanFactory来创建IOC容器的具体实现方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更好的看出<code>BeanFactory</code>和<code>ApplicationContext</code>之间的区别，在BookDaoImpl添加如下构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不去获取bean对象，打印会发现：</p><ul><li><p>BeanFactory是延迟加载，只有在获取bean对象的时候才会去创建</p></li><li><p>ApplicationContext是立即加载，容器加载的时候就会创建bean对象</p></li><li><p>ApplicationContext要想成为延迟加载，只需要按照如下方式进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>小结</strong></p><p>这一节中所讲的知识点包括:</p><ul><li><p>容器创建的两种方式</p><ul><li>ClassPathXmlApplicationContext[掌握]</li><li>FileSystemXmlApplicationContext[知道即可]</li></ul></li><li><p>获取Bean的三种方式</p><ul><li>getBean(“名称”):需要类型转换</li><li>getBean(“名称”,类型.class):多了一个参数</li><li>getBean(类型.class):容器中不能有多个该类的bean对象</li></ul><p>上述三种方式，各有各的优缺点，用哪个都可以。</p></li><li><p>容器类层次结构</p><ul><li>只需要知晓容器的最上级的父接口为 BeanFactory即可</li></ul></li><li><p>BeanFactory</p><ul><li>使用BeanFactory创建的容器是延迟加载</li><li>使用ApplicationContext创建的容器是立即加载</li><li>具体BeanFactory如何创建只需要了解即可。</li></ul></li></ul><h3 id="2-2-核心容器总结"><a href="#2-2-核心容器总结" class="headerlink" title="2.2 核心容器总结"></a>2.2 核心容器总结</h3><p>这节中没有新的知识点，只是对前面知识的一个大总结，共包含如下内容:</p><h4 id="2-2-1-容器相关"><a href="#2-2-1-容器相关" class="headerlink" title="2.2.1 容器相关"></a>2.2.1 容器相关</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li><strong>&#x3D;&#x3D;ClassPathXmlApplicationContext(常用)&#x3D;&#x3D;</strong></li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h4 id="2-2-2-bean相关"><a href="#2-2-2-bean相关" class="headerlink" title="2.2.2 bean相关"></a>2.2.2 bean相关</h4><p><img src="/../images/2024/12/1214/1629986510487.png" alt="1629986510487"></p><p>其实整个配置中最常用的就两个属性&#x3D;&#x3D;id&#x3D;&#x3D;和&#x3D;&#x3D;class&#x3D;&#x3D;。</p><p>把scope、init-method、destroy-method框起来的原因是，后面注解在讲解的时候还会用到，所以大家对这三个属性关注下。</p><h4 id="2-2-3-依赖注入相关"><a href="#2-2-3-依赖注入相关" class="headerlink" title="2.2.3 依赖注入相关"></a>2.2.3 依赖注入相关</h4><p><img src="/../images/2024/12/1214/1629986848563.png" alt="1629986848563"></p><h2 id="3，IOC-DI注解开发"><a href="#3，IOC-DI注解开发" class="headerlink" title="3，IOC&#x2F;DI注解开发"></a>3，IOC&#x2F;DI注解开发</h2><p>Spring的IOC&#x2F;DI对应的配置开发就已经讲解完成，但是使用起来相对来说还是比较复杂的，复杂的地方在&#x3D;&#x3D;配置文件&#x3D;&#x3D;。</p><p>前面咱们聊Spring的时候说过，Spring可以简化代码的开发，到现在并没有体会到。</p><p>所以Spring到底是如何简化代码开发的呢?</p><p>要想真正简化开发，就需要用到Spring的注解开发，Spring对注解支持的版本历程:</p><ul><li>2.0版开始支持注解</li><li>2.5版注解功能趋于完善</li><li>3.0版支持纯注解开发</li></ul><p>关于注解开发，我们会讲解两块内容<code>注解开发定义bean</code>和<code>纯注解开发</code>。</p><p>注解开发定义bean用的是2.5版提供的注解，纯注解开发用的是3.0版提供的注解。</p><h3 id="3-1-注解开发定义bean"><a href="#3-1-注解开发定义bean" class="headerlink" title="3.1 注解开发定义bean"></a>3.1 注解开发定义bean</h3><p>在上述环境的基础上，我们来学一学Spring是如何通过注解实现bean的定义开发?</p><h4 id="步骤1-删除原XML配置"><a href="#步骤1-删除原XML配置" class="headerlink" title="步骤1:删除原XML配置"></a>步骤1:删除原XML配置</h4><p>将配置文件中的<code>&lt;bean&gt;</code>标签删除掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-Dao上添加注解"><a href="#步骤2-Dao上添加注解" class="headerlink" title="步骤2:Dao上添加注解"></a>步骤2:Dao上添加注解</h4><p>在BookDaoImpl类上添加<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:@Component注解不可以添加在接口上，因为接口是无法创建对象的。&#x3D;&#x3D;</p><p>XML与注解配置的对应关系:</p><p><img src="/../images/2024/12/1214/1629990315619.png" alt="1629990315619"></p><h4 id="步骤3-配置Spring的注解包扫描"><a href="#步骤3-配置Spring的注解包扫描" class="headerlink" title="步骤3:配置Spring的注解包扫描"></a>步骤3:配置Spring的注解包扫描</h4><p>为了让Spring框架能够扫描到写在类上的注解，需要在配置文件上进行包扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>component-scan</p><ul><li>component:组件,Spring将管理的bean视作自己的一个组件</li><li>scan:扫描</li></ul><p>base-package指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p><ul><li>包路径越多[如:com.itheima.dao.impl]，扫描的范围越小速度越快</li><li>包路径越少[如:com.itheima],扫描的范围越大速度越慢</li><li>一般扫描到项目的组织名称即Maven的groupId下[如:com.itheima]即可。</li></ul><h4 id="步骤4-Service上添加注解"><a href="#步骤4-Service上添加注解" class="headerlink" title="步骤4:Service上添加注解"></a>步骤4:Service上添加注解</h4><p>在BookServiceImpl类上也添加<code>@Component</code>交给Spring框架管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5-运行程序"><a href="#步骤5-运行程序" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h4><p>在App类中，从IOC容器中获取BookServiceImpl对应的bean对象，打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印观察结果，两个bean对象都已经打印到控制台</p><p><img src="/../images/2024/12/1214/1630027743910.png" alt="1630027743910"></p><p><strong>说明:</strong></p><ul><li><p>BookServiceImpl类没有起名称，所以在App中是按照类型来获取bean对象</p></li><li><p>@Component注解如果不起名称，会有一个默认值就是<code>当前类名首字母小写</code>，所以也可以按照名称获取，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService)ctx.getBean(<span class="string">&quot;bookServiceImpl&quot;</span>);</span><br><span class="line">System.out.println(bookService);</span><br></pre></td></tr></table></figure></li></ul><p>对于@Component注解，还衍生出了其他三个注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p><p>通过查看源码会发现:</p><p><img src="/../images/2024/12/1214/1630028345074.png" alt="1630028345074"></p><p>这三个注解和@Component注解的作用是一样的，为什么要衍生出这三个呢?</p><p>方便我们后期在编写类的时候能很好的区分出这个类是属于<code>表现层</code>、<code>业务层</code>还是<code>数据层</code>的类。</p><h4 id="知识点1-Component等"><a href="#知识点1-Component等" class="headerlink" title="知识点1:@Component等"></a>知识点1:@Component等</h4><table><thead><tr><th>名称</th><th>@Component&#x2F;@Controller&#x2F;@Service&#x2F;@Repository</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring管理的bean</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="3-2-纯注解开发模式"><a href="#3-2-纯注解开发模式" class="headerlink" title="3.2 纯注解开发模式"></a>3.2 纯注解开发模式</h3><p>上面已经可以使用注解来配置bean,但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring在3.0版已经支持纯注解开发</p><ul><li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li></ul><p>具体如何实现?</p><h4 id="3-2-1-思路分析"><a href="#3-2-1-思路分析" class="headerlink" title="3.2.1 思路分析"></a>3.2.1 思路分析</h4><p>实现思路为: </p><ul><li>将配置文件applicationContext.xml删除掉，使用类来替换。</li></ul><h4 id="3-2-2-实现步骤"><a href="#3-2-2-实现步骤" class="headerlink" title="3.2.2 实现步骤"></a>3.2.2 实现步骤</h4><h5 id="步骤1-创建配置类"><a href="#步骤1-创建配置类" class="headerlink" title="步骤1:创建配置类"></a>步骤1:创建配置类</h5><p>创建一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤2-标识该类为配置类"><a href="#步骤2-标识该类为配置类" class="headerlink" title="步骤2:标识该类为配置类"></a>步骤2:标识该类为配置类</h5><p>在配置类上添加<code>@Configuration</code>注解，将其标识为一个配置类,替换<code>applicationContext.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-用注解替换包扫描配置"><a href="#步骤3-用注解替换包扫描配置" class="headerlink" title="步骤3:用注解替换包扫描配置"></a>步骤3:用注解替换包扫描配置</h5><p>在配置类上添加包扫描注解<code>@ComponentScan</code>替换<code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建运行类并执行"><a href="#步骤4-创建运行类并执行" class="headerlink" title="步骤4:创建运行类并执行"></a>步骤4:创建运行类并执行</h5><p>创建一个新的运行类<code>AppForAnnotation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行AppForAnnotation,可以看到两个对象依然被获取成功</p><p><img src="/../images/2024/12/1214/1630029110506.png" alt="1630029110506"></p><p>至此，纯注解开发的方式就已经完成了，主要内容包括:</p><ul><li><p>Java类替换Spring核心配置文件</p><p><img src="/../images/2024/12/1214/1630029254372.png" alt="1630029254372"></p></li><li><p>@Configuration注解用于设定当前类为配置类</p></li><li><p>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1：-Configuration"><a href="#知识点1：-Configuration" class="headerlink" title="知识点1：@Configuration"></a>知识点1：@Configuration</h4><table><thead><tr><th>名称</th><th>@Configuration</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring配置类</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h4 id="知识点2：-ComponentScan"><a href="#知识点2：-ComponentScan" class="headerlink" title="知识点2：@ComponentScan"></a>知识点2：@ComponentScan</h4><table><thead><tr><th>名称</th><th>@ComponentScan</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr><td>属性</td><td>value（默认）：扫描路径，此路径可以逐层向下扫描</td></tr></tbody></table><p><strong>小结:</strong></p><p>这一节重点掌握的是使用注解完成Spring的bean管理，需要掌握的内容为:</p><ul><li>记住@Component、@Controller、@Service、@Repository这四个注解</li><li>applicationContext.xml中<code>&lt;context:component-san/&gt;</code>的作用是指定扫描包路径，注解为@ComponentScan</li><li>@Configuration标识该类为配置类，使用类替换applicationContext.xml文件</li><li>ClassPathXmlApplicationContext是加载XML配置文件</li><li>AnnotationConfigApplicationContext是加载配置类</li></ul><h3 id="3-3-注解开发bean作用范围与生命周期管理"><a href="#3-3-注解开发bean作用范围与生命周期管理" class="headerlink" title="3.3 注解开发bean作用范围与生命周期管理"></a>3.3 注解开发bean作用范围与生命周期管理</h3><p>使用注解已经完成了bean的管理，接下来按照前面所学习的内容，将通过配置实现的内容都换成对应的注解实现，包含两部分内容:<code>bean作用范围</code>和<code>bean生命周期</code>。</p><h4 id="3-3-1-Bean的作用范围"><a href="#3-3-1-Bean的作用范围" class="headerlink" title="3.3.1 Bean的作用范围"></a>3.3.1 Bean的作用范围</h4><p>(1)先运行App类,在控制台打印两个一摸一样的地址，说明默认情况下bean是单例</p><p><img src="/../images/2024/12/1214/1630031192753.png" alt="1630031192753"></p><p>(2)要想将BookDaoImpl变成非单例，只需要在其类上添加<code>@scope</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行App类，打印结果:</p><p><img src="/../images/2024/12/1214/1630031808947.png" alt="1630031808947"></p><h5 id="知识点1：-Scope"><a href="#知识点1：-Scope" class="headerlink" title="知识点1：@Scope"></a>知识点1：@Scope</h5><table><thead><tr><th>名称</th><th>@Scope</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类创建对象的作用范围<br/>可用于设置创建出的bean是否为单例对象</td></tr><tr><td>属性</td><td>value（默认）：定义bean作用范围，<br/>&#x3D;&#x3D;默认值singleton（单例），可选值prototype（非单例）&#x3D;&#x3D;</td></tr></tbody></table><h4 id="3-3-2-Bean的生命周期"><a href="#3-3-2-Bean的生命周期" class="headerlink" title="3.3.2 Bean的生命周期"></a>3.3.2 Bean的生命周期</h4><p>只需要在对应的方法上添加<code>@PostConstruct</code>和<code>@PreDestroy</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">//在构造方法之后执行，替换 init-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span> <span class="comment">//在销毁方法之前执行,替换 destroy-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)要想看到两个方法执行，需要注意的是<code>destroy</code>只有在容器关闭的时候，才会执行，所以需要修改App的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">        ctx.close(); <span class="comment">//关闭容器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注意:</strong>@PostConstruct和@PreDestroy注解如果找不到，需要导入下面的jar包&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.annotation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p><img src="/../images/2024/12/1214/1630033039358.png" alt="1630033039358"></p><h3 id="3-4-注解开发依赖注入"><a href="#3-4-注解开发依赖注入" class="headerlink" title="3.4 注解开发依赖注入"></a>3.4 注解开发依赖注入</h3><p>Spring为了使用注解简化开发，并没有提供<code>构造函数注入</code>、<code>setter注入</code>对应的注解，只提供了自动装配的注解实现。</p><h4 id="3-4-1-注解实现按照类型注入"><a href="#3-4-1-注解实现按照类型注入" class="headerlink" title="3.4.1 注解实现按照类型注入"></a>3.4.1 注解实现按照类型注入</h4><p>对于这个问题使用注解该如何解决?</p><p>(1) 在BookServiceImpl类的bookDao属性上添加<code>@Autowired</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>@Autowired可以写在属性上，也可也写在setter方法上，最简单的处理方式是<code>写在属性上并将setter方法删除掉</code></li><li>为什么setter方法可以删除呢?<ul><li>自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</li><li>普通反射只能获取public修饰的内容</li><li>暴力反射除了获取public修饰的内容还可以获取private修改的内容</li><li>所以此处无需提供setter方法</li></ul></li></ul><p>(2)@Autowired是按照类型注入，那么对应BookDao接口如果有多个实现类，比如添加BookDaoImpl2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再次运行App，就会报错</p><p><img src="/../images/2024/12/1214/1630034272959.png" alt="1630034272959"></p><p>此时，按照类型注入就无法区分到底注入哪个对象，解决方案:<code>按照名称注入</code></p><ul><li><p>先给两个Dao类分别起个名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以注入成功，但是得思考个问题: </p><ul><li><p>@Autowired是按照类型注入的，给BookDao的两个实现起了名称，它还是有两个bean对象，为什么不报错?</p></li><li><p>@Autowired默认按照类型自动装配，如果IOC容器中同类的Bean找到多个，就按照变量名和Bean的名称匹配。因为变量名叫<code>bookDao</code>而容器中也有一个<code>booDao</code>，所以可以成功注入。</p></li><li><p>分析下面这种情况是否能完成注入呢?</p><p><img src="/../images/2024/12/1214/1630036236150.png" alt="1630036236150"></p></li><li><p>不行，因为按照类型会找到多个bean对象，此时会按照<code>bookDao</code>名称去找，因为IOC容器只有名称叫<code>bookDao1</code>和<code>bookDao2</code>,所以找不到，会报<code>NoUniqueBeanDefinitionException</code></p></li></ul></li></ul><h4 id="3-4-2-注解实现按照名称注入"><a href="#3-4-2-注解实现按照名称注入" class="headerlink" title="3.4.2 注解实现按照名称注入"></a>3.4.2 注解实现按照名称注入</h4><p>当根据类型在容器中找到多个bean,注入参数的属性名又和容器中bean的名称不一致，这个时候该如何解决，就需要使用到<code>@Qualifier</code>来指定注入哪个名称的bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier注解后的值就是需要注入的bean的名称。</p><p>&#x3D;&#x3D;注意:@Qualifier不能独立使用，必须和@Autowired一起使用&#x3D;&#x3D;</p><h4 id="3-4-3-简单数据类型注入"><a href="#3-4-3-简单数据类型注入" class="headerlink" title="3.4.3 简单数据类型注入"></a>3.4.3 简单数据类型注入</h4><p>引用类型看完，简单类型注入就比较容易懂了。简单类型注入的是基本数据类型或者字符串类型，下面在<code>BookDaoImpl</code>类中添加一个<code>name</code>属性，用其进行简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据类型换了，对应的注解也要跟着换，这次使用<code>@Value</code>注解，将值写入注解的参数中就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;itheima&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意数据格式要匹配，如将”abc”注入给int值，这样程序就会报错。</p><p>介绍完后，会有一种感觉就是这个注解好像没什么用，跟直接赋值是一个效果，还没有直接赋值简单，所以这个注解存在的意义是什么?</p><h4 id="3-4-4-注解读取properties配置文件"><a href="#3-4-4-注解读取properties配置文件" class="headerlink" title="3.4.4 注解读取properties配置文件"></a>3.4.4 注解读取properties配置文件</h4><p><code>@Value</code>一般会被用在从properties配置文件中读取内容进行使用，具体如何实现?</p><h5 id="步骤1：resource下准备properties文件"><a href="#步骤1：resource下准备properties文件" class="headerlink" title="步骤1：resource下准备properties文件"></a>步骤1：resource下准备properties文件</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">itheima888</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-使用注解加载properties配置文件"><a href="#步骤2-使用注解加载properties配置文件" class="headerlink" title="步骤2: 使用注解加载properties配置文件"></a>步骤2: 使用注解加载properties配置文件</h5><p>在配置类上添加<code>@PropertySource</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3：使用-Value读取配置文件中的内容"><a href="#步骤3：使用-Value读取配置文件中的内容" class="headerlink" title="步骤3：使用@Value读取配置文件中的内容"></a>步骤3：使用@Value读取配置文件中的内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤4:运行程序</p><p>运行App类，查看运行结果，说明配置文件中的内容已经被加载到</p><p><img src="/../images/2024/12/1214/1630084683663.png" alt="1630084683663"></p><p><strong>注意:</strong></p><ul><li><p>如果读取的properties配置文件有多个，可以使用<code>@PropertySource</code>的属性来指定多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;,&quot;xxx.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>,运行会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;*.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中可以把<code>classpath:</code>加上,代表从当前项目的根路径找文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4，IOC-DI注解开发管理第三方bean"><a href="#4，IOC-DI注解开发管理第三方bean" class="headerlink" title="4，IOC&#x2F;DI注解开发管理第三方bean"></a>4，IOC&#x2F;DI注解开发管理第三方bean</h2><p>前面定义bean的时候都是在自己开发的类上面写个注解就完成了，但如果是第三方的类，这些类都是在jar包中，我们没有办法在类上面添加注解，这个时候该怎么办?</p><p>遇到上述问题，我们就需要有一种更加灵活的方式来定义bean,这种方式不能在原始代码上面书写注解，一样能定义bean,这就用到了一个全新的注解&#x3D;&#x3D;@Bean&#x3D;&#x3D;。</p><p>这个注解该如何使用呢?</p><p>咱们把之前使用配置方式管理的数据源使用注解再来一遍，通过这个案例来学习下@Bean的使用。</p><h3 id="4-2-注解开发管理第三方bean"><a href="#4-2-注解开发管理第三方bean" class="headerlink" title="4.2 注解开发管理第三方bean"></a>4.2 注解开发管理第三方bean</h3><p>在上述环境中完成对<code>Druid</code>数据源的管理，具体的实现步骤为:</p><h4 id="步骤1-导入对应的jar包"><a href="#步骤1-导入对应的jar包" class="headerlink" title="步骤1:导入对应的jar包"></a>步骤1:导入对应的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-在配置类中添加一个方法"><a href="#步骤2-在配置类中添加一个方法" class="headerlink" title="步骤2:在配置类中添加一个方法"></a>步骤2:在配置类中添加一个方法</h4><p>注意该方法的返回值就是要创建的Bean对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-在方法上添加-Bean注解"><a href="#步骤3-在方法上添加-Bean注解" class="headerlink" title="步骤3:在方法上添加@Bean注解"></a>步骤3:在方法上添加<code>@Bean</code>注解</h4><p>@Bean注解的作用是将方法的返回值制作为Spring管理的一个bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:不能使用<code>DataSource ds = new DruidDataSource()</code></strong></p><p>因为DataSource接口中没有对应的setter方法来设置属性。</p><h4 id="步骤4-从IOC容器中获取对象并打印"><a href="#步骤4-从IOC容器中获取对象并打印" class="headerlink" title="步骤4:从IOC容器中获取对象并打印"></a>步骤4:从IOC容器中获取对象并打印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此使用@Bean来管理第三方bean的案例就已经完成。</p><p>如果有多个bean要被Spring管理，直接在配置类中多些几个方法，方法上添加@Bean注解即可。</p><h3 id="4-3-引入外部配置类"><a href="#4-3-引入外部配置类" class="headerlink" title="4.3 引入外部配置类"></a>4.3 引入外部配置类</h3><p>如果把所有的第三方bean都配置到Spring的配置类<code>SpringConfig</code>中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些bean配置到不同的配置类中?</p><p>对于数据源的bean,我们新建一个<code>JdbcConfig</code>配置类，并把数据源配置到该类下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的问题是，这个配置类如何能被Spring配置类加载到，并创建DataSource对象在IOC容器中?</p><p>针对这个问题，有两个解决方案:</p><h4 id="4-3-1-使用包扫描引入"><a href="#4-3-1-使用包扫描引入" class="headerlink" title="4.3.1 使用包扫描引入"></a>4.3.1 使用包扫描引入</h4><h5 id="步骤1-在Spring的配置类上添加包扫描"><a href="#步骤1-在Spring的配置类上添加包扫描" class="headerlink" title="步骤1:在Spring的配置类上添加包扫描"></a>步骤1:在Spring的配置类上添加包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在JdbcConfig上添加配置注解"><a href="#步骤2-在JdbcConfig上添加配置注解" class="headerlink" title="步骤2:在JdbcConfig上添加配置注解"></a>步骤2:在JdbcConfig上添加配置注解</h5><p>JdbcConfig类要放入到<code>com.itheima.config</code>包下，需要被Spring的配置类扫描到即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序"><a href="#步骤3-运行程序" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台。</p><p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p><h4 id="4-3-2-使用-Import引入"><a href="#4-3-2-使用-Import引入" class="headerlink" title="4.3.2 使用@Import引入"></a>4.3.2 使用<code>@Import</code>引入</h4><p>方案一实现起来有点小复杂，Spring早就想到了这一点，于是又给我们提供了第二种方案。</p><p>这种方案可以不用加<code>@Configuration</code>注解，但是必须在Spring配置类上使用<code>@Import</code>注解手动引入需要加载的配置类</p><h5 id="步骤1-去除JdbcConfig类上的注解"><a href="#步骤1-去除JdbcConfig类上的注解" class="headerlink" title="步骤1:去除JdbcConfig类上的注解"></a>步骤1:去除JdbcConfig类上的注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在Spring配置类中引入"><a href="#步骤2-在Spring配置类中引入" class="headerlink" title="步骤2:在Spring配置类中引入"></a>步骤2:在Spring配置类中引入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><p>扫描注解可以移除</p></li><li><p>@Import参数需要的是一个数组，可以引入多个配置类。</p></li><li><p>@Import注解在配置类中只能写一次，下面的方式是&#x3D;&#x3D;不允许的&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@Import(Xxx.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-注解开发实现为第三方bean注入资源"><a href="#4-4-注解开发实现为第三方bean注入资源" class="headerlink" title="4.4 注解开发实现为第三方bean注入资源"></a>4.4 注解开发实现为第三方bean注入资源</h3><p>在使用@Bean创建bean对象的时候，如果方法在创建的过程中需要其他资源该怎么办?</p><p>这些资源会有两大类，分别是<code>简单数据类型</code> 和<code>引用数据类型</code>。</p><h4 id="4-4-1-简单数据类型"><a href="#4-4-1-简单数据类型" class="headerlink" title="4.4.1 简单数据类型"></a>4.4.1 简单数据类型</h4><h5 id="4-4-1-1-需求分析"><a href="#4-4-1-1-需求分析" class="headerlink" title="4.4.1.1 需求分析"></a>4.4.1.1 需求分析</h5><p>对于下面代码关于数据库的四要素不应该写死在代码中，应该是从properties配置文件中读取。如何来优化下面的代码?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-1-2-注入简单数据类型步骤"><a href="#4-4-1-2-注入简单数据类型步骤" class="headerlink" title="4.4.1.2 注入简单数据类型步骤"></a>4.4.1.2 注入简单数据类型步骤</h5><h6 id="步骤1-类中提供四个属性"><a href="#步骤1-类中提供四个属性" class="headerlink" title="步骤1:类中提供四个属性"></a>步骤1:类中提供四个属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-使用-Value注解引入值"><a href="#步骤2-使用-Value注解引入值" class="headerlink" title="步骤2:使用@Value注解引入值"></a>步骤2:使用<code>@Value</code>注解引入值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-引用数据类型"><a href="#4-4-2-引用数据类型" class="headerlink" title="4.4.2 引用数据类型"></a>4.4.2 引用数据类型</h4><h5 id="4-4-2-1-需求分析"><a href="#4-4-2-1-需求分析" class="headerlink" title="4.4.2.1 需求分析"></a>4.4.2.1 需求分析</h5><p>假设在构建DataSource对象的时候，需要用到BookDao对象，该如何把BookDao对象注入进方法内让其使用呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-2-注入引用数据类型步骤"><a href="#4-4-2-2-注入引用数据类型步骤" class="headerlink" title="4.4.2.2 注入引用数据类型步骤"></a>4.4.2.2 注入引用数据类型步骤</h5><h6 id="步骤1-在SpringConfig中扫描BookDao"><a href="#步骤1-在SpringConfig中扫描BookDao" class="headerlink" title="步骤1:在SpringConfig中扫描BookDao"></a>步骤1:在SpringConfig中扫描BookDao</h6><p>扫描的目的是让Spring能管理到BookDao,也就是说要让IOC容器中有一个bookDao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-在JdbcConfig类的方法上添加参数"><a href="#步骤2-在JdbcConfig类的方法上添加参数" class="headerlink" title="步骤2:在JdbcConfig类的方法上添加参数"></a>步骤2:在JdbcConfig类的方法上添加参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">    System.out.println(bookDao);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象。&#x3D;&#x3D;</p><h2 id="5，注解开发总结"><a href="#5，注解开发总结" class="headerlink" title="5，注解开发总结"></a>5，注解开发总结</h2><p>前面我们已经完成了XML配置和注解的开发实现，至于两者之间的差异，咱们放在一块去对比回顾下:</p><p><img src="/../images/2024/12/1214/1630134786448.png" alt="1630134786448"></p><h2 id="6，Spring整合"><a href="#6，Spring整合" class="headerlink" title="6，Spring整合"></a>6，Spring整合</h2><p>课程学习到这里，已经对Spring有一个简单的认识了，Spring有一个容器，叫做IoC容器，里面保存bean。在进行企业级开发的时候，其实除了将自己写的类让Spring管理之外，还有一部分重要的工作就是使用第三方的技术。前面已经讲了如何管理第三方bean了，下面结合IoC和DI，整合2个常用技术，进一步加深对Spring的使用理解。</p><h3 id="6-1-Spring整合Mybatis思路分析"><a href="#6-1-Spring整合Mybatis思路分析" class="headerlink" title="6.1 Spring整合Mybatis思路分析"></a>6.1 Spring整合Mybatis思路分析</h3><h4 id="6-1-1-环境准备"><a href="#6-1-1-环境准备" class="headerlink" title="6.1.1 环境准备"></a>6.1.1 环境准备</h4><p>在准备环境的过程中，我们也来回顾下Mybatis开发的相关内容:</p><h5 id="步骤1-准备数据库表"><a href="#步骤1-准备数据库表" class="headerlink" title="步骤1:准备数据库表"></a>步骤1:准备数据库表</h5><p>Mybatis是来操作数据库表，所以先创建一个数据库及表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="步骤2-创建项目导入jar包"><a href="#步骤2-创建项目导入jar包" class="headerlink" title="步骤2:创建项目导入jar包"></a>步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-根据表创建模型类"><a href="#步骤3-根据表创建模型类" class="headerlink" title="步骤3:根据表创建模型类"></a>步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建Dao接口"><a href="#步骤4-创建Dao接口" class="headerlink" title="步骤4:创建Dao接口"></a>步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-创建Service接口和实现类"><a href="#步骤5-创建Service接口和实现类" class="headerlink" title="步骤5:创建Service接口和实现类"></a>步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6-添加jdbc-properties文件"><a href="#步骤6-添加jdbc-properties文件" class="headerlink" title="步骤6:添加jdbc.properties文件"></a>步骤6:添加jdbc.properties文件</h5><p>resources目录下添加，用于配置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>useSSL:关闭MySQL的SSL连接</p><h5 id="步骤7-添加Mybatis核心配置文件"><a href="#步骤7-添加Mybatis核心配置文件" class="headerlink" title="步骤7:添加Mybatis核心配置文件"></a>步骤7:添加Mybatis核心配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取外部properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名扫描的包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射文件扫描包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤8-编写应用程序"><a href="#步骤8-编写应用程序" class="headerlink" title="步骤8:编写应用程序"></a>步骤8:编写应用程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml.bak&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        <span class="comment">// 4. 获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 5. 执行SqlSession对象执行查询，获取结果User</span></span><br><span class="line">        <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9-运行程序"><a href="#步骤9-运行程序" class="headerlink" title="步骤9:运行程序"></a>步骤9:运行程序</h5><p><img src="/../images/2024/12/1214/1630136904087.png" alt="1630136904087"></p><h4 id="6-1-2-整合思路分析"><a href="#6-1-2-整合思路分析" class="headerlink" title="6.1.2 整合思路分析"></a>6.1.2 整合思路分析</h4><p>Mybatis的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给Spring来管理?</p><ul><li><p>Mybatis程序核心对象分析</p><p><img src="/../images/2024/12/1214/1630137189480.png" alt="1630137189480"></p><p>从图中可以获取到，真正需要交给Spring管理的是&#x3D;&#x3D;SqlSessionFactory&#x3D;&#x3D;</p></li><li><p>整合Mybatis，就是将Mybatis用到的内容交给Spring管理，分析下配置文件</p><p><img src="/../images/2024/12/1214/1630137388717.png" alt="1630137388717"></p><p><strong>说明:</strong></p><ul><li>第一行读取外部properties配置文件，Spring有提供具体的解决方案<code>@PropertySource</code>,需要交给Spring</li><li>第二行起别名包扫描，为SqlSessionFactory服务的，需要交给Spring</li><li>第三行主要用于做连接池，Spring之前我们已经整合了Druid连接池，这块也需要交给Spring</li><li>前面三行一起都是为了创建SqlSession对象用的，那么用Spring管理SqlSession对象吗?回忆下SqlSession是由SqlSessionFactory创建出来的，所以只需要将SqlSessionFactory交给Spring管理即可。</li><li>第四行是Mapper接口和映射文件[如果使用注解就没有该映射文件]，这个是在获取到SqlSession以后执行具体操作的时候用，所以它和SqlSessionFactory创建的时机都不在同一个时间，可能需要单独管理。</li></ul></li></ul><h3 id="6-2-Spring整合Mybatis"><a href="#6-2-Spring整合Mybatis" class="headerlink" title="6.2 Spring整合Mybatis"></a>6.2 Spring整合Mybatis</h3><p>前面我们已经分析了Spring与Mybatis的整合，大体需要做两件事，</p><p>第一件事是:Spring要管理MyBatis中的SqlSessionFactory</p><p>第二件事是:Spring要管理Mapper接口的扫描</p><p>具体该如何实现，具体的步骤为:</p><h4 id="步骤1-项目中导入整合需要的jar包"><a href="#步骤1-项目中导入整合需要的jar包" class="headerlink" title="步骤1:项目中导入整合需要的jar包"></a>步骤1:项目中导入整合需要的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库需要该jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Spring与Mybatis整合的jar包</span></span><br><span class="line"><span class="comment">这个jar包mybatis在前面，是Mybatis提供的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-创建Spring的主配置类"><a href="#步骤2-创建Spring的主配置类" class="headerlink" title="步骤2:创建Spring的主配置类"></a>步骤2:创建Spring的主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//包扫描，主要扫描的是项目中的AccountServiceImpl类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3-创建数据源的配置类"><a href="#步骤3-创建数据源的配置类" class="headerlink" title="步骤3:创建数据源的配置类"></a>步骤3:创建数据源的配置类</h4><p>在配置类中完成数据源的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4-主配置类中读properties并引入数据源配置类"><a href="#步骤4-主配置类中读properties并引入数据源配置类" class="headerlink" title="步骤4:主配置类中读properties并引入数据源配置类"></a>步骤4:主配置类中读properties并引入数据源配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤5-创建Mybatis配置类并配置SqlSessionFactory"><a href="#步骤5-创建Mybatis配置类并配置SqlSessionFactory" class="headerlink" title="步骤5:创建Mybatis配置类并配置SqlSessionFactory"></a>步骤5:创建Mybatis配置类并配置SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置模型类的别名扫描</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>使用SqlSessionFactoryBean封装SqlSessionFactory需要的环境信息</p><p><img src="/../images/2024/12/1214/1630138835057.png" alt="1630138835057"></p><ul><li>SqlSessionFactoryBean是前面我们讲解FactoryBean的一个子类，在该类中将SqlSessionFactory的创建进行了封装，简化对象的创建，我们只需要将其需要的内容设置即可。</li><li>方法中有一个参数为dataSource,当前Spring容器中已经创建了Druid数据源，类型刚好是DataSource类型，此时在初始化SqlSessionFactoryBean这个对象的时候，发现需要使用DataSource对象，而容器中刚好有这么一个对象，就自动加载了DruidDataSource对象。</li></ul></li><li><p>使用MapperScannerConfigurer加载Dao接口，创建代理对象保存到IOC容器中</p><p><img src="/../images/2024/12/1214/1630138916939.png" alt="1630138916939"></p><ul><li>这个MapperScannerConfigurer对象也是MyBatis提供的专用于整合的jar包中的类，用来处理原始配置文件中的mappers相关配置，加载数据层的Mapper接口类</li><li>MapperScannerConfigurer有一个核心属性basePackage，就是用来设置所扫描的包路径</li></ul></li></ul><h4 id="步骤6-主配置类中引入Mybatis配置类"><a href="#步骤6-主配置类中引入Mybatis配置类" class="headerlink" title="步骤6:主配置类中引入Mybatis配置类"></a>步骤6:主配置类中引入Mybatis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-编写运行类"><a href="#步骤7-编写运行类" class="headerlink" title="步骤7:编写运行类"></a>步骤7:编写运行类</h4><p>在运行类中，从IOC容器中获取Service对象，调用方法获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h4><p><img src="/../images/2024/12/1214/1630139036627.png" alt="1630139036627"></p><p>支持Spring与Mybatis的整合就已经完成了，其中主要用到的两个类分别是:</p><ul><li>&#x3D;&#x3D;SqlSessionFactoryBean&#x3D;&#x3D;</li><li>&#x3D;&#x3D;MapperScannerConfigurer&#x3D;&#x3D;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-1 IOC 和 DI 详解</title>
      <link href="/2024/12/13/Spring_day01/"/>
      <url>/2024/12/13/Spring_day01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-IOC和DI-详解"><a href="#Spring-IOC和DI-详解" class="headerlink" title="Spring IOC和DI 详解"></a>Spring IOC和DI 详解</h1><blockquote><p>前言：这是一个系列，主要讲解Spring的核心部分，包括IOC、AOP等。这一部分讲解的是IOC和DI，内容如下。</p></blockquote><p>这一篇包括的内容有：</p><ol><li>Spring核心概念</li><li>IOC 和 DI 的案例；</li><li>IOC的Bean详解；</li><li>DI的几种注入方式；</li></ol><h2 id="Spring核心概念"><a href="#Spring核心概念" class="headerlink" title="Spring核心概念"></a>Spring核心概念</h2><p>Spring我们常讲的是它的两个核心，即IOC和AOP，这两个分别是什么意思呢？怎么体现的呢？这就是我们要学习的。所以我们主要学习四个方面：(1)IOC,(2)整合Mybatis(IOC的具体应用)，(3)AOP,(4)声明式事务(AOP的具体应用)。</p><h3 id="Spring家族"><a href="#Spring家族" class="headerlink" title="Spring家族"></a>Spring家族</h3><p>Spring其实是一个广泛的体系：</p><p><img src="/../images/2024/12/1213/image.png" alt="alt text"></p><p>我们主要关注Spring Framework （Spring的核心）、Spring Boot、Spring Cloud<br>像什么SpringSecurity也会用到的。</p><p>Spring Framework4的体系如下：</p><p><img src="/../images/2024/12/1213/image-1.png" alt="alt text"></p><h3 id="IOC、IOC容器、DI、Bean"><a href="#IOC、IOC容器、DI、Bean" class="headerlink" title="IOC、IOC容器、DI、Bean"></a>IOC、IOC容器、DI、Bean</h3><p>IOC、DI这一部分相当于是一种设计模式，一种设计思想，Spring实现了这种思想；</p><p>IOC：控制反转，原来我们创建对象都是直接new，而控制反转就是将创建对象的权利交给外部，由主动new产生对象转换为由外部提供对象。</p><p>IOC容器：Spring技术对IOC思想进行了实现，Spring提供了一个容器，称为IOC容器，用来充当IOC思想中的”外部”。</p><p>Bean对象：IOC容器中放的就是一个个Bean对象。</p><p>DI：依赖注入，当IOC容器中创建好service和dao对象后，程序不能正常执行，因为service运行需要依赖dao对象，IOC容器中虽然有service和dao对象，但是service对象和dao对象没有任何关系，需要把dao对象交给service,也就是说要绑定service和dao对象之间的关系，这就是依赖注入，一般有通过Setter方法注入，通过构造方法注入，自动装配。</p><p>最终效果：充分解耦，使用IOC容器管理bean（IOC），在IOC容器内将有依赖关系的bean进行关系绑定（DI），最终结果为:使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系.</p><p>这种设计思想在于解耦，假如我们每个类都依赖一个接口，而该接口的实现类目前用的是类1，但是类1某一天不能满足需求了，我们需要将实现类都换成类2，这样子是不是要每个类中的接口实现类都要修改，而我们用IOC的方式，可以直接在配置文件中修改实现类为类2即可。</p><h2 id="IOC-和-DI-的入门"><a href="#IOC-和-DI-的入门" class="headerlink" title="IOC 和 DI 的入门"></a>IOC 和 DI 的入门</h2><p>需求分析:将BookServiceImpl和BookDaoImpl交给Spring管理，并从容器中获取对应的bean<br>对象进行方法调用。</p><h3 id="IOC入门"><a href="#IOC入门" class="headerlink" title="IOC入门"></a>IOC入门</h3><ol><li>创建Maven的java项目</li></ol><p><img src="/../images/2024/12/1213/image-2.png" alt="alt text"></p><ol start="2"><li>pom.xml添加Spring的依赖jar包</li></ol><p><img src="/../images/2024/12/1213/image-3.png" alt="alt text"></p><ol start="3"><li>创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</li></ol><p><img src="/../images/2024/12/1213/image-4.png" alt="alt text"></p><ol start="4"><li>resources下添加spring配置文件，并完成bean的配置</li></ol><p><img src="/../images/2024/12/1213/image-5.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-6.png" alt="alt text"></p><ol start="5"><li>使用Spring提供的接口完成IOC容器的创建</li></ol><p><img src="/../images/2024/12/1213/image-7.png" alt="alt text"></p><ol start="6"><li>从容器中获取对象进行方法调用</li></ol><p><img src="/../images/2024/12/1213/image-8.png" alt="alt text"></p><h3 id="DI入门"><a href="#DI入门" class="headerlink" title="DI入门"></a>DI入门</h3><p>DI就是将两个Bean连接在一起：</p><p>需求:基于IOC入门案例，在BookServiceImpl类中删除new对象的方式，使用Spring的DI完成<br>Dao层的注入</p><ol><li>删除业务层中使用new的方式创建的dao对象</li></ol><p><img src="/../images/2024/12/1213/image-9.png" alt="alt text"></p><ol start="2"><li>在业务层提供BookDao的setter方法</li></ol><p><img src="/../images/2024/12/1213/image-10.png" alt="alt text"></p><ol start="3"><li>在配置文件中添加依赖注入的配置</li></ol><p><img src="/../images/2024/12/1213/image-11.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-12.png" alt="alt text"></p><p>这种其实是Setter注入的方法；</p><ol start="4"><li>运行程序调用方法</li></ol><p><img src="/../images/2024/12/1213/image-13.png" alt="alt text"></p><h2 id="IOC的Bean详解"><a href="#IOC的Bean详解" class="headerlink" title="IOC的Bean详解"></a>IOC的Bean详解</h2><h3 id="Bean基础配置"><a href="#Bean基础配置" class="headerlink" title="Bean基础配置"></a>Bean基础配置</h3><h4 id="基本配置-id-和-class"><a href="#基本配置-id-和-class" class="headerlink" title="基本配置 id 和 class"></a>基本配置 id 和 class</h4><p><img src="/../images/2024/12/1213/image-14.png" alt="alt text"></p><h4 id="别名-name"><a href="#别名-name" class="headerlink" title="别名 name"></a>别名 name</h4><p><img src="/../images/2024/12/1213/image-15.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-16.png" alt="alt text"></p><p>配置了别名之后，在核心容器中可以通过别名来获取Bean</p><h4 id="作用范围-scope-单例还是原型"><a href="#作用范围-scope-单例还是原型" class="headerlink" title="作用范围 scope 单例还是原型"></a>作用范围 scope 单例还是原型</h4><p><img src="/../images/2024/12/1213/image-17.png" alt="alt text"></p><p>bean为单例的意思是在Spring的IOC容器中只会有该类的一个对象</p><p>bean对象只有一个就避免了对象的频繁创建与销毁，达到了bean对象的复用，性能高</p><p>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</p><p>因为所有请求线程共用一个bean对象，所以会存在线程安全问题。</p><p>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</p><p>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</p><p>表现层对象、业务层对象、数据层对象、工具对象适合交给容器管理，因为内部一般不会封装实例对象。</p><h3 id="bean实例化"><a href="#bean实例化" class="headerlink" title="bean实例化"></a>bean实例化</h3><p>这一部分需要研究bean的三种实例化方法：构造方法,静态工厂和实例工厂。后面两种了解一下就行，主要是写一些框架的时候可能会用到。</p><p>1.构造方法实例化：这是默认的方法，Spring的核心容器通过类的构造方法实例化对象，会执行默认的构造方法。</p><p>2.静态工厂方式创建</p><p><img src="/../images/2024/12/1213/image-18.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-19.png" alt="alt text"></p><p>将以上的静态工厂创造的方式替换为配置文件的方式，通过如下配置：</p><p><img src="/../images/2024/12/1213/image-20.png" alt="alt text"></p><p>3.实例工厂方式创建（FactoryBean）</p><p><img src="/../images/2024/12/1213/image-21.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-22.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-23.png" alt="alt text"></p><p>也可以通过Factory类来实现，这样配置类就可以少写一点了</p><p><img src="/../images/2024/12/1213/image-24.png" alt="alt text"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T getObject() throws Exception;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">default boolean isSingleton() &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><p>主要是bean从创建到销毁的过程：</p><ul><li>初始化容器<ol><li>创建对象(内存分配)</li><li>执行构造方法</li><li>执行属性注入(set操作)</li><li>执行bean初始化方法</li></ol></li><li>使用bean<ol><li>执行业务操作</li></ol></li><li>关闭&#x2F;销毁容器<ol><li>执行bean销毁方法</li></ol></li></ul><p>如何在bean的创建之后和销毁之前把我们需要添加的内容添加去，即bean的初始化和销毁方法，这边主要用到两种方式。</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p><img src="/../images/2024/12/1213/image-25.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-26.png" alt="alt text"></p><p>如何在JVM容器关闭之前先关闭IOC容器：</p><p><img src="/../images/2024/12/1213/image-27.png" alt="alt text"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>实现接口：</p><p><img src="/../images/2024/12/1213/image-28.png" alt="alt text"></p><h2 id="DI的几种注入方式；"><a href="#DI的几种注入方式；" class="headerlink" title="DI的几种注入方式；"></a>DI的几种注入方式；</h2><h3 id="Setter注入："><a href="#Setter注入：" class="headerlink" title="Setter注入："></a>Setter注入：</h3><p>分为引用数据类型注入和简单数据类型注入。name是有讲究的，一般我们设置set方法就是将首字母大写然后设置，所以设置name的时候是将首字母小写去掉set。这有没有约定的味道呢？</p><p>需求:在bookServiceImpl对象中注入userDao</p><ol><li>在BookServiceImpl中声明userDao属性，为userDao属性提供setter方法</li></ol><p><img src="/../images/2024/12/1213/image-29.png" alt="alt text"></p><ol start="2"><li>在配置文件中使用property标签注入 ref</li></ol><p><img src="/../images/2024/12/1213/image-30.png" alt="alt text"></p><p>简单数据类型注入：value</p><p><img src="/../images/2024/12/1213/image-31.png" alt="alt text"></p><h3 id="构造函数注入："><a href="#构造函数注入：" class="headerlink" title="构造函数注入："></a>构造函数注入：</h3><p>需求：将BookServiceImpl类中的bookDao修改成使用构造器的方式注入。</p><ol><li>将bookDao的setter方法删除掉，添加带有bookDao参数的构造方法。</li></ol><p><img src="/../images/2024/12/1213/image-32.png" alt="alt text"></p><ol start="2"><li>在applicationContext.xml中配置</li></ol><p><img src="/../images/2024/12/1213/image-33.png" alt="alt text"></p><p>name属性对应的值为构造函数中方法形参的参数名，必须要保持一致。<br>ref属性指向的是spring的IOC容器中其他bean对象。</p><p>简单数据类型注入一样用value即可：</p><p><img src="/../images/2024/12/1213/image-34.png" alt="alt text"></p><p>也可以通过type来设置：</p><p><img src="/../images/2024/12/1213/image-35.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-36.png" alt="alt text"></p><ol><li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</li></ol><ul><li>强制依赖指对象在创建的过程中必须要注入指定的参数</li></ul><ol start="2"><li>可选依赖使用setter注入进行，灵活性强</li></ol><ul><li>可选依赖指对象在创建过程中注入的参数可有可无</li></ul><ol start="3"><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相<br>对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选<br>依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注<br>入</li><li>自己开发的模块推荐使用setter注入</li></ol><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</p><p>自动装配的方式：</p><ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><p>按类型：</p><p><img src="/../images/2024/12/1213/image-37.png" alt="alt text"></p><p>需要注入属性的类中对应属性的setter方法不能省略</p><p>被注入的对象必须要被Spring的IOC容器管理</p><p>按照类型在Spring的IOC容器中如果找到多个对象，会报NoUniqueBeanDefinitionException</p><p>按名称：</p><p><img src="/../images/2024/12/1213/image-38.png" alt="alt text"></p><ol><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推<br>荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ol><h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3><p><img src="/../images/2024/12/1213/image-39.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-40.png" alt="alt text"></p><p>Properties是Java用来读取配置文件的一个类。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git关键点速记</title>
      <link href="/2024/12/12/Git%E5%85%B3%E9%94%AE%E7%82%B9%E9%80%9F%E8%AE%B0/"/>
      <url>/2024/12/12/Git%E5%85%B3%E9%94%AE%E7%82%B9%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言：最近又重温了下廖雪峰老师的Git教程，实在是通俗易懂、醍醐灌顶，想记录一下这个Git教程的关键点，便于以后查看。</p></blockquote><p>Git的主要作用是版本管理和分支管理，对个人开发者来说，可能版本管理会比较重要，分支管理在协作开发中会比较有作用。</p><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><p>初始化一个Git仓库，首先得下载Git <a href="https://git-scm.com/downloads">Git - Downloads</a><br>然后进入一个目录，最好是非英文<br>执行命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建完仓库之后，会有隐藏的.git目录，这里面就存放git的版本信息等。</p><p><strong>Git管理是文本文件，对于二进制文件，只能知道其创建还是删除了，对于修改的操作是不知道的，像图片、视频、docx文档等都是二进制文件。</strong></p><h3 id="Git的版本管理"><a href="#Git的版本管理" class="headerlink" title="Git的版本管理"></a>Git的版本管理</h3><p>先看Git版本库模型：</p><p><img src="/../images/2024/12/1212/img.png" alt="img.png"><br>我们在Git管理的目录中对文件进行修改（增删改）之后，可以执行以下git命令<br>以readme.txt为例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m &quot;XXX&quot;</span><br></pre></td></tr></table></figure><p><strong>add添加到暂存区，commit提交到本地仓库。</strong></p><p><strong>可以多次add，一次commit，这样暂存区中的所有修改都会提交到本地仓库中去。</strong></p><h4 id="Git的回退操作"><a href="#Git的回退操作" class="headerlink" title="Git的回退操作"></a>Git的回退操作</h4><p>可以分为两种：</p><h5 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h5><p>第一种是回退版本，即已经提交了之后想要回退到之前的提交状态或者叫之前的版本。这里需要知道一个概念，当前的版本一般用 HEAD 来表示，HEAD相当于一个指针，指向当前的提交状态。</p><p>我们可以先查看提交历史，然后使用 git reset 根据版本号回退到之前的版本；如果回退之后后悔了想要恢复到新版本，可以先 git reflog，然后再 git reset；</p><p>如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log 查看提交历史</span><br><span class="line">git reset --hard 1094a 根据提交ID回退      git reset --hard HEAD^ 这个表示上一个版本，上上个就是HEAD^^ 前一百个就是HEAD~100</span><br><span class="line"></span><br><span class="line">git reflog 查看命令历史 会出现当前命令执行时的版本号（提交ID）</span><br><span class="line">git reset --hard 1094a 根据提交ID回退</span><br></pre></td></tr></table></figure><h5 id="修改回退"><a href="#修改回退" class="headerlink" title="修改回退"></a>修改回退</h5><p>Git管理的是修改而不是文件，所以如果你对一个文件改了又改回去，那么git status之后是没有变化的；</p><p>当然修改也可以回退，这里可以用 git checkout – file命令，其实也可以用 git restore命令，以后可以直接用 git status，然后看提示命令就行。</p><p>git checkout – file ：</p><p>一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次 git commit 或 git add 时的状态。</p><p>而 git reset 也可以将提交到暂存的修改撤销回工作区。</p><p>所以：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.如果是工作区修改</span><br><span class="line">git status</span><br><span class="line">git checkout -- readme.txt 其实是用版本库中的文件替换工作区文件</span><br><span class="line"></span><br><span class="line">2.如果是暂存区修改回退，然后再撤销修改</span><br><span class="line">git status</span><br><span class="line">git reset HEAD readme.txt</span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><h3 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h3><p>一般我们用Github、Gitee 或者自己的服务器做远程仓库，Git的理念是分布式协作，是没有远程仓库的，我们加上远程仓库的概念是为了让协作更方便。开发的时候仍然可以不需要像SVN一样必须联网才能写代码。</p><p>如果用Github的话需要先连接公钥私钥，这里只做Git命令的分享。</p><p>1.以Github为例，我们可以先在本地创建仓库，后在Github上创建仓库，然后将两者连接，再将本地的内容push到远程仓库去。</p><p>2.第二种是先创建Github仓库，然后clone到本地再进行代码开发；</p><p>第一种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git</span><br><span class="line">git push -u origin master</span><br><span class="line">由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的</span><br><span class="line">master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class="line">git remote -v 查看远程库信息</span><br><span class="line">git remote rm origin 删除远程库连接 origin只是个名字，可以在创建连接时自定义。</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>分支是比较重要的内容，这张图可以比较好的理解分支，HEAD是当前的分支，其实是指向当前分支的最新提交结点。<br><img src="/../images/2024/12/1212/img_1.png" alt="img_1.png"></p><p>Git鼓励大量使用分支：</p><p>查看分支：git branch</p><p>创建分支：git branch <name></p><p>切换分支：git checkout <name>或者git switch <name></p><p>创建+切换分支：git checkout -b <name>或者git switch -c <name></p><p>合并某分支到当前分支：git merge <name></p><p>删除分支：git branch -d <name></p><p>我一般喜欢用git switch</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>对于相同文件的像同行，如果每个分支有不同的代码，会出现冲突，这个时候Git不能快速处理，需要手动解决冲突。</p><p><img src="/../images/2024/12/1212/img_2.png" alt="img_2.png"></p><p>可以先用以下命令合并分支</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge feature1</span><br></pre></td></tr></table></figure><p>然后去vscode或其他编辑上解决冲突，可以全accept incoming ，也可以全部reject。</p><p>解决完冲突之后再次提交，就是下面这样的：</p><p><img src="/../images/2024/12/1212/img_3.png" alt="img3.png"></p><p>可以用以下命令查看git提交图：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="Fast-Forward"><a href="#Fast-Forward" class="headerlink" title="Fast Forward"></a>Fast Forward</h4><p>在没有冲突时，Git会用FF的模式，这样子的提交记录就会很平滑，只有一条直线，看不出来这里是合并过的。所以我们可以用 –no-ff 禁止ff，如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>那么，提交记录就会变成这样：</p><p><img src="/../images/2024/12/1212/img_4.png" alt="img4.png"></p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="/../images/2024/12/1212/img_5.png" alt="img5.png"></p><h4 id="多人协作模式"><a href="#多人协作模式" class="headerlink" title="多人协作模式"></a>多人协作模式</h4><p>一般会有master分支、dev分支、bug分支、feature分支等。</p><ol><li>首先，可以尝试用git push origin <branch-name>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！<br>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin&#x2F;<branch-name>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</li></ol><p>git pull 是 git fetch + git merge：</p><p><img src="/../images/2024/12/1212/img_6.png" alt="img6.png"></p><h4 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h4><ul><li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p></li><li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p></li></ul><h3 id="自建服务器"><a href="#自建服务器" class="headerlink" title="自建服务器"></a>自建服务器</h3><p>公司用的自己的服务器做远程仓库，可以使用以下命令创建裸仓库，裸仓库不会有工作目录，但是会有修改信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare sample.git</span><br></pre></td></tr></table></figure><p>然后再将自己的电脑和这个远程仓库连接就行。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强烈推荐！2024年最新开源Java项目脚手架</title>
      <link href="/2024/12/08/%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%812024%E5%B9%B4%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90Java%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2024/12/08/%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%812024%E5%B9%B4%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90Java%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="强烈推荐！2024年最新开源Java项目脚手架"><a href="#强烈推荐！2024年最新开源Java项目脚手架" class="headerlink" title="强烈推荐！2024年最新开源Java项目脚手架"></a>强烈推荐！2024年最新开源Java项目脚手架</h1><p>最近实习做项目，在研究Java项目相关的脚手架。今天推荐几个 Java 项目快速开发脚手架。以下项目来自于码云Gitee以及Github，大家可以参考一下这些脚手架的代码，我觉得风格迥异，但是整体质量都很不错。</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>ruoyi-vue</li><li>Snowy</li><li>ruoyi-vue-pro</li><li>pig</li><li>eladmin</li></ol><h2 id="ruoyi-vue-若依"><a href="#ruoyi-vue-若依" class="headerlink" title="ruoyi-vue 若依"></a>ruoyi-vue 若依</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>一直想做一款后台管理系统，看了很多优秀的开源项目但是发现没有合适的。于是利用空闲休息时间开始自己写了一套后台系统。如此有了若依。</p></blockquote><p>若依是作者的女儿名字，这也是一个非常出名的项目了，用来自己做项目和外包快速开发是没有问题的。</p><h4 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>若依官网：<a href="http://ruoyi.vip/">http://ruoyi.vip(opens new window)</a></li><li>演示地址：<a href="http://demo.ruoyi.vip/">http://demo.ruoyi.vip(opens new window)</a></li><li>代码下载：<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue</a></li></ul><h3 id="推荐理由"><a href="#推荐理由" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>完善的文档</strong></em>：ruoyi-vue提供了详细的开发文档，对新手友好，易于上手。</li><li><em><strong>丰富的功能</strong></em>：内置多种常用功能，减少重复开发工作。 </li><li><em><strong>社区活跃</strong></em>：拥有庞大的用户群体和活跃的社区，遇到问题时容易找到解决方案。</li></ul><h3 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>企业级应用开发</strong></em>：所有的 Web 应用程序，如网站管理后台，网站会员中心，CMS，CRM，OA。</li></ul><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208224808448.png" alt="image-20241208224808448"></p><h2 id="2-Snowy"><a href="#2-Snowy" class="headerlink" title="2. Snowy"></a>2. Snowy</h2><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>Snowy是一个基于Spring Boot和Vue的前后端分离后台管理系统框架。它注重轻量化和模块化，提供了代码生成器等工具，大大提升了开发效率。</p><h4 id="相关网站-1"><a href="#相关网站-1" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>官方网站：<a href="http://snowy.layui.com/">http://snowy.layui.com/</a> </li><li>GitHub：<a href="https://github.com/xiaonuobase/snowy">https://github.com/xiaonuobase/snowy</a></li></ul><h3 id="推荐理由-1"><a href="#推荐理由-1" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>轻量化</strong></em>：Snowy的设计理念是轻量化，便于维护和定制。 </li><li><em><strong>功能非常全</strong></em>：项目架构图就在项目中放了好几张，可见一斑。吃透这个项目可以学会很多。</li><li><em><strong>国产化</strong></em>：软件层面完全符合等保测评要求，同时实现国产化机型、中间件、数据库适配。 这个团队一共五个人，也是非常的厉害。也有一些外包的需求。</li></ul><h3 id="适合场景-1"><a href="#适合场景-1" class="headerlink" title="适合场景"></a>适合场景</h3><p><em><strong>中大型项目</strong></em>：适用于需要快速启动且注重系统轻量化的中大型项目。 </p><h3 id="项目展示-1"><a href="#项目展示-1" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208225245139.png" alt="image-20241208225245139"></p><h2 id="3-ruoyi-vue-pro"><a href="#3-ruoyi-vue-pro" class="headerlink" title="3. ruoyi-vue-pro"></a>3. ruoyi-vue-pro</h2><h3 id="项目简介-1"><a href="#项目简介-1" class="headerlink" title="项目简介"></a>项目简介</h3><p>ruoyi-vue-pro是基于ruoyi-vue的升级版，增加了更多高级功能和优化。它同样是一个前后端分离的系统，但提供了更多企业级特性。这是另一个人开发的，他们团队的主要产品是yudao，也可以关注一下，<a href="https://gitee.com/yudaocode/yudao-boot-mini%E3%80%82%E8%B7%9FSnowy%E4%B8%80%E6%A0%B7%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%AA%E5%BE%88%E5%BC%BA%E5%8A%B2%E7%9A%84%E5%9B%A2%E9%98%9F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%A4%96%E5%8C%85%E9%9C%80%E6%B1%82%E3%80%82">https://gitee.com/yudaocode/yudao-boot-mini。跟Snowy一样，也是个很强劲的团队，可以做外包需求。</a></p><h4 id="相关网站-2"><a href="#相关网站-2" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>GitHub：<a href="https://github.com/YunaiV/ruoyi-vue-pro">https://github.com/YunaiV/ruoyi-vue-pro</a></li><li>演示地址【Vue3 + element-plus】：[<a href="http://dashboard-vue3.yudao.iocoder.cn/">http://dashboard-vue3.yudao.iocoder.cn</a></li><li>启动文档：<a href="https://doc.iocoder.cn/quick-start/">https://doc.iocoder.cn/quick-start/</a></li></ul><h3 id="推荐理由-2"><a href="#推荐理由-2" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>功能丰富</strong></em>：在ruoyi-vue的基础上，增加了更多高级功能，如工作流、调度中心等。</li><li><em><strong>性能优化</strong></em>：针对性能进行了优化，更适合大型项目。 </li><li><em><strong>开源友好</strong></em>：采用了MIT协议，所有代码全部开源，没有商业版本，这也是他们主打的一个特点。同时功能也非常丰富。</li></ul><h3 id="适合场景-2"><a href="#适合场景-2" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>大型企业项目</strong></em>：适用于需要高级功能和性能优化的大型企业级应用。</li></ul><h3 id="项目展示-2"><a href="#项目展示-2" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208230425256.png" alt="image-20241208230425256"></p><h2 id="4-pig"><a href="#4-pig" class="headerlink" title="4. pig"></a>4. pig</h2><h3 id="项目简介-2"><a href="#项目简介-2" class="headerlink" title="项目简介"></a>项目简介</h3><p>pig是一个基于Spring Boot 2.x和Vue的前后端分离的快速开发平台。它提供了丰富的组件和工具，旨在帮助开发者快速构建系统。 </p><h4 id="相关网站-3"><a href="#相关网站-3" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>官方网站：<a href="http://pig4cloud.com/">http://pig4cloud.com/</a></li><li>GitHub：<a href="https://github.com/pigxcloud/pig">https://github.com/pigxcloud/pig</a></li></ul><h3 id="推荐理由-3"><a href="#推荐理由-3" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>快速开发</strong></em>：提供了大量的快速开发工具和组件，如代码生成器、接口文档等。 </li><li><em><strong>易于部署</strong></em>：支持Docker部署，简化了部署流程。 </li><li><em><strong>社区支持</strong></em>：拥有活跃的社区，提供及时的技术支持和交流。</li></ul><h3 id="适合场景-3"><a href="#适合场景-3" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>初创公司和敏捷开发团队</strong></em>：适用于需要快速迭代和部署的初创公司或敏捷开发团队。</li></ul><h2 id="5-eladmin"><a href="#5-eladmin" class="headerlink" title="5. eladmin"></a>5. eladmin</h2><h3 id="项目简介-3"><a href="#项目简介-3" class="headerlink" title="项目简介"></a>项目简介</h3><p>eladmin是一个基于Spring Boot和Vue的后台管理系统，它集成了众多实用的功能模块，如日志管理、定时任务等，是一个全面的后台解决方案。 </p><h4 id="相关网站-4"><a href="#相关网站-4" class="headerlink" title="相关网站"></a>相关网站</h4><p>官方网站：<a href="https://el-admin.vip/">https://el-admin.vip/</a><br>GitHub：<a href="https://github.com/elunez/eladmin">https://github.com/elunez/eladmin</a></p><h3 id="推荐理由-4"><a href="#推荐理由-4" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>功能全面</strong></em>：涵盖了后台管理系统的各个方面，减少了额外的开发工作。 </li><li><em><strong>安全可靠</strong></em>：注重系统安全，提供了多种安全策略。 </li><li><em><strong>界面美观</strong></em>：基于Element UI，界面美观且用户体验良好。</li></ul><h3 id="适合场景-4"><a href="#适合场景-4" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>后台管理工具开发</strong></em>：一个很经典的开发项目框架，适合后台管理工具的开发。</li></ul><h3 id="项目展示-3"><a href="#项目展示-3" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208231011899.png" alt="image-20241208231011899"></p>]]></content>
      
      
      <categories>
          
          <category> Java技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再出后续！多媒体实验之宽幅和选做篇</title>
      <link href="/2024/04/18/%E7%BB%AD%E9%9B%86/"/>
      <url>/2024/04/18/%E7%BB%AD%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="再出后续！多媒体实验之宽幅和选做篇"><a href="#再出后续！多媒体实验之宽幅和选做篇" class="headerlink" title="再出后续！多媒体实验之宽幅和选做篇"></a>再出后续！多媒体实验之宽幅和选做篇</h1><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>3、设计实现一个视频特效程序，能够将两个（或多个）视频拼接成一个宽幅视频。</p><p>4、试将水波纹模拟程序和YUV视频显示程序结合起来，实现在视频中叠加水波纹（选做）。</p><h3 id="内容1：宽幅视频"><a href="#内容1：宽幅视频" class="headerlink" title="内容1：宽幅视频"></a>内容1：宽幅视频</h3><p>之前的版本中您可以看到我是直接再创建了一个det_image2来存储第二张图片，然后同时显示det_image和det_image2。但是这样的做法似乎不符合内容的要求。再思考了一下，真正的做法应该是构建一个两倍宽的背景图，再将det_image2的宽度设为原来的2倍，然后在放置像素点时，将两张图片的像素都放进去，直接显示det_image2。</p><ol><li><p>构建2倍宽的背景图<img src="/../images/2024/04/0418/xuji/01%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8.jpg" alt="image-20240418111314658"></p></li><li><p>设置det_image2的宽度为2倍宽，我们用这个变量来显示，无论用det_image还是det_image2都是一样的：<img src="/../images/2024/04/0418/xuji/02%E4%B8%A4%E5%80%8D%E5%AE%BD.jpg" alt="02两倍宽"></p></li><li><p>关键代码如下：</p></li></ol><p><img src="/../images/2024/04/0418/xuji/03%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%811.png" alt="image-20240418111840992"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].r = r2;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].g = g2;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].b = b2;</span><br></pre></td></tr></table></figure><ol start="4"><li>显示det_image2的时候宽度也要设置为两倍；<img src="/../images/2024/04/0418/xuji/04%E4%B8%A4%E5%80%8D%E6%98%BE%E7%A4%BA.jpg" alt="04两倍显示"></li><li>效果如下，看起来是一样的，但是原理是一样的：<img src="/../images/2024/04/0418/xuji/05%E6%95%88%E6%9E%9C.jpg" alt="image-20240418112116881"></li></ol><h3 id="内容2：选做部分（视频波纹）"><a href="#内容2：选做部分（视频波纹）" class="headerlink" title="内容2：选做部分（视频波纹）"></a>内容2：选做部分（视频波纹）</h3><p>原理是这样的：只需要修改渲染函数中的内容即可，实验二中是对bmp图片的像素点进行偏移量的转换，对于视频来说，那么首先yuv转码为rgb的格式，然后对每一帧的rgb值也进行像素点的偏移。所以关键的代码是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; cyDib - <span class="number">1</span>; y++) <span class="comment">//y就是i，x就是j没问题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; cxDib - <span class="number">1</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算偏移</span></span><br><span class="line">        <span class="type">int</span> xoff = buffer_2[y][x - <span class="number">1</span>] - buffer_2[y][x + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> yoff = buffer_2[y - <span class="number">1</span>][x] - buffer_2[y + <span class="number">1</span>][x];</span><br><span class="line">        <span class="comment">// 边界处理</span></span><br><span class="line">        <span class="keyword">if</span> (xoff &gt;= cxDib)xoff = cxDib - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (xoff &lt; <span class="number">0</span>)xoff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (yoff &gt;= cyDib)yoff = cyDib - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (yoff &lt; <span class="number">0</span>)yoff = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 处理图像偏移，以背景图片做波纹</span></span><br><span class="line">        <span class="comment">/*det_image[y][x].b = *(pbits + 0 + (x + xoff) * 3 + (y + yoff) * cxDib * 3); </span></span><br><span class="line"><span class="comment">        det_image[y][x].g = *(pbits + 1 + (x + xoff) * 3 + (y + yoff) * cxDib * 3);</span></span><br><span class="line"><span class="comment">        det_image[y][x].r = *(pbits + 2 + (x + xoff) * 3 + (y + yoff) * cxDib * 3);*/</span></span><br><span class="line"></span><br><span class="line">        det_image[y][x].b = det_image[y + yoff][x + xoff].b;</span><br><span class="line">        det_image[y][x].g = det_image[y + yoff][x + xoff].g;</span><br><span class="line">        det_image[y][x].r = det_image[y + yoff][x + xoff].r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示当前帧</span></span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br></pre></td></tr></table></figure><p>效果如下：<img src="/../images/2024/04/0418/xuji/06%E6%95%88%E6%9E%9C2.jpg" alt="06效果2"></p><p>更多内容可以查看：<a href="https://cds007.github.io/">https://cds007.github.io/</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最终卷！实验三！2024 CSU 多媒体技术与应用实验三（详细版）</title>
      <link href="/2024/04/17/%E6%9C%80%E7%BB%88%E5%8D%B7%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/17/%E6%9C%80%E7%BB%88%E5%8D%B7%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1、YUV视频文件显示程序为基础，结合图像融合原理与方法，设计并实现一个给YUV视频添加动态字幕的程序（类似卡拉OK动态字幕）。</p><p>2、设计实现一个视频特效程序，能够将两个视频实现淡入淡出。</p><p>3、设计实现一个视频特效程序，能够将两个（或多个）视频拼接成一个宽幅视频。</p><p>4、试将水波纹模拟程序和YUV视频显示程序结合起来，实现在视频中叠加水波纹（选做）。</p><h3 id="内容1：添加动态字幕"><a href="#内容1：添加动态字幕" class="headerlink" title="内容1：添加动态字幕"></a>内容1：添加动态字幕</h3><ol><li>首先，创建一个WIN32项目，如何创建项目？请参考这篇文章：<a href="https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501">https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501</a></li><li>导入我们的素材：</li></ol><p><img src="/../images/2024/04/0417/lab3/01%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E7%B4%A0%E6%9D%90.jpg" alt="01新建项目导入素材"></p><ol start="3"><li>（附：如果您感兴趣的话，可以做一下视频文件的显示内容，跟实验部分没关系，但是可以显示多种类型的视频格式，具体请参考教材中的代码，效果如下，当然我不是为了放我们gege的视频）<img src="/../images/2024/04/0417/lab3/02%E6%8C%89%E7%85%A7%E4%B9%A6%E6%9C%AC%E4%B8%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%EF%BC%88%E4%B8%8D%E6%98%AF%E5%AE%9E%E9%AA%8C%E5%86%85%E5%AE%B9%EF%BC%89.jpg" alt="02按照书本上代码实现视频的播放（不是实验内容）"></li><li>回到实验部分，接下来我们要完成的是如何显示一个YUV的视频格式；首先，在framework.h最下面添加一个头文件。<img src="/../images/2024/04/0417/lab3/03%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt="03头文件"></li><li>然后，回到主函数，在最前面添加如下宏定义：<img src="/../images/2024/04/0417/lab3/04%E4%B8%BB%E5%87%BD%E6%95%B0%E5%A4%B4%E9%83%A8.jpg" alt="04主函数头部"></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_WIDTH    352</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_HIGHT    288</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">COLOR</span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE b;</span><br><span class="line">    BYTE g;</span><br><span class="line">    BYTE r;</span><br><span class="line">&#125;RGBCOLOR;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>设置用于视频加载和背景图片（background.bmp）的全局变量，复制下面的代码块中的即可，图片给的少了融合图像的部分，我们内容1只用到了det_image，内容二开始会用到det_image2，所以您不妨先复制下来再说，待会都用得到的；<img src="/../images/2024/04/0417/lab3/05%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9const.jpg" alt="05全局变量修改const"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于加载视频文件</span></span><br><span class="line"><span class="type">static</span> FILE* ifp;  <span class="comment">//file pointer</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;foreman.yuv&quot;</span>;</span><br><span class="line"><span class="type">static</span> BYTE      mybuf[<span class="number">45621248</span>]; <span class="comment">//arry,store the video file</span></span><br><span class="line"><span class="type">static</span> BYTE* pBity, * pBitu, * pBitv;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>       y[<span class="number">288</span>][<span class="number">352</span>], u[<span class="number">144</span>][<span class="number">176</span>], v[<span class="number">144</span>][<span class="number">176</span>];</span><br><span class="line"><span class="comment">//背景图像</span></span><br><span class="line"><span class="type">static</span> FILE* ifpback;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* filenameback = <span class="string">&quot;background.bmp&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> mybufback[IMAGE_WIDTH * IMAGE_HIGHT * <span class="number">3</span> + <span class="number">100</span>];</span><br><span class="line"><span class="type">static</span> BITMAPFILEHEADER* pbmfh;</span><br><span class="line"><span class="type">static</span> BITMAPINFO* pbmi;</span><br><span class="line"><span class="type">static</span> BYTE* pbits;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>              cxDib, cyDib;</span><br><span class="line"><span class="comment">//融合图像</span></span><br><span class="line"><span class="type">static</span> COLOR det_image[IMAGE_HIGHT][IMAGE_WIDTH];<span class="comment">//要显示的目标图像1</span></span><br><span class="line"><span class="type">static</span> COLOR det_image2[IMAGE_HIGHT][IMAGE_WIDTH];<span class="comment">//要显示的目标图像2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> n = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>在主函数中添加如下代码，用来打开视频文件和图像文件：<img src="/../images/2024/04/0417/lab3/06%E4%B8%BB%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81.jpg" alt="06主函数代码"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开视频文件</span></span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;ifp, filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mybuf, <span class="number">45621248</span>, <span class="number">1</span>, ifp);</span><br><span class="line">pBity = mybuf;</span><br><span class="line">pBitu = mybuf + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">pBitv = mybuf + <span class="number">352</span> * <span class="number">288</span> + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开图像文件</span></span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;ifpback, filenameback, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mybufback, <span class="number">307200</span>, <span class="number">1</span>, ifpback);</span><br><span class="line">pbmfh = (BITMAPFILEHEADER*)mybufback;</span><br><span class="line">pbmi = (BITMAPINFO*)(pbmfh + <span class="number">1</span>);</span><br><span class="line">pbits = (BYTE*)pbmfh + pbmfh-&gt;bfOffBits;</span><br><span class="line">cxDib = pbmi-&gt;bmiHeader.biWidth;</span><br><span class="line">cyDib = pbmi-&gt;bmiHeader.biHeight;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>添加一个计时器（你懂的，在Resource.h文件中添加）；</p><p><img src="/../images/2024/04/0417/lab3/07%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="07计时器"></p></li><li><p>初始化计时器，没错，就是放在InitInstance函数下面，实验二中提到过：</p></li></ol><p><img src="/../images/2024/04/0417/lab3/08%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="08初始化计时器"></p><ol start="10"><li>主窗口过程函数新增代码（图片没截取全，代码我放在下面了）（我这儿代码跟书上的不太一样，注意别出现图片倒转的情况了）原理解释：其实就是读取每一帧的YUV矩阵，然后转成了RGB，要么从头读要么从尾读，都可以的。注意！！！！HDC的定义处别写错了：</li></ol><p><img src="/../images/2024/04/0417/lab3/09%E4%B8%BB%E7%AA%97%E5%8F%A3%E8%BF%87%E7%A8%8B%E6%96%B0%E5%A2%9E%E4%BB%A3%E7%A0%81.jpg" alt="09主窗口过程新增代码"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> wmId, wmEvent;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HDC hdc;<span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="type">int</span> changeColor;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新添加代码的开始处</span></span><br><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">    hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">    n = n + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">299</span>) n = <span class="number">0</span>;</span><br><span class="line">    pBity = pBity + (<span class="number">352</span> * <span class="number">288</span> + <span class="number">2</span> * (<span class="number">176</span> * <span class="number">144</span>)) * n;</span><br><span class="line">    pBitu = pBity + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">    pBitv = pBitu + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//read a new frame of the yuv file</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">144</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">176</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            u[i][j] = *(pBitu + j + <span class="number">176</span> * (i));</span><br><span class="line">            v[i][j] = *(pBitv + j + <span class="number">176</span> * (i));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//read y，and translate yuv int rgb and display the pixel</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//read y</span></span><br><span class="line">            y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">            y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">            <span class="comment">//translate</span></span><br><span class="line">            <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">                <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line">            <span class="comment">//存储到目标图像矩阵</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 显示当前帧</span></span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">        <span class="number">30</span>,</span><br><span class="line">        <span class="number">20</span>,</span><br><span class="line">        <span class="number">352</span>,</span><br><span class="line">        <span class="number">288</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">288</span>,</span><br><span class="line">        det_image,</span><br><span class="line">        pbmi,</span><br><span class="line">        DIB_RGB_COLORS);</span><br><span class="line">    <span class="comment">// 恢复指向图像数据首字节</span></span><br><span class="line">    pBity = mybuf;</span><br><span class="line">    <span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 新添加代码结束</span></span><br></pre></td></tr></table></figure><ol start="11"><li>显示效果就是这样子的：</li></ol><img src="E:\BaiduSyncdisk\大三下\多媒体技术应用\实验\实验三\水印版\WPS图片批量处理\10成功显示.jpg" alt="10成功显示" style="zoom:50%;" /><ol start="12"><li>接下来我们做字幕的部分，咱不着急，先从普通字幕开始做起，<strong>原理是什么呢？</strong>其实原理就是图片的下方有一个灰色的背景图，这个背景图只有文字那一部分不是黑的，那么我们在读取背景的时候，如果这个像素是黑的，那么我们就将这个像素的值用视频帧的rgb值来替代，如果这个像素不是黑的，那么就用背景图的像素来替代。<strong>那么如何添加你自己的字幕呢？</strong>我们可以用windows自带的画图工具去添加文字，然后保存为bmp文件即可，background.bmp是老师给的软件资源里面的，字幕别是黑色就行：<img src="/../images/2024/04/0417/lab3/12%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%B7%BB%E5%8A%A0%E5%AD%97%E5%B9%95.jpg" alt="12画图工具添加字幕"></li><li>然后我们将第10步的代码中添加图像融合的步骤，像下面这样子：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">n = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n&gt;<span class="number">299</span>) n = <span class="number">0</span>;</span><br><span class="line">pBity = pBity + (<span class="number">352</span> * <span class="number">288</span> + <span class="number">2</span> * (<span class="number">176</span> * <span class="number">144</span>))*n;</span><br><span class="line">pBitu = pBity + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">pBitv = pBitu + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"><span class="comment">//read a new frame of the yuv file</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">144</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">176</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">u[i][j] = *(pBitu + j + <span class="number">176</span> * (i));</span><br><span class="line">v[i][j] = *(pBitv + j + <span class="number">176</span> * (i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//read y，and translate yuv int rgb and display the pixel</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">288</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">352</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//read y</span></span><br><span class="line">y[i][j] = *(pBity + j + (i)* <span class="number">352</span>);</span><br><span class="line"><span class="comment">//translate</span></span><br><span class="line"><span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (r&lt;<span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r&gt;<span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line"><span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + </span><br><span class="line"><span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (g&lt;<span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (g&gt;<span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line"><span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (b&lt;<span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b&gt;<span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"><span class="comment">// 取字幕图标图像的像素值</span></span><br><span class="line"><span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"> <span class="comment">// 如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line"><span class="keyword">if</span> (rback ==<span class="number">0</span> &amp;&amp; gback ==<span class="number">0</span> &amp;&amp; bback ==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">&#125;<span class="keyword">else</span><span class="comment">//否则，就传送字幕图标图像的当前像素值到目标图像</span></span><br><span class="line">&#123;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line"><span class="number">30</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="number">352</span>,</span><br><span class="line"><span class="number">288</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">288</span>,</span><br><span class="line">det_image,</span><br><span class="line">pbmi,</span><br><span class="line">DIB_RGB_COLORS);</span><br><span class="line">pBity = mybuf; <span class="comment">// let pBity to point at the first place of the file</span></span><br><span class="line"><span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>14.单字幕效果就是这样子的啦：</p><p><img src="/../images/2024/04/0417/lab3/13%E5%8D%95%E5%AD%97%E5%B9%95%E6%95%88%E6%9E%9C.jpg" alt="13单字幕效果"></p><ol start="15"><li><p>然后我们来完成动态字幕的效果吧！首先！我们添加一个随机变量changeColor来随时间的变化而变化，让changeColor随着n变化即可。</p><p><img src="/../images/2024/04/0417/lab3/14changeColor.jpg" alt="14changeColor"></p></li><li><p>然后再添加这样一个else if就可以啦，意思就是y小于这个值时显示绿色，y大于这个值时显示原来的字幕，（颜色是自己定义的）<img src="/../images/2024/04/0417/lab3/14%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E8%AE%A9%E5%85%B6%E9%9A%8F%E7%9D%80%E5%B8%A7%E6%95%B0%E5%8F%98%E5%8C%96.jpg" alt="14增加一个变量让其随着帧数变化"></p></li><li><p>动态字幕的效果如下：</p></li></ol><p><img src="/../images/2024/04/0417/lab3/16%E5%8A%A8%E6%80%81%E5%AD%97%E5%B9%95%E6%95%88%E6%9E%9C.jpg" alt="16动态字幕效果"></p><h3 id="内容2：淡入淡出"><a href="#内容2：淡入淡出" class="headerlink" title="内容2：淡入淡出"></a>内容2：淡入淡出</h3><ol><li>添加全局变量：</li></ol><p><img src="/../images/2024/04/0417/lab3/17%E8%A7%86%E9%A2%912%E5%8F%98%E9%87%8F.jpg" alt="17视频2变量"></p><ol start="2"><li>主函数中打开视频2（跟内容1如出一辙的)：</li></ol><p><img src="/../images/2024/04/0417/lab3/18%E6%89%93%E5%BC%80%E8%A7%86%E9%A2%912.jpg" alt="18打开视频2"></p><ol start="3"><li>修改主过程函数：</li></ol><p><img src="/../images/2024/04/0417/lab3/19%E4%BF%AE%E6%94%B9WM_TIMER%EF%BC%88%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA+%E5%AD%97%E5%B9%95%E7%89%88%EF%BC%89.jpg" alt="19修改WM_TIMER（淡入淡出+字幕版）"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">关键代码如下：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//read y</span></span><br><span class="line">        y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">        y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">        <span class="comment">//translate</span></span><br><span class="line">        <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第2个视频</span></span><br><span class="line">        <span class="type">int</span> r2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &lt; <span class="number">0</span>) r2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &gt; <span class="number">255</span>) r2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &lt; <span class="number">0</span>) g2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &gt; <span class="number">255</span>) g2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &lt; <span class="number">0</span>) b2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &gt; <span class="number">255</span>) b2 = <span class="number">255</span>;</span><br><span class="line">        <span class="comment">//定义透明度参数</span></span><br><span class="line">        <span class="type">double</span> para = n / <span class="number">300.0</span>;</span><br><span class="line">        <span class="comment">////两帧图像的当前像素的融合，结果放入目标图像矩阵中</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字幕图标图像的像素值</span></span><br><span class="line">        <span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line">        <span class="keyword">if</span> (rback == <span class="number">0</span> &amp;&amp; gback == <span class="number">0</span> &amp;&amp; bback == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*det_image[288 - i - 1][j].r = r;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].g = g;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].b = b;*/</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现单字幕注释这个else if</span></span><br><span class="line">        <span class="comment">//左半部分的字幕颜色改变部分</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; changeColor) &#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = <span class="number">0</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback + <span class="number">100</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右半部分颜色不改变</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>效果如下：</p><p><img src="/../images/2024/04/0417/lab3/20%E6%95%88%E6%9E%9C.jpg" alt="20效果"></p></li></ol><h3 id="内容3：宽幅视频"><a href="#内容3：宽幅视频" class="headerlink" title="内容3：宽幅视频"></a>内容3：宽幅视频</h3><ol><li><p>这个也比较简单，在上面代码的基础上，直接修改主过程函数如下：</p><p><img src="/../images/2024/04/0417/lab3/21%E6%B7%BB%E5%8A%A0%E5%AE%BD%E5%B9%85%E8%A7%86%E9%A2%91.jpg" alt="21添加宽幅视频"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//read y</span></span><br><span class="line">        y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">        y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">        <span class="comment">//translate</span></span><br><span class="line">        <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第2个视频</span></span><br><span class="line">        <span class="type">int</span> r2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &lt; <span class="number">0</span>) r2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &gt; <span class="number">255</span>) r2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &lt; <span class="number">0</span>) g2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &gt; <span class="number">255</span>) g2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &lt; <span class="number">0</span>) b2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &gt; <span class="number">255</span>) b2 = <span class="number">255</span>;</span><br><span class="line">        <span class="comment">//定义透明度参数</span></span><br><span class="line">        <span class="type">double</span> para = n / <span class="number">300.0</span>;</span><br><span class="line">        <span class="comment">////两帧图像的当前像素的融合，结果放入目标图像矩阵中</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//宽幅视频</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r2;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g2;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字幕图标图像的像素值</span></span><br><span class="line">        <span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line">        <span class="keyword">if</span> (rback == <span class="number">0</span> &amp;&amp; gback == <span class="number">0</span> &amp;&amp; bback == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*det_image[288 - i - 1][j].r = r;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].g = g;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].b = b;*/</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现单字幕注释这个else if</span></span><br><span class="line">        <span class="comment">//左半部分的字幕颜色改变部分</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; changeColor) &#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = <span class="number">0</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback + <span class="number">100</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右半部分颜色不改变</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 显示当前帧</span></span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">20</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">382</span>,</span><br><span class="line">    <span class="number">20</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image2,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br></pre></td></tr></table></figure><ol start="2"><li>效果如下：<img src="/../images/2024/04/0417/lab3/image-20240417222717925.png" alt="image-20240417222717925"></li></ol></li></ol><p>到此，实验三完成了。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137892392">https://blog.csdn.net/cds008/article/details/137892392</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全新超详细！实验二来袭！2024 CSU 多媒体技术与应用实验二（详细版）</title>
      <link href="/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9D%A5%E8%A2%AD%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9D%A5%E8%A2%AD%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1．向内存加载两个或多个 BMP位图文件</p><p>2．利用像素操作实现单色（R、G、B）、灰度图像的显示</p><p>3．通过操作像素实现图像的倒立和正立显示</p><p>4．实现两个图像的叠加（一张风景照 一张自己的人物照）</p><p>5．改变教材给出的波纹模拟程序中石头大小（stonesize）、石头重量（stoneweight）和显示帧频率等参数，观察模拟效果，并分析所看到现象的原因。</p><h3 id="内容1：加载多个位图文件"><a href="#内容1：加载多个位图文件" class="headerlink" title="内容1：加载多个位图文件"></a>内容1：加载多个位图文件</h3><ol><li>首先，创建一个WIN32项目，如何创建项目？请参考这篇文章：<a href="https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501">https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501</a></li><li>接下来，我们按照教材中的步骤进行操作，首先添加全局变量，位置注释里有写，创建的代码模板中是会有的：<img src="/../images/2024/04/0414/lab2/01%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="01添加全局变量"></li><li>添加图片显示的代码，这段代码是添加在wWinMain函数中的，你也可以自己写一个函数封装这个代码，然后在wWinMain中去调用，并做好前置声明。代码的内容如下，这里是两张图片的添加：<img src="/../images/2024/04/0414/lab2/02%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="02添加图片显示代码"></li></ol><p>​也可以封装这两个代码，再放到wWinMain函数中：</p><p><img src="/../images/2024/04/0414/lab2/02%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82.jpg" alt="02封装一层"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载第一张图片</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadImage1</span><span class="params">(HINSTANCE hInstance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_1.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;加载图像错误&quot;</span>, <span class="string">L&quot;message&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hbmp = (HBITMAP)<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_1.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">GetObject</span>(hbmp, <span class="built_in">sizeof</span>(BITMAP), &amp;bmp);</span><br><span class="line">    bi.biSize = <span class="built_in">sizeof</span>(BITMAPINFOHEADER);</span><br><span class="line">    bi.biWidth = bmp.bmWidth;</span><br><span class="line">    bi.biHeight = bmp.bmHeight;</span><br><span class="line">    bi.biPlanes = bmp.bmPlanes;</span><br><span class="line">    bi.biBitCount = bmp.bmBitsPixel;</span><br><span class="line">    bi.biCompression = bmp.bmType;</span><br><span class="line">    bi.biSizeImage = bmp.bmWidth * bmp.bmHeight * bmp.bmBitsPixel / <span class="number">8</span>;</span><br><span class="line">    bi.biXPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi.biYPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi.biClrImportant = <span class="number">0</span>;</span><br><span class="line">    hDib = <span class="built_in">GlobalAlloc</span>(GHND, bi.biSizeImage);</span><br><span class="line">    lpbitmap = (BYTE*)<span class="built_in">GlobalLock</span>(hDib);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadImage2</span><span class="params">(HINSTANCE hInstance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_3.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;加载图像错误&quot;</span>, <span class="string">L&quot;message&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hbmp2 = (HBITMAP)<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_3.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">GetObject</span>(hbmp2, <span class="built_in">sizeof</span>(BITMAP), &amp;bmp2);</span><br><span class="line">    bi2.biSize = <span class="built_in">sizeof</span>(BITMAPINFOHEADER);</span><br><span class="line">    bi2.biWidth = bmp2.bmWidth;</span><br><span class="line">    bi2.biHeight = bmp2.bmHeight;</span><br><span class="line">    bi2.biPlanes = bmp2.bmPlanes;</span><br><span class="line">    bi2.biBitCount = bmp2.bmBitsPixel;</span><br><span class="line">    bi2.biCompression = bmp2.bmType;</span><br><span class="line">    bi2.biSizeImage = bmp2.bmWidth * bmp2.bmHeight * bmp2.bmBitsPixel / <span class="number">8</span>;</span><br><span class="line">    bi2.biXPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi2.biYPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi2.biClrImportant = <span class="number">0</span>;</span><br><span class="line">    hDib2 = <span class="built_in">GlobalAlloc</span>(GHND, bi2.biSizeImage);</span><br><span class="line">    lpbitmap2 = (BYTE*)<span class="built_in">GlobalLock</span>(hDib2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>重写重绘事件函数，具体代码参考如下：<img src="/../images/2024/04/0414/lab2/02%E9%87%8D%E7%BB%98%E5%87%BD%E6%95%B0.jpg" alt="02重绘函数"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取位图1</span></span><br><span class="line"><span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">    hbmp,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (UINT)bmp.bmHeight,</span><br><span class="line">    lpbitmap,</span><br><span class="line">    (BITMAPINFO*)&amp;bi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="comment">//获取位图2</span></span><br><span class="line"><span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">    hbmp2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (UINT)bmp2.bmHeight,</span><br><span class="line">    lpbitmap2,</span><br><span class="line">    (BITMAPINFO*)&amp;bi2,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="comment">//显示单张图片</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetDIBits1</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">20</span>,<span class="comment">//x</span></span><br><span class="line">    <span class="number">20</span>,<span class="comment">//y</span></span><br><span class="line">    bi.biWidth,</span><br><span class="line">    bi.biHeight,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    bi.biHeight,</span><br><span class="line">    lpbitmap,</span><br><span class="line">    (BITMAPINFO*)&amp;bi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示单张图片2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetDIBits2</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">        <span class="number">300</span>,<span class="comment">//x</span></span><br><span class="line">        <span class="number">20</span>,<span class="comment">//y</span></span><br><span class="line">        bi2.biWidth,</span><br><span class="line">        bi2.biHeight,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        bi2.biHeight,</span><br><span class="line">        lpbitmap2,</span><br><span class="line">        (BITMAPINFO*)&amp;bi2,</span><br><span class="line">        DIB_RGB_COLORS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入素材，素材来自于老师的软件资源：<img src="/../images/2024/04/0414/lab2/03%E5%AF%BC%E5%85%A5%E7%B4%A0%E6%9D%90.jpg" alt="03导入素材"></p></li><li><p>接下来直接编译运行项目，即可看到我们的两个位图文件：<img src="/../images/2024/04/0414/lab2/03%E6%98%BE%E7%A4%BA%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87.jpg" alt="03显示两张图片"></p><p>到此，内容一结束。</p></li></ol><h3 id="内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示"><a href="#内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示" class="headerlink" title="内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示"></a>内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示</h3><ol><li>在内容一完成的基础上，我们可以直接在重写重绘函数中的区域中添加如下代码，具体是那条注释下面的代码，上面那个是内容的部分：<img src="/../images/2024/04/0414/lab2/04%E5%8D%95%E8%89%B2%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="04单色显示代码"></li></ol><p>当然，我们也可以将这部分代码封装起来，成为一个函数，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单色显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowRGB</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// RGB单色显示</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span> + bi.biWidth, i + <span class="number">50</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, g, <span class="number">0</span>));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span> + bi.biWidth * <span class="number">2</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>结果显示如下：<img src="/../images/2024/04/0414/lab2/05%E5%8D%95%E8%89%B2%E6%98%BE%E7%A4%BA.jpg" alt="05单色显示"></p></li><li><p>灰度图像的显示，依然是只有一段代码：<img src="/../images/2024/04/0414/lab2/06%E7%81%B0%E5%BA%A6%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="06灰度显示代码"></p></li></ol><p>封装后的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//灰度显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowGray</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE average = (r + g + b) / <span class="number">3</span>;</span><br><span class="line">            BYTE y = r * <span class="number">0.299</span> + g * <span class="number">0.58</span> + b * <span class="number">0.114</span>;</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(g, g, g));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span> + bi.biWidth + <span class="number">2</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(average, average, average));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span> + bi.biWidth * <span class="number">2</span> + <span class="number">4</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(y, y, y));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>灰度图像的显示结果：<img src="/../images/2024/04/0414/lab2/07%E7%81%B0%E5%BA%A6%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.jpg" alt="07灰度显示图片"></li></ol><h3 id="内容三：倒立和正立"><a href="#内容三：倒立和正立" class="headerlink" title="内容三：倒立和正立"></a>内容三：倒立和正立</h3><ol><li><p>这一部分依然很简单，跟内容二的步骤几乎是一样的，我们直接给代码即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒立显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daoli</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//倒立</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正立显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhengli</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正立</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要将这段代码放到重绘函数中即可，也就是**&#x2F;&#x2F; TODO: 在此处添加使用 hdc 的任何绘图代码…**这段代码后面。</p></li></ol><h3 id="内容四：图像叠加"><a href="#内容四：图像叠加" class="headerlink" title="内容四：图像叠加"></a>内容四：图像叠加</h3><p>内容依然是跟上面的步骤一样的，很简单。直接给代码了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//叠加显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">diejia</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r1 = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g1 = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b1 = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//读取第二幅图像的RGB分量</span></span><br><span class="line">            BYTE r2 = *(lpbitmap2 + <span class="number">2</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g2 = *(lpbitmap2 + <span class="number">1</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b2 = *(lpbitmap2 + <span class="number">0</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//两幅图像的对应分量按比例叠加，a=0.5</span></span><br><span class="line">            BYTE r = r1 / <span class="number">2</span> + r2 / <span class="number">2</span>;</span><br><span class="line">            BYTE g = g1 / <span class="number">2</span> + g2 / <span class="number">2</span>;</span><br><span class="line">            BYTE b = b1 / <span class="number">2</span> + b2 / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//显示合成图像</span></span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">180</span> + bi.biWidth * <span class="number">2</span>, i + <span class="number">20</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/../images/2024/04/0414/lab2/10%E5%8F%A0%E5%8A%A0%E6%98%BE%E7%A4%BA%EF%BC%88%E6%9C%AC%E4%BA%BA%E7%85%A7%E7%89%87%EF%BC%89.jpg" alt="10叠加显示（本人照片）"></p><h3 id="内容五：波纹显示"><a href="#内容五：波纹显示" class="headerlink" title="内容五：波纹显示"></a>内容五：波纹显示</h3><p>这个有点复杂，我们重新新建了一个项目用来完成这部分内容（所有的代码均来自老师所给的软件资源或者教材中）。</p><ol><li><p>新建一个WIN32项目，并导入stone.bmp的素材；</p></li><li><p>在framework.h头文件中添加内容：<img src="/../images/2024/04/0414/lab2/11%E5%A4%B4%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0.jpg" alt="11头文件添加"></p></li><li><p>在主函数中最前面添加宏定义：<img src="/../images/2024/04/0414/lab2/12%E4%B8%BB%E5%87%BD%E6%95%B0%E6%B7%BB%E5%8A%A0.jpg" alt="12主函数添加"></p></li><li><p>定义水波纹全局变量：<img src="/../images/2024/04/0414/lab2/13%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="13全局变量"></p></li><li><p>对接下来需要添加的函数进行前向声明：<img src="/../images/2024/04/0414/lab2/14%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E.jpg" alt="14前向声明"></p></li><li><p>波能初始化，此段代码加在wWinMain函数中：<img src="/../images/2024/04/0414/lab2/15%E6%B3%A2%E8%83%BD%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="15波能初始化"></p></li><li><p>定义一个计时器（在Resource.h文件中）：<img src="/../images/2024/04/0414/lab2/16%E5%AE%9A%E4%B9%89%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="16定义计时器"></p></li><li><p>设置计时器：</p><p><img src="/../images/2024/04/0414/lab2/17%E8%AE%BE%E7%BD%AE%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="17设置计时器"></p></li><li><p>添加过程函数（再添加一个WM_TIMER）：</p><p><img src="/../images/2024/04/0414/lab2/18%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B.jpg" alt="18添加过程"></p><p>这一部分的完整代码是这样的，如果编译运行不了可以直接复制我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">        <span class="comment">//获取位图1</span></span><br><span class="line">        <span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">            hbmp,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (UINT)bmp.bmHeight,</span><br><span class="line">            lpbitmap,</span><br><span class="line">            (BITMAPINFO*)&amp;bi,</span><br><span class="line">            DIB_RGB_COLORS);</span><br><span class="line">        <span class="comment">//获取位图2</span></span><br><span class="line">        <span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">            hbmp2,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (UINT)bmp2.bmHeight,</span><br><span class="line">            lpbitmap2,</span><br><span class="line">            (BITMAPINFO*)&amp;bi2,</span><br><span class="line">            DIB_RGB_COLORS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示位图1</span></span><br><span class="line">        <span class="built_in">SetDIBits1</span>(hdc);</span><br><span class="line">        <span class="comment">//显示位图2</span></span><br><span class="line">        <span class="built_in">SetDIBits2</span>(hdc);</span><br><span class="line">        <span class="comment">//单色rgb</span></span><br><span class="line">        <span class="built_in">ShowRGB</span>(hdc);</span><br><span class="line">        <span class="comment">//灰度图显示</span></span><br><span class="line">        <span class="built_in">ShowGray</span>(hdc);</span><br><span class="line">        <span class="comment">//倒立显示</span></span><br><span class="line">        <span class="built_in">daoli</span>(hdc);</span><br><span class="line">        <span class="comment">//正立显示</span></span><br><span class="line">        <span class="built_in">zhengli</span>(hdc);</span><br><span class="line">        <span class="comment">//叠加显示</span></span><br><span class="line">        <span class="built_in">diejia</span>(hdc);</span><br><span class="line">        <span class="comment">//波纹模拟</span></span><br><span class="line">        <span class="comment">//setDiBitsStone(hdc);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将声明的三个函数全部添加进来：</p><p><img src="/../images/2024/04/0414/lab2/19%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0.jpg" alt="19三个函数"></p></li><li><p>效果如下：</p><p><img src="/../images/2024/04/0414/lab2/20%E6%95%88%E6%9E%9C.jpg" alt="20效果"></p></li></ol><p>到此，实验二完成了。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137754611">https://blog.csdn.net/cds008/article/details/137754611</a></p><p>有问题可在评论区交流~</p><p>实验三过两天再写，码字累了。</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全新超详细！2024 CSU 多媒体技术与应用实验一（详细版）</title>
      <link href="/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1．设计一个程序，利用三个Media Session同时播放三个音频文件。</p><p>2.打开两个音频文件（限Wav文件，并具有相同的采样频率和量化深度），然后用第二个音频文件左声道代替第一个音频文件左声道，但保留第一个音频文件的右声道，最后播放第一个音频文件，并观察结果。</p><p>3．设计实现静音效果。</p><h3 id="实验前置内容"><a href="#实验前置内容" class="headerlink" title="实验前置内容"></a>实验前置内容</h3><h4 id="如何用VS2022创建一个WIN32项目"><a href="#如何用VS2022创建一个WIN32项目" class="headerlink" title="如何用VS2022创建一个WIN32项目"></a>如何用VS2022创建一个WIN32项目</h4><p>创建项目-&gt;选择windows桌面应用程序即可，里面会有一些示例代码，项目是可以直接运行的（直接无脑下一步就行）。</p><p><img src="/../images/2024/04/0414/lab1/01%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg" alt="01新建项目"></p><h4 id="如何获取免费的音频"><a href="#如何获取免费的音频" class="headerlink" title="如何获取免费的音频"></a>如何获取免费的音频</h4><p>老师的代码中只提供了TheClassic.wav文件，而我们的实验中是需要更多的wav文件的，这里我是去<a href="https://www.ear0.com这个网站中下载的,建议最好下载wav格式的文件,因为mp3可能会出现一些问题./">https://www.ear0.com这个网站中下载的，建议最好下载wav格式的文件，因为mp3可能会出现一些问题。</a></p><h4 id="如何让你的程序播放音频"><a href="#如何让你的程序播放音频" class="headerlink" title="如何让你的程序播放音频"></a>如何让你的程序播放音频</h4><p>有两种方式，一种是使用playSound组件，一种是使用MediaSession组件，实验用的是第二种，我们都介绍一下。你也可以按照我的步骤去添加一遍代码，因为我的项目中包含了这两种方式。</p><h5 id="playSound组件播放音频的步骤"><a href="#playSound组件播放音频的步骤" class="headerlink" title="playSound组件播放音频的步骤"></a>playSound组件播放音频的步骤</h5><ol><li><p>打开资源视图，我们在菜单栏里添加两个按钮，分别为播放和暂停；步骤如下：<img src="/../images/2024/04/0414/lab1/02%E6%89%93%E5%BC%80%E8%B5%84%E6%BA%90%E8%A7%86%E5%9B%BE.jpg" alt="02打开资源视图"></p></li><li><p>然后重新设计menu，添加两个按钮：<img src="/../images/2024/04/0414/lab1/03%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1menu.jpg" alt="03重新设计menu"></p></li><li><p>双击按钮，在右下角的栏目里修改一下ID：<img src="/../images/2024/04/0414/lab1/04%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9id.jpg" alt="04双击修改id"></p></li><li><p>然后我们回到Resource.h文件中，删除掉刚刚被我们替换的ID，保留刚刚更改的ID：<img src="/../images/2024/04/0414/lab1/05%E5%88%A0%E9%99%A4id.jpg" alt="05删除id"></p></li><li><p>回到.cpp文件，首先在头文件中添加MMsystem.h文件：</p><p><img src="/../images/2024/04/0414/lab1/07%E6%B7%BB%E5%8A%A0h%E5%92%8C%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81.jpg" alt="07添加h和处理代码"></p></li><li><p>然后我们在主窗口函数中添加事件，使用PlaySound函数来控制音乐的播放与暂停（这里被注释的就是我们需要添加的，其他的先不用管，那是第二种方法要用到的代码）：<img src="/../images/2024/04/0414/lab1/07%E6%B7%BB%E5%8A%A0%E4%B8%BB%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81.jpg" alt="07添加主窗口代码"></p></li><li><p>将音频文件放入到项目目录中：<img src="/../images/2024/04/0414/lab1/081%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84.jpg" alt="081音频文件的路径"></p></li><li><p>接下来直接编译是会出错的，我们还需要添加链接文件，步骤是点击项目-&gt;属性-&gt;链接器-&gt;附加依赖项，然后添加库：<img src="/../images/2024/04/0414/lab1/09%E7%82%B9%E5%87%BB%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%E7%84%B6%E5%90%8E%E6%B7%BB%E5%8A%A0playSound%E5%BA%93.jpg" alt="09点击项目属性然后添加playSound库"></p></li><li><p>OK！现在你可以编译运行你的代码，然后播放进行测试：<img src="/../images/2024/04/0414/lab1/10%E6%92%AD%E6%94%BE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95.jpg" alt="10播放进行测试"></p></li></ol><h5 id="MediaSession组件播放音频的步骤"><a href="#MediaSession组件播放音频的步骤" class="headerlink" title="MediaSession组件播放音频的步骤"></a>MediaSession组件播放音频的步骤</h5><ol><li><p>在刚刚的项目中，我们直接修改一下framework.h，添加最后两个头文件：<img src="/../images/2024/04/0414/lab1/11%E4%BF%AE%E6%94%B9framework%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt="11修改framework头文件"></p></li><li><p>然后我们再添加一些依赖项（参考playSound中的添加步骤）<img src="/../images/2024/04/0414/lab1/12%E5%86%8D%E6%AC%A1%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E9%A1%B9.jpg" alt="12再次添加依赖项"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mfplat.lib</span><br><span class="line">mfreadwrite.lib</span><br><span class="line">mfuuid.lib</span><br><span class="line">propsys.lib</span><br><span class="line">shell32.lib</span><br><span class="line">d2d1.lib</span><br><span class="line">winmm.lib</span><br><span class="line">mf.lib</span><br><span class="line"><span class="comment">//这是本次实验中需要用到的所有依赖项，你可以直接全部引入进去。针对这个步骤中的依赖项，你可以选择看PPT或者教材中的步骤。</span></span><br></pre></td></tr></table></figure></li><li><p>接下来，回到我们的.cpp文件中，在添加全局变量的区域中去创建我们待会需要用到的全局变量：<img src="/../images/2024/04/0414/lab1/13%E5%88%9B%E5%BB%BA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="13创建全局变量"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">IMFMediaSession* m_pSession;</span><br><span class="line">IMFSourceResolver* m_pSourceResolver = <span class="literal">NULL</span>;</span><br><span class="line">IUnknown* pSource = <span class="literal">NULL</span>;</span><br><span class="line">IMFMediaSource* m_pSource;</span><br><span class="line">IMFTopology* m_pTopology = <span class="literal">NULL</span>;</span><br><span class="line">IMFPresentationDescriptor* m_pSourcePD = <span class="literal">NULL</span>;</span><br><span class="line">DWORD cSourceStreams = <span class="number">0</span>;</span><br><span class="line">IMFTopologyNode* pSourceNode = <span class="literal">NULL</span>;</span><br><span class="line">IMFTopologyNode* pOutputNode = <span class="literal">NULL</span>;</span><br><span class="line">IMFActivate* pSinkActivate = <span class="literal">NULL</span>;</span><br><span class="line">IMFStreamDescriptor* pSD = <span class="literal">NULL</span>;</span><br><span class="line">IMFMediaTypeHandler* pHandler = <span class="literal">NULL</span>;</span><br><span class="line">IMFActivate* pActivate = <span class="literal">NULL</span>;</span><br><span class="line">PROPVARIANT var;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建媒体会话函数，我们可以将这个函数放在代码的最下面：</p><p><img src="/../images/2024/04/0414/lab1/14%E5%88%9B%E5%BB%BA%E5%AA%92%E4%BD%93%E4%BC%9A%E8%AF%9D.jpg" alt="14创建媒体会话"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateMediaSession</span><span class="params">(HWND hWnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr;</span><br><span class="line">    <span class="comment">// 初始化Media Foundation平台</span></span><br><span class="line">    hr = <span class="built_in">MFStartup</span>(MF_VERSION);</span><br><span class="line">    <span class="comment">// 创建媒体会话</span></span><br><span class="line">    hr = <span class="built_in">MFCreateMediaSession</span>(<span class="literal">NULL</span>, &amp;m_pSession);</span><br><span class="line">    <span class="comment">// 创建源解析器</span></span><br><span class="line">    hr = <span class="built_in">MFCreateSourceResolver</span>(&amp;m_pSourceResolver);</span><br><span class="line">    MF_OBJECT_TYPE ObjectType = MF_OBJECT_INVALID;</span><br><span class="line">    <span class="comment">// 利用源解析器创建媒体源</span></span><br><span class="line">    hr = m_pSourceResolver-&gt;<span class="built_in">CreateObjectFromURL</span>(</span><br><span class="line">        <span class="string">L&quot;TheClassic.wav&quot;</span>, <span class="comment">// URL of the source.</span></span><br><span class="line">        MF_RESOLUTION_MEDIASOURCE, <span class="comment">// Create a source object.</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// Optional property store.</span></span><br><span class="line">        &amp;ObjectType, <span class="comment">// Receives the created object type. </span></span><br><span class="line">        &amp;pSource <span class="comment">// Receives a pointer to the media source.</span></span><br><span class="line">    );</span><br><span class="line">    hr = pSource-&gt;<span class="built_in">QueryInterface</span>(<span class="built_in">IID_PPV_ARGS</span>(&amp;m_pSource));</span><br><span class="line">    <span class="comment">// Create the presentation descriptor for the media source.</span></span><br><span class="line">    hr = m_pSource-&gt;<span class="built_in">CreatePresentationDescriptor</span>(&amp;m_pSourcePD);</span><br><span class="line">    <span class="comment">// Create a new topology.</span></span><br><span class="line">    hr = <span class="built_in">MFCreateTopology</span>(&amp;m_pTopology);</span><br><span class="line">    <span class="comment">// Get the number of streams in the media source.</span></span><br><span class="line">    hr = m_pSourcePD-&gt;<span class="built_in">GetStreamDescriptorCount</span>(&amp;cSourceStreams);</span><br><span class="line">    <span class="comment">// For each stream, create the topology nodes and add them to the topology.</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; cSourceStreams; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BOOL fSelected = FALSE;</span><br><span class="line">        hr = m_pSourcePD-&gt;<span class="built_in">GetStreamDescriptorByIndex</span>(i, &amp;fSelected, &amp;pSD);</span><br><span class="line">        hr = pSD-&gt;<span class="built_in">GetMediaTypeHandler</span>(&amp;pHandler);</span><br><span class="line">        GUID guidMajorType;</span><br><span class="line">        hr = pHandler-&gt;<span class="built_in">GetMajorType</span>(&amp;guidMajorType);</span><br><span class="line">        <span class="keyword">if</span> (MFMediaType_Audio == guidMajorType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create the audio renderer.</span></span><br><span class="line">            hr = <span class="built_in">MFCreateAudioRendererActivate</span>(&amp;pActivate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (MFMediaType_Video == guidMajorType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create the video renderer.</span></span><br><span class="line">            hr = <span class="built_in">MFCreateVideoRendererActivate</span>(hWnd, &amp;pActivate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建拓扑的输入节点（即源节点）</span></span><br><span class="line">        hr = <span class="built_in">MFCreateTopologyNode</span>(MF_TOPOLOGY_SOURCESTREAM_NODE, &amp;pSourceNode);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_SOURCE, m_pSource);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_PRESENTATION_DESCRIPTOR,</span><br><span class="line">            m_pSourcePD);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_STREAM_DESCRIPTOR, pSD);</span><br><span class="line">        hr = m_pTopology-&gt;<span class="built_in">AddNode</span>(pSourceNode);</span><br><span class="line">        <span class="comment">// 创建拓扑的输出节点</span></span><br><span class="line">        hr = <span class="built_in">MFCreateTopologyNode</span>(MF_TOPOLOGY_OUTPUT_NODE, &amp;pOutputNode);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetObject</span>(pActivate);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetUINT32</span>(MF_TOPONODE_STREAMID, <span class="number">0</span>);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetUINT32</span>(MF_TOPONODE_NOSHUTDOWN_ON_REMOVE, FALSE);</span><br><span class="line">        hr = m_pTopology-&gt;<span class="built_in">AddNode</span>(pOutputNode);</span><br><span class="line">        <span class="comment">// Connect the source node to the output node.</span></span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">ConnectOutput</span>(<span class="number">0</span>, pOutputNode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将拓扑设置给Media Session</span></span><br><span class="line">    m_pSession-&gt;<span class="built_in">SetTopology</span>(<span class="number">0</span>, m_pTopology);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>添加前向声明（刚刚添加的函数）：</p><p><img src="/../images/2024/04/0414/lab1/15%E6%B7%BB%E5%8A%A0%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E.jpg" alt="15添加前向声明"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawBackground</span><span class="params">(HWND hWnd)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>然后我们在winMain主函数中引入刚刚创建的函数：</p><p><img src="/../images/2024/04/0414/lab1/16%E5%BC%95%E5%85%A5%E5%87%BD%E6%95%B0.jpg" alt="16引入函数"></p></li><li><p>最后，我们重新写一下在playSound方法中写过的按钮事件即可，（到此，你可以编译运行一下代码，是一样的效果）：<img src="/../images/2024/04/0414/lab1/17%E8%AE%A9%E6%88%91%E4%BB%AC%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E9%9F%B3%E4%B9%90.jpg" alt="17让我们重新生成音乐"></p></li></ol><p>到此，前置内容结束，接下来是我们的实验部分。</p><h4 id="利用三个Media-Session同时播放三个音频文件"><a href="#利用三个Media-Session同时播放三个音频文件" class="headerlink" title="利用三个Media Session同时播放三个音频文件"></a>利用三个Media Session同时播放三个音频文件</h4><p>这个其实比较简单，我们只需要重复刚刚的步骤三次即可。</p><ol><li><p>在已经实现MediaSession组件播放音频的基础上，我们定义三个Media Session（代码没给全，你可以自己添加一下）：<img src="/../images/2024/04/0414/lab1/18%E5%AE%9A%E4%B9%89%E4%B8%89%E4%B8%AAmediasession%E7%94%9F%E6%88%90%E4%B8%89%E4%B8%AA%E9%9F%B3%E4%B9%90.jpg" alt="18定义三个mediasession生成三个音乐"></p></li><li><p>然后我们可以编写几乎相同的三个CreateMediaSession函数（其中，只有媒体源的URL是不一样的，媒体源需要你下载好并放到同一个目录中去，具体可以参考如何获取免费的音频）</p><p><img src="/../images/2024/04/0414/lab1/image-20240414192449708.png" alt="image-20240414192449708"></p></li><li><p>接下来，我们继续在winMain主函数中引入刚刚创建的函数，然后再重写一下按钮事件，这时可以启动三个mediaSession看看，此时应该能听到三个音乐的声音，到此，实验一的第一个内容完成了！：</p><p><img src="/../images/2024/04/0414/lab1/19%E5%90%AF%E5%8A%A8%E4%B8%89%E4%B8%AAmediasession.jpg" alt="19启动三个mediasession"></p></li></ol><h4 id="声道替换"><a href="#声道替换" class="headerlink" title="声道替换"></a>声道替换</h4><ol><li>第一个步骤，需要你在完成刚刚的实验的基础上，按照教材的步骤，去编写转码内容，完成<strong>音频转码程序</strong>的部分（教材给的很详细，直接按步骤来就可以了，其中的代码你也可以在老师所给的软件资源中的AudioMix中查看）<img src="/../images/2024/04/0414/lab1/image-20240414193540620.png" alt="image-20240414193540620"></li></ol><p>​代码可以参考这个项目：<img src="/../images/2024/04/0414/lab1/image-20240414193606498.png" alt="image-20240414193606498"></p><ol start="2"><li><p>这里我是直接按照教材，将AudioMix的代码复制到我的项目中的，我只写下需要修改的地方，首先是这个地方我们播放out1.wav即可，这里的按钮事件是我自己添加的按钮，你也可以添加你自己的按钮来控制声道替换的播放事件：</p><p><img src="/../images/2024/04/0414/lab1/21%E7%BC%96%E5%86%99%E6%92%AD%E6%94%BEout1.jpg" alt="21编写播放out1"></p></li><li><p>其次是这个文件名需要修改，请修改为你自己的音频文件，否则项目是运行不成功的：</p><p><img src="/../images/2024/04/0414/lab1/21%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D.jpg" alt="21修改文件名"></p></li><li><p>然后我们就可以运行一下我们的项目了，这个时候应该是可以按照教材中步骤运行成功的：<img src="/../images/2024/04/0414/lab1/22%E6%92%AD%E6%94%BEout1%E5%B8%A6%E8%80%B3%E6%9C%BA%E6%95%88%E6%9E%9C%E6%9B%B4%E4%BD%B3.jpg" alt="22播放out1带耳机效果更佳"></p></li><li><p>但是！教材中的代码跟实验内容还是有点不同的，我们需要重写下WriteWaveData函数，我们只需要知道，这个是实现我们的代码的核心函数即可，具体的引用关系，你也可以再看看教材的介绍。以下是我们重写的代码。<img src="/../images/2024/04/0414/lab1/image-20240414194119662.png" alt="image-20240414194119662"></p></li></ol><p>其中，被注释掉的地方就是教材的代码，没被注释的就是我们重写的代码。至此，实验二的部分就完成了，您可以直接运行代码，然后播放out1.wav即可，关于播放的形式您可以选择在菜单中新建一个按钮点击播放。</p><h4 id="静音效果"><a href="#静音效果" class="headerlink" title="静音效果"></a>静音效果</h4><p>不知道聪明的你是否发现了，其实在声道替换的最后，我们已经实现了静音效果，实际上，您只需播放out2.wav即可，这个就是一个静音文件。其实pAudioData控制的就是out1.wav中的数据流，pAudioDataAnother控制的就是out2.wav中的数据流。你也可以自己在菜单中添加一个按钮，然后写一个事件来控制out2.wav的播放与暂停。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>播放的时候我们可以设置自己的背景，代码可以参考我的，也可以参考老师的软件资源提供的，下面是我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我重写了下加载图片的方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawBackground</span><span class="params">(HWND hwnd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载图片</span></span><br><span class="line">    HBITMAP hBitmap = (HBITMAP)<span class="built_in">LoadImage</span>(<span class="literal">NULL</span>, <span class="string">L&quot;groundimage2.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hBitmap) &#123;</span><br><span class="line">        <span class="comment">// 加载图片失败，可以处理错误</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取窗口设备上下文</span></span><br><span class="line">    HDC hdcWindow = <span class="built_in">GetDC</span>(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建与窗口设备上下文兼容的内存设备上下文</span></span><br><span class="line">    HDC hdcMem = <span class="built_in">CreateCompatibleDC</span>(hdcWindow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择位图到内存设备上下文</span></span><br><span class="line">    HBITMAP hOldBitmap = (HBITMAP)<span class="built_in">SelectObject</span>(hdcMem, hBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取窗口的客户区大小</span></span><br><span class="line">    RECT rect;</span><br><span class="line">    <span class="built_in">GetClientRect</span>(hwnd, &amp;rect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将内存设备上下文的内容复制到窗口设备上下文</span></span><br><span class="line">    <span class="built_in">StretchBlt</span>(hdcWindow, <span class="number">0</span>, <span class="number">0</span>, rect.right, rect.bottom, hdcMem, <span class="number">0</span>, <span class="number">0</span>, rect.right, rect.bottom, SRCCOPY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复旧位图</span></span><br><span class="line">    <span class="built_in">SelectObject</span>(hdcMem, hOldBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理资源</span></span><br><span class="line">    <span class="built_in">ReleaseDC</span>(hwnd, hdcWindow);</span><br><span class="line">    <span class="built_in">DeleteDC</span>(hdcMem);</span><br><span class="line">    <span class="built_in">DeleteObject</span>(hBitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个函数放在这个重绘事件下即可：</p><p><img src="/../images/2024/04/0414/lab1/image-20240414194657682.png" alt="image-20240414194657682"></p><p>当然，你可能还需要对这个函数进行前置的声明。</p><p>最终的效果就是这样的：</p><p><img src="/../images/2024/04/0414/lab1/24%E5%AE%9E%E9%AA%8C%E6%95%88%E6%9E%9C.jpg" alt="24实验效果"></p><p><img src="/../images/2024/04/0414/lab1/25%E5%AE%9E%E9%AA%8C%E6%95%88%E6%9E%9C.jpg" alt="25实验效果"></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137749511">https://blog.csdn.net/cds008/article/details/137749511</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之链表篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之链表篇"><a href="#跟练代码随想录之链表篇" class="headerlink" title="跟练代码随想录之链表篇"></a>跟练代码随想录之链表篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-移除链表元素（leetcode203）"><a href="#1-移除链表元素（leetcode203）" class="headerlink" title="1.移除链表元素（leetcode203）"></a><strong>1.移除链表元素（leetcode203）</strong></h4><p>这题算是链表里比较基础的了，构建了链表的基本思想。</p><p>两种方法，1：头节点和中间节点分开处理，这样要先用一个while循环，找到第一个不为val 的节点，充当头节点；</p><p>2：声明一个虚拟节点dummyNode，其next指向头节点，然后直接一个while循环来判断，相等则删，不等则next；注意，判断的是当前节点的next，因为这是单向链表，我们想删next，需要有cur，我们想删cur，却没有cur的前一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>&amp;&amp;cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.val==val) cur.next = cur.next.next;</span><br><span class="line">            <span class="keyword">else</span> cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-设计链表（leetocde707）"><a href="#2-设计链表（leetocde707）" class="headerlink" title="2.设计链表（leetocde707）"></a><strong>2.设计链表（leetocde707）</strong></h4><p>这个设计还挺麻烦的，有很多小细节要注意，哪怕我看了卡尔的视频，但是还是debug了三次才ac。</p><p>我链表插入是没有问题的，主要的出bug的地方在 第53行，不能等于，因为size也可以添加到尾部；第66行，如果大于size要return null；第28行，语法错误，不能直接index。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.next=null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node dummy;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dummy = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;=size) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.next.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node head = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        head.next = dummy.next;</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=null)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;size) <span class="keyword">return</span> ;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = cur.next;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;=size) <span class="keyword">return</span> ;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="3-翻转链表（leetcode206）"><a href="#3-翻转链表（leetcode206）" class="headerlink" title="3.翻转链表（leetcode206）"></a><strong>3.翻转链表（leetcode206）</strong></h4><p>这题讲的也是很清晰的，翻转链表的话是需要三个指针的；</p><p>因为我们是单链表，所以需要一个pre指针保留上一个位置，需要一个cur指针保存当前位置，但是为了能让循环遍历下去，我们需要一个temp指针来保留下一个位置，从而不断遍历。而循环终止条件我们可以模拟一下就是当cur等于空时，循环终止。</p><p>而递归的写法，其实就是参考双指针的写法来的，跟双指针一模一样，所以递归不是凭空想出来的，递归的过程就是循环的过程。</p><p>递归这里有个坑，<em><strong>在第52行，我们需要用一个值来接收下一层递归的返回值，不然我们第一层递归是拿不到下面层递归的返回值的，这里卡尔没讲清楚。</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur, ListNode pre)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> pre; <span class="comment">//终止条件</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = pre; <span class="comment">//每层递归做的事情</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">retNode</span> <span class="operator">=</span> reverse(temp,cur);</span><br><span class="line">        <span class="keyword">return</span> retNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-两两交换链表中的节点（leetcode24）"><a href="#4-两两交换链表中的节点（leetcode24）" class="headerlink" title="4.两两交换链表中的节点（leetcode24）"></a><strong>4.两两交换链表中的节点（leetcode24）</strong></h4><p>这题的话，还是注意一个虚拟头节点的使用吧，要操纵3个节点。</p><p>容易出现的问题就是空指针和死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//最好是用虚拟头节点，因为这个过程需要3个节点，1节点来指向后面两个节点，后面两个节点进行交换</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">//考虑好遍历终止条件，有奇数偶数之差</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//把1和3保存</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp1</span> <span class="operator">=</span> cur.next.next.next; <span class="comment">//顶多为null，不会空指针</span></span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            cur.next.next = temp;</span><br><span class="line">            temp.next = temp1;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-删除链表的倒数第N个节点（leetcode19）"><a href="#5-删除链表的倒数第N个节点（leetcode19）" class="headerlink" title="5.删除链表的倒数第N个节点（leetcode19）"></a><strong>5.删除链表的倒数第N个节点（leetcode19）</strong></h4><p>这题的话主要是快慢指针的思想。以后看到找倒数的多少多少个，就想到快慢指针！</p><p>然后为什么用dummy，下面也讲了。统一性问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        <span class="comment">//建议使用虚拟头结点，这样会方便很多，要不然每次针对头结点（没有前一个指针指向头结点），还要单独处理。</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        n++; <span class="comment">//这个是细节，多走一步才能找到前一个</span></span><br><span class="line">        <span class="keyword">while</span>(n--!=<span class="number">0</span>&amp;&amp;fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果不n++而是循环结束再执行可能空指针异常</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以用正数的方式来，总之还是一个虚拟头节点，这个会方便很多。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> size+<span class="number">1</span>-n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(pos--!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-环形链表（leetcode142）"><a href="#6-环形链表（leetcode142）" class="headerlink" title="6.环形链表（leetcode142）"></a><strong>6.环形链表（leetcode142）</strong></h4><p>这个的话，有点难度。</p><p>有三个地方需要注意：</p><p>​    <em><strong>&#x2F;&#x2F;如何判断有环：快慢指针</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img.png" alt="image-20240407204627236"></p><p><em><strong>&#x2F;&#x2F;如何判断入口处在那里：相遇起点追及证明（利用时间相等建立等式）</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img_1.png" alt="image-20240407204708453"></p><p>​    <em><strong>&#x2F;&#x2F;为什么一圈内一定被追上</strong></em></p><p><em><strong>把圈展开就行</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img_2.png" alt="image-20240407204724632"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//如何判断有环：快慢指针</span></span><br><span class="line">        <span class="comment">//如何判断入口处在那里：相遇起点追及证明（利用时间相等建立等式）</span></span><br><span class="line">        <span class="comment">//为什么一圈内一定被追上</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="comment">//判断初始节点</span></span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                index1 = fast;</span><br><span class="line">                index2 = head;</span><br><span class="line">                <span class="keyword">while</span>(index1!=index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-反转链表II（leetcode92）"><a href="#7-反转链表II（leetcode92）" class="headerlink" title="7.反转链表II（leetcode92）"></a><strong>7.反转链表II（leetcode92）</strong></h4><p><img src="/../images/2024/04/0407/lianbiao/img_3.png" alt="image-20240407204749215"></p><p>这是小米面试手撕的一道算法，其实我那个想法是正确的，参考了反转链表1，面试官提醒我的是第二种方法。</p><p>第二种是穿针引线的方法，pre是不变的，cur其实也是不变的，指向一个节点，只有temp是变的，一直指向cur.next。</p><p>然后示例中先是3，2再是4 3 2.最后完成。</p><p>下面第一个是我的想法代码，第二种方法是面试官提示我的穿针引线法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//参考反转链表I法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        first = dummy;</span><br><span class="line">        last = dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre2</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;left-<span class="number">1</span>)&#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            pre2 = pre2.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        pre2 = pre2.next;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;right+<span class="number">1</span>)&#123;</span><br><span class="line">            last = last.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = pre.next;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=right-left)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        first.next = pre;</span><br><span class="line">        pre2.next = last;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//穿针引线法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;left-<span class="number">1</span>)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;right-left)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = temp.next;</span><br><span class="line">            temp.next = pre.next;</span><br><span class="line">            pre.next = temp;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之哈希表篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E5%93%88%E5%B8%8C%E8%A1%A8%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E5%93%88%E5%B8%8C%E8%A1%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之哈希表篇"><a href="#跟练代码随想录之哈希表篇" class="headerlink" title="跟练代码随想录之哈希表篇"></a>跟练代码随想录之哈希表篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-有效的字母异位词（leetocde242）"><a href="#1-有效的字母异位词（leetocde242）" class="headerlink" title="1.有效的字母异位词（leetocde242）"></a><strong>1.有效的字母异位词（leetocde242）</strong></h4><p>有效的字母异位词，就是两个字符串是由相同个数的字母组成的，比如abbc和bbac。这题一看就是用哈希来做。</p><p>一般的哈希结构我们有三种，<strong>用哈希数组、哈希set、哈希map来做。</strong></p><p><strong>个数小的时候可以用数组，大的时候可以用set，有明确k-v值的话可以用map。</strong></p><p><strong>这里我们可以用最简单的数组来做。</strong></p><p><img src="/../images/2024/04/0407/haxi/img.png" alt="image-20240407203212200"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是用哈希数组来做：O（n）的复杂度：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">if</span> (s.length()!=t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            hash[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash[t.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;hash.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-两个数组的交集（leetocde349）"><a href="#2-两个数组的交集（leetocde349）" class="headerlink" title="2.两个数组的交集（leetocde349）"></a><strong>2.两个数组的交集（leetocde349）</strong></h4><p>什么时候要用哈希表呢。比如一个什么什么判断是否出现过，这种就是用哈希表。</p><p>然后为什么不用数组呢，因为比如像0，5，20000，这样就要开很大的数组，如果元素比较集中且较小就可以用数组。</p><p><img src="/../images/2024/04/0407/haxi/img_1.png" alt="image-20240407203242297"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length==<span class="number">0</span>||nums2.length==<span class="number">0</span>||nums1==<span class="literal">null</span>||nums2==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        Set&lt;Integer&gt; retSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(i)) retSet.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-两数之和（leetcode1）"><a href="#3-两数之和（leetcode1）" class="headerlink" title="3.两数之和（leetcode1）"></a><strong>3.两数之和（leetcode1）</strong></h4><p>这题要判断每个元素是否之前出现过。所以其实还是比较简单的，时间复杂度O(n)就够了。</p><p><img src="/../images/2024/04/0407/haxi/img_2.png" alt="image-20240407203304121"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] retArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer,Integer&gt; Map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> target-nums[i];</span><br><span class="line">            <span class="keyword">if</span> (Map.containsKey(p))&#123;</span><br><span class="line">                retArr[<span class="number">0</span>] = Map.get(p);</span><br><span class="line">                retArr[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> retArr;</span><br><span class="line">            &#125;</span><br><span class="line">            Map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用HashMap就可以了。</span></span><br></pre></td></tr></table></figure><h4 id="4-四数相加II（leetcode454）"><a href="#4-四数相加II（leetcode454）" class="headerlink" title="4.四数相加II（leetcode454）"></a><strong>4.四数相加II（leetcode454）</strong></h4><p>哈希表里比较经典的题目。</p><p>先循环nums1和nums2，保存a+b的值到map中，然后循环后两个数组的值，获取数组和，去判断map中是否有相反数，有的话就让value+1，其实还是很好理解的，这个过程。</p><p><img src="/../images/2024/04/0407/haxi/img_3.png" alt="image-20240407203324989"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums2)&#123;</span><br><span class="line">                map.put((i+j),map.getOrDefault((i+j),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums4)&#123;</span><br><span class="line">                result+=map.getOrDefault((<span class="number">0</span>-i-j),<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-三数之和（leetcode15）"><a href="#5-三数之和（leetcode15）" class="headerlink" title="5.三数之和（leetcode15）"></a><strong>5.三数之和（leetcode15）</strong></h4><p>这题我感觉真的还是蛮难的，看了这么多题。哈希的思路很好想，跟上面那题挺像，但是难在去重；</p><p>然后好做的方法是双指针，但是也难在去重，这个去重的逻辑真的不好想。</p><p>​    <img src="/../images/2024/04/0407/haxi/img_4.png" alt="0"></p><p>注意看我的注释，有很多细节要注意，要考虑好多种测试用例和边界情况：</p><p>比如 -1 -1 -1 -1  1 1 1 1 1，这种如何去重；</p><p>比如  0 0  0 00 0 0 这种对于i而言如何去重；</p><p>比如要先保存结果再去移动去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">            <span class="comment">//对i去重</span></span><br><span class="line">            <span class="comment">//细节下面这个逻辑在000的样例中会下标越界</span></span><br><span class="line">            <span class="comment">//while(i&gt;=1&amp;&amp;nums[i]==nums[i-1]) i++; //说明i之前已经被加过了</span></span><br><span class="line">            <span class="comment">//得改成这样：</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">1</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//细节不能等于，不然就是同一个数字了</span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//先保存结果</span></span><br><span class="line">                    List&lt;Integer&gt; retList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    retList.add(nums[i]);</span><br><span class="line">                    retList.add(nums[left]);</span><br><span class="line">                    retList.add(nums[right]);</span><br><span class="line">                    list.add(retList);</span><br><span class="line">                    <span class="comment">//对left和right去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="comment">//细节，最后还要移动</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-四数之和（leetcode18）"><a href="#6-四数之和（leetcode18）" class="headerlink" title="6.四数之和（leetcode18）"></a><strong>6.四数之和（leetcode18）</strong></h4><p>这题是在三数之和的上面演进的，考虑的细节还是比较多的，注意的是target可能小于0！！！</p><p>所以我们这里一个是剪枝如何剪枝，我考虑 了nums[i]&gt;target，我认为这个还是比较正确的，卡尔没讲到；</p><p>然后就是去重的操作，注意我的注释细节；</p><p>有个用法可以学学，怎么把一组数转为list，<strong>用到Arrays.asList()</strong></p><p>​    <img src="/../images/2024/04/0407/haxi/img_5.png" alt="0"></p><p>把第一层结束之后，后面的步骤就跟三数之和是一样的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//两级剪枝，两级去重</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">//一级</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//真正的剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;target/<span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//一级去重，思路是一样的，只记录i第一次当-2的情况</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">1</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> target-nums[i];</span><br><span class="line">                <span class="comment">//这个剪枝可能不是最优的</span></span><br><span class="line">                <span class="comment">//if (nums[i]+nums[j]&gt;target) break;</span></span><br><span class="line">                <span class="comment">//二番目，这里想的太简单了，不能这样剪枝，对于负数的target不适用</span></span><br><span class="line">                <span class="keyword">if</span> (j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[j]+nums[left]+nums[right]&gt;sum) right--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nums[j]+nums[left]+nums[right]&lt;sum) left++;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//先保存再去重</span></span><br><span class="line">                        result.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之数组篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之数组篇"><a href="#跟练代码随想录之数组篇" class="headerlink" title="跟练代码随想录之数组篇"></a>跟练代码随想录之数组篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-二分查找（leetcode704）"><a href="#1-二分查找（leetcode704）" class="headerlink" title="1.二分查找（leetcode704）"></a><strong>1.二分查找（leetcode704）</strong></h4><p>看懂了，有两种写法，如果是左闭右闭的写法的话，那么left可以等于right，right&#x3D;mid-1，left&#x3D;mid+1；</p><p>如果是左闭右开的写法的话，那么left</p><p>总结：最好是用左闭右闭的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target) right=middle-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target) left=middle+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-移除数组元素（leetcode27）"><a href="#2-移除数组元素（leetcode27）" class="headerlink" title="2.移除数组元素（leetcode27）"></a><strong>2.移除数组元素（leetcode27）</strong></h4><p>这题就是移除数组中所有值为val的元素，用一个快慢数组来解决，代码一看就能明白，能想到吗？跟数组有关的，大概率是要用双指针来优化，将n2的复杂度优化为n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast]!=val) nums[low++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-有序数组的平方（leetcode977）"><a href="#3-有序数组的平方（leetcode977）" class="headerlink" title="3.有序数组的平方（leetcode977）"></a><strong>3.有序数组的平方（leetcode977）</strong></h4><p>如果用暴力sort来排序的话，那么时间复杂度是n+nlogn，用双指针可以有效地变为n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.pow(nums[i],<span class="number">2</span>)&gt;Math.pow(nums[j],<span class="number">2</span>)) result[k--] = (<span class="type">int</span>)Math.pow(nums[i++],<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> result[k--] = (<span class="type">int</span>)Math.pow(nums[j--],<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里用Math函数可能会慢1ms，用nums[i]*nums[i]可能会快一点。</span></span><br><span class="line"><span class="comment">//其实就是从两边进行比较，大的放最右边，因为这个序列是有序数组。</span></span><br></pre></td></tr></table></figure><h4 id="4-长度最小的子数组（leetcode209）"><a href="#4-长度最小的子数组（leetcode209）" class="headerlink" title="4.长度最小的子数组（leetcode209）"></a><strong>4.长度最小的子数组（leetcode209）</strong></h4><p>这题是用滑动窗口来解决，记住，j 是 窗口的终止节点，并且，此滑动窗口的时间复杂度是On，严格来说是O2n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,sum=<span class="number">0</span>,result=Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//j是终止的节点</span></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;nums.length;j++)&#123;</span><br><span class="line">            sum+=nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j-i+<span class="number">1</span>&lt;result) result = j-i+<span class="number">1</span>;</span><br><span class="line">                sum-=nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-螺旋矩阵（leetcode59）"><a href="#5-螺旋矩阵（leetcode59）" class="headerlink" title="5.螺旋矩阵（leetcode59）"></a><strong>5.螺旋矩阵（leetcode59）</strong></h4><p>这题真的还挺有意思的，为什么呢？</p><p>第一，确定不变量，我们要的是左闭右开，这样子做完4次处理，每个数都能被处理到，如果是左闭右闭，那么会有四个数被重复赋值了；</p><p>第二，确定起始位置和偏移量，startx,starty,offset，startx和starty决定了每一轮从哪儿开始进行遍历，offset决定了每一轮遍历的终点，其实startx，starty就是每一轮最左上角那个点。</p><p>第三，每次遍历时，要严格遵守上面的规则，左闭右开和起始位置、偏移位置的规则。</p><p>看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix =<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=n/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j=starty;j&lt;n-offset;j++) matrix[startx][j]=count++;</span><br><span class="line">            <span class="keyword">for</span> (i=startx;i&lt;n-offset;i++) matrix[i][j] = count++;</span><br><span class="line">            <span class="keyword">for</span> (;j&gt;starty;j--) matrix[i][j] = count++;</span><br><span class="line">            <span class="keyword">for</span> (;i&gt;startx;i--) matrix[i][j] = count++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            offset++;</span><br><span class="line">            cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">1</span>) matrix[n/<span class="number">2</span>][n/<span class="number">2</span>]=count;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次就ac，牛逼。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编撰并发布自己的hexo博文</title>
      <link href="/2024/04/07/%E5%A6%82%E4%BD%95%E7%BC%96%E6%92%B0%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E6%96%87/"/>
      <url>/2024/04/07/%E5%A6%82%E4%BD%95%E7%BC%96%E6%92%B0%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何编撰并发布自己的博文"><a href="#如何编撰并发布自己的博文" class="headerlink" title="如何编撰并发布自己的博文"></a>如何编撰并发布自己的博文</h2><blockquote><p>写在前面，发布博客我个人认为是一个比较重要的习惯，反映了一个人近期的成长，这篇教程主要关于如何编撰并发布自己的hexo博文。</p></blockquote><h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github等git仓库上</span><br><span class="line">hexo n “my article” #完整命令为hexo new,用于新建一篇名为“my article”的文章</span><br></pre></td></tr></table></figure><h3 id="hexo编撰博文的常用步骤"><a href="#hexo编撰博文的常用步骤" class="headerlink" title="hexo编撰博文的常用步骤"></a>hexo编撰博文的常用步骤</h3><ol><li><p>hexo n 命令生成md文件</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img1.png" alt="img1"></p></li></ol><p>​然后我们就可以在post目录下看到刚新建的md文件了。</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img.png" alt="image-20240407170817681"></p><ol start="2"><li><p>编写md文件：</p><p>我们可以使用Typora编辑器来编写，非常的好用，非常的简单，平时也可以用；当然手搓也很简单。</p><p><a href="https://typoraio.cn/">typora中文官网</a></p></li></ol><p>​3.常见的hexo前置信息：</p><p>​hexo前置信息是放在文章前面的，包括标签，分类，主题等等，可以用于标识一篇文章；下面是一些常见的前置信息：</p><table><thead><tr><th>title</th><th>网页文章标题</th></tr></thead><tbody><tr><td>date</td><td>文章创建日期</td></tr><tr><td>comments</td><td>文章评论功能是否启动</td></tr><tr><td>tags</td><td>文章标签</td></tr><tr><td>categories</td><td>文章分类</td></tr><tr><td>keywords</td><td>文章关键字</td></tr></tbody></table><p>​具体如何使用，可以参考：</p><p>​<a href="https://zhuanlan.zhihu.com/p/50787870">标签和分类设置</a></p><p>​<a href="https://zhuanlan.zhihu.com/p/645394881">评论设置ButterFly</a></p><p>​ 例如：</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img_1.png" alt="image-20240407171556866"></p><ol start="4"><li>发布文章：</li></ol><p>​接下来，打开命令行，分别输入hexo g，hexo s（可选），hexo d命令即可。然后就能看到自己的博文啦！ </p><ol start="5"><li>参考文章：<br><a href="https://zhuanlan.zhihu.com/p/50787870">https://zhuanlan.zhihu.com/p/50787870</a><br><a href="https://zhuanlan.zhihu.com/p/645394881">https://zhuanlan.zhihu.com/p/645394881</a><br><a href="https://blog.csdn.net/qq_54743738/article/details/120943085">https://blog.csdn.net/qq_54743738/article/details/120943085</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非Spring项目Maven配置</title>
      <link href="/2024/03/06/%E9%9D%9ESpring%E9%A1%B9%E7%9B%AEMaven%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/06/%E9%9D%9ESpring%E9%A1%B9%E7%9B%AEMaven%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在做软创的项目时，遇到了一个需求，就是如何在一个非Spring项目中使用MyBatis-Plus，我觉得这个需求还是挺有价值的，因为我们现在很多项目都是Spring项目，思维比较死板。所以我记录了这个问题。</p><p>时间比较紧，内容写的跳跃性可能比较强，大家跟上。</p><h2 id="1、Maven配置"><a href="#1、Maven配置" class="headerlink" title="1、Maven配置"></a>1、Maven配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.30&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 导入mybatis-plus相关依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h3><p>设计到的主要文件夹和Java类我用红框圈起来了，domain实体类，mapper存放Mapper类，service存放服务类，resources&#x2F;mapper存放映射xml文件，MyBatis3Test存放测试类：</p><p><img src="/../images/20240306/image-20240306171527565.png" alt="image-20240306171527565"></p><h3 id="3、开始设计"><a href="#3、开始设计" class="headerlink" title="3、开始设计"></a>3、开始设计</h3><h4 id="3-1-domain类的设计"><a href="#3-1-domain类的设计" class="headerlink" title="3.1 domain类的设计"></a>3.1 domain类的设计</h4><ol><li><p>先设计数据库表，我直接在IDEA里面设计了。如下图：</p><p><img src="/../images/20240306/image-20240306172635405.png" alt="image-20240306172635405"></p></li></ol><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table testuser</span><br><span class="line">(</span><br><span class="line">    name   varchar(32) default NULL null comment &#x27;姓名&#x27;,</span><br><span class="line">    age    int         default 0    null comment &#x27;年龄&#x27;,</span><br><span class="line">    userid int                      not null comment &#x27;用户id&#x27;,</span><br><span class="line">    constraint userid</span><br><span class="line">        primary key (userid)</span><br><span class="line">)</span><br><span class="line">    comment &#x27;用来测试的user类&#x27;;</span><br></pre></td></tr></table></figure><p>​2.然后设计domain类：代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package generator.domain;</span><br><span class="line"></span><br><span class="line">//import com.baomidou.mybatisplus.annotations.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line">import lombok.Data;</span><br><span class="line">@Data</span><br><span class="line">@TableName(value =&quot;testuser&quot;)</span><br><span class="line">public class TestUser &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    @TableId</span><br><span class="line">    private Integer userid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-Mapper类设计："><a href="#3-2-Mapper类设计：" class="headerlink" title="3.2 Mapper类设计："></a>3.2 Mapper类设计：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package generator.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.BaseMapper;</span><br><span class="line">import generator.domain.TestUser;</span><br><span class="line"></span><br><span class="line">public interface TestUserMapper extends BaseMapper&lt;TestUser&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-SQL映射文件设计："><a href="#3-3-SQL映射文件设计：" class="headerlink" title="3.3 SQL映射文件设计："></a>3.3 SQL映射文件设计：</h4><p><img src="/../images/20240306/image-20240306173414367.png" alt="image-20240306173414367"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &quot;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;generator.mapper.TestUserMapper&quot;&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-核心配置文件："><a href="#3-4-核心配置文件：" class="headerlink" title="3.4 核心配置文件："></a>3.4 核心配置文件：</h4><p>这里不一定是 mysql.cj.jdbc ，如果报错，就把 cj 去掉。</p><p><img src="/../images/20240306/image-20240306173656194.png" alt="image-20240306173656194"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 在控制台输出执行的sql语句 --&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;environments default=&quot;mysql&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;mysql&quot; &gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jqzc&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/TestUserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-5-编写测试类"><a href="#3-5-编写测试类" class="headerlink" title="3.5 编写测试类"></a>3.5 编写测试类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import generator.mapper.GpsMapper;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.Configuration;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.MybatisSessionFactoryBuilder;</span><br><span class="line">import com.baomidou.mybatisplus.MybatisXMLConfigBuilder;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.Wrapper;</span><br><span class="line">import com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line">import generator.domain.TestUser;</span><br><span class="line">import generator.mapper.TestUserMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MyBatis3Test &#123;</span><br><span class="line"></span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory = null;</span><br><span class="line">    /**</span><br><span class="line">     * 测试从数据库里获取GPS的信息</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void getGPS() throws Exception&#123;</span><br><span class="line">        //获取配置文件的输入流</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.cfg.xml&quot;);</span><br><span class="line"></span><br><span class="line">        MybatisSessionFactoryBuilder mybatisSessionFactoryBuilder = new MybatisSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        //通过配置文件获取session工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = mybatisSessionFactoryBuilder.build(inputStream);</span><br><span class="line"></span><br><span class="line">        //获取一个session会话</span><br><span class="line">        SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        TestUserMapper mapper = session.getMapper(TestUserMapper.class);</span><br><span class="line"></span><br><span class="line">        TestUser user = mapper.selectById(1);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我用了一个Junit进行测试，你也可以自己编写一个类。</p><p>测试结果如下：<img src="/../images/20240306/image-20240306174536612.png" alt="image-20240306174536612"></p><p>根据上面的代码可以看出，mybatis-plus的启动就是加载核心文件（这里是mybatis.cfg.xml）,通过核心文件加载相关的sql映射文件完成对普通映射文件与mapper映射文件的封装（区分普通映射文件与mapper映射文件的方式是映射文件的namespece是否是接口的全路径），然后就可以通过会话对象（SqlSession）获取mapper访问数据库了。<br>当使用spring对其进行整合时，spring的配置文件将代替mybatis-plus的核心文件，并且mapper与sqlsession会话将交给spring去管理。我们只需给spring指定去那里获取sql映射文件与mapper接口即可。</p><p>参考链接：<a href="https://www.jianshu.com/p/042567d0b5a2">https://www.jianshu.com/p/042567d0b5a2</a></p>]]></content>
      
      
      <categories>
          
          <category> Java项目经验谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSU-OJ部署教程</title>
      <link href="/2024/03/04/CSU-OJ%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2024/03/04/CSU-OJ%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有点突发奇想，又有点心血来潮，想把之前做的CSU-OJ系统部署到服务器上，于是乎写下了这篇教程。</p><h2 id="1-服务器购买"><a href="#1-服务器购买" class="headerlink" title="1.服务器购买"></a>1.服务器购买</h2><p>我是在腾讯云上购买的服务器，本来还在想这个2h4g的服务器也太贵了吧，一个月就要100米，然后群里有个老哥说可以买幻兽帕鲁的服务器，2h16g，一个月只要32，我直接说老哥你真牛，这波羊毛被你薅到了。于是我买了一个月的幻兽帕鲁的服务器，然后改装了一下。<br>服务器购买地址：<a href="https://curl.qcloud.com/loqNrwQ4">服务器</a><br><img src="/../images/csuoj-dev/%E4%BB%B7%E6%A0%BC%E6%88%AA%E5%9B%BE.png" alt="服务器价格" title="Markdown"></p><h2 id="2-服务器初始化"><a href="#2-服务器初始化" class="headerlink" title="2.服务器初始化"></a>2.服务器初始化</h2><h3 id="2-1-重装系统"><a href="#2-1-重装系统" class="headerlink" title="2.1 重装系统"></a>2.1 重装系统</h3><p>首先进入控制台，在应用管理的界面找到重装系统，然后我们重装系统为 <strong>宝塔Linux面板  8.0.5 腾讯云专享版</strong> ，用宝塔主打一个方便快捷。<br>然后我们在防火墙处开放8888端口，为了安全起见，可以编辑我们的可访问ip为我们主机的ip地址。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE2.png" alt="ip"></p><h3 id="2-2-装配环境"><a href="#2-2-装配环境" class="headerlink" title="2.2 装配环境"></a>2.2 装配环境</h3><p>然后我们点击登录，在腾讯的命令行界面输入登入宝塔的命令（登录按钮旁边有命令），之后就可以进入宝塔界面了！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE3.png" alt="界面"></p><p>我们在跳出来的基本配置安装弹窗中选择LNNP即可。（下图为安装完之后）<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE4.png" alt="lnmp"></p><p>顺便我们可以在面板设置-&gt;面板账户，面板密码界面把账号和密码修改一下。</p><h2 id="3-部署规划"><a href="#3-部署规划" class="headerlink" title="3.部署规划"></a>3.部署规划</h2><p>可以想一下我们项目需要什么依赖，路径地址是什么。<br>前端：<a href="http://ip/">http://ip</a></p><p>后端：<a href="http://ip/api">http://ip/api</a> 实际运行在8121端口，默认用nginx做转发（避免跨域问题的麻烦）。</p><p>代码沙箱 <a href="http://ip:8090/executeCode">http://ip:8090/executeCode</a> 运行在8080端口。</p><p>nginx：80端口</p><p>数据库：3306端口</p><p>Redis：6379端口</p><p>Java</p><p>Maven</p><h2 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4.安装依赖"></a>4.安装依赖</h2><p>搜索Redis，直接安装7.2.4 stable版本。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE5.png" alt="redis"></p><h3 id="4-1-安装MySQL数据库"><a href="#4-1-安装MySQL数据库" class="headerlink" title="4.1 安装MySQL数据库"></a>4.1 安装MySQL数据库</h3><p>首先得先检查一下我们防火墙的端口，要把3306端口开放一下。</p><p>然后在数据库界面添加一个新的数据库，添加完之后我们可以在IDEA或者Navicat上先连接这个数据库，然后我们再运行SQL文件.从而将数据库的数据导入到这个新建的远程数据库中去。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE6.png" alt="mysql"></p><p>导入完之后就是这样子咯<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE7.png" alt="导入"></p><h3 id="4-2-安装Redis依赖"><a href="#4-2-安装Redis依赖" class="headerlink" title="4.2 安装Redis依赖"></a>4.2 安装Redis依赖</h3><p>我们可以先尝试访问一下Redis，发现是不可以访问的，这是因为我们的Redis没有设置访问权限<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE8.png" alt="访问"></p><p>我们要先在宝塔里面设置一下访问权限的问题。在Redis的设置，性能设置界面，我们先把我们的bind设置为0.0.0.0，让外网可以访问我们的redis，然后设置一下密码。这样我们的本机就可以访问redis了，（后续得修改，不能用0.0.0.0，不然会被入侵）。</p><p>如果还不行的话，可能是防火墙没有打开。</p><h3 id="4-3-Java环境的安装"><a href="#4-3-Java环境的安装" class="headerlink" title="4.3 Java环境的安装"></a>4.3 Java环境的安装</h3><p>我们在宝塔-&gt;网站-&gt;Java项目中添加Java环境，我们选择添加jdk1.8.0<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE9.png" alt="java"></p><p>然后我们在命令行中安装maven，输入以下命令<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE10.png" alt="maven"></p><h2 id="5-部署代码沙箱到服务器上去"><a href="#5-部署代码沙箱到服务器上去" class="headerlink" title="5.部署代码沙箱到服务器上去"></a>5.部署代码沙箱到服务器上去</h2><p>首先我们在IDEA 的maven中执行package命令，将代码沙箱打包成一个jar包。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE11.png" alt="jar"></p><p>打包完成之后我们可以现在本地测试一下，用java -jar 命令运行以下jar包看看可不可以。<br>如果没有问题的话，我们再将jar包上传到宝塔面板中去：<br>点击文件，然后在www&#x2F;wwwroot目录下，我们将jar包拖上去就ok了。</p><p>上传完之后，我们就可以建立一个新的java项目了：<br>点击网站，然后添加Java项目，选择jar包，改端口为8090，然后设置开机自启，点击提交，就ok啦！<br>我们可以通过该页面的设置-&gt;项目日志，来查看项目的日志。由此判断项目是否处于运行状态中。</p><p>怎么判断能不能用呢？我们可以在我们的后端中，调用一下服务器ip+8090的端口，看看项目能否正常运行，可以的话，说明代码沙箱是部署成功的！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE12.png" alt="判断"></p><p>提示一下，如果发现执行不了的话，可能是没有开放8090端口噢！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE13.png" alt="判断"><br>通过就是ok的啦！</p><h2 id="6-部署前端"><a href="#6-部署前端" class="headerlink" title="6.部署前端"></a>6.部署前端</h2><ol><li>修改跨域ip为服务器ip；</li><li>打包前端文件，命令是yarn build，如果遇到问题，可以自行百度一下，一般不会有问题；</li></ol><p>我这里出现的问题是编译报错JavaScript heap out of memory，node内存溢出，Exit status 134。这个的话其实是js文件太大了，导致不能构建出来项目，解决方案就是 打开cmd窗口，然后输入 这条命令 即可。<br><code>setx NODE_OPTIONS --max_old_space_size=4096</code></p><ol start="3"><li>然后我们进入宝塔面板，点击网站，点创建php项目（其实就是前端），然后我们将dist文件导入进去，设置好域名（没有域名的话可以先用ip代替）。这样前端就部署完成了。</li><li>这里可能有个坑，就是输入网址时nginx可能报404的错误，这是因为框架的路由，实际上是没有部署当前这个网址到nginx上的，所以我们得用一条命令转发到index.html上，具体命令我们可以查看这个网址：<a href="https://router.vuejs.org/guide/essentials/history-mode.html#nginx">https://router.vuejs.org/guide/essentials/history-mode.html#nginx</a></li></ol><h2 id="7-部署后端"><a href="#7-部署后端" class="headerlink" title="7.部署后端"></a>7.部署后端</h2><ol><li><p>修改application.properties文件中的MySQL的url、用户名、密码；</p></li><li><p>修改redis的url、密码；</p></li><li><p>执行mvn的package命令，将项目打包成一个jar包；</p></li><li><p>可以先在本地上测试一下jar包，我这里出现了一个bug：<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE14.png" alt="bug"><br>排查之后发现，应该是文心一言的java版本，不能用1.8，得用17及以上的。</p></li><li><p>上传jar包到服务器上；（跟代码沙箱那一步是一样的）</p></li><li><p>这里我遇到了两个坑，我之前在防火墙那里设置了只能我的本机访问Redis和MySQL，然后部署上去我发现后端也访问不了，所以在防火墙那里还要加入服务器的ip允许策略。</p></li><li><p>在前端nginx那里加入以下命令，将api网址下的都转发到8121端口下。</p><p> location &#x2F;api {<br> proxy_pass <a href="http://127.0.0.1:8121/">http://127.0.0.1:8121</a>;<br> proxy_set_header Host $proxy_host;<br> proxy_set_header X-Real-IP $remote_addr;<br> proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br> proxy_buffering off;<br> proxy_set_header Connection “”;<br> }</p></li></ol><h2 id="8-前后端联调测试"><a href="#8-前后端联调测试" class="headerlink" title="8.前后端联调测试"></a>8.前后端联调测试</h2><p>测试一下基本流程，没有问题，舒服了，家人们~<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE15.png" alt="完全体"><br>后续的工作：可以把域名加进去，之前买了个域名，现在可以派上用场了。</p><p>绑定域名的话我打算再出一篇文章，内容包括：如何购买域名，如何在宝塔上绑定域名，如何在DNS服务商处解析DNS域名。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7266374030147076157">https://juejin.cn/post/7266374030147076157</a></p><p><a href="https://blog.csdn.net/Jacksun_huang/article/details/90054923">https://blog.csdn.net/Jacksun_huang/article/details/90054923</a></p>]]></content>
      
      
      <categories>
          
          <category> 搞机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> 后端 </tag>
            
            <tag> OJ系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/09/hello-world/"/>
      <url>/2023/08/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
