<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot-快速开发</title>
      <link href="/2024/12/17/SpringBoot/"/>
      <url>/2024/12/17/SpringBoot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringBoot-快速开发"><a href="#SpringBoot-快速开发" class="headerlink" title="SpringBoot-快速开发"></a>SpringBoot-快速开发</h2><blockquote><p>激动人心的Spring Boot！</p></blockquote><h2 id="1，SpringBoot简介"><a href="#1，SpringBoot简介" class="headerlink" title="1，SpringBoot简介"></a>1，SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D; <code>Spring</code> 应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p><p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p><ol><li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li></ol><img src="../images/2024/12/1217/boot/image-20210911132335452.png" alt="image-20210911132335452" style="zoom:50%;" /><ol start="2"><li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p><p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p></li></ol><img src="../images/2024/12/1217/boot/image-20210911133112602.png" alt="image-20210911133112602" style="zoom:50%;" /><ol start="3"><li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li></ol><img src="../images/2024/12/1217/boot/image-20210911133219847.png" alt="image-20210911133219847" style="zoom:50%;" /><p>​做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p><ol start="4"><li><strong>编写 <code>Controller</code> 类</strong></li></ol><img src="../images/2024/12/1217/boot/image-20210911133532151.png" alt="image-20210911133532151" style="zoom:50%;" /><p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p><h3 id="1-1-SpringBoot快速入门"><a href="#1-1-SpringBoot快速入门" class="headerlink" title="1.1  SpringBoot快速入门"></a>1.1  SpringBoot快速入门</h3><h4 id="1-1-1-开发步骤"><a href="#1-1-1-开发步骤" class="headerlink" title="1.1.1  开发步骤"></a>1.1.1  开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p><ul><li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li><li>选择当前模块需要使用的技术集</li><li>开发控制器类</li><li>运行自动生成的Application类</li></ul><p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p><h5 id="1-1-1-1-创建新模块"><a href="#1-1-1-1-创建新模块" class="headerlink" title="1.1.1.1  创建新模块"></a>1.1.1.1  创建新模块</h5><ul><li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li></ul><img src="../images/2024/12/1217/boot/image-20210911155135008.png" alt="image-20210911155135008" style="zoom:60%;" /><ul><li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p><p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p></li></ul><img src="../images/2024/12/1217/boot/image-20210911155249493.png" alt="image-20210911155249493" style="zoom:60%;" /><ul><li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p><p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p><img src="../images/2024/12/1217/boot/image-20210911155916899.png" alt="image-20210911155916899" style="zoom:67%;" /><blockquote><p>&#x3D;&#x3D;注意：打包方式这里需要设置为 <code>Jar</code>&#x3D;&#x3D;</p></blockquote></li><li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p><p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p></li></ul><img src="../images/2024/12/1217/boot/image-20210911160040328.png" alt="image-20210911160040328" style="zoom:60%;" /><ul><li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li></ul><img src="../images/2024/12/1217/boot/image-20210911160353534.png" alt="image-20210911160353534" style="zoom:70%;" /><p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p><img src="../images/2024/12/1217/boot/image-20210911160541833.png" alt="image-20210911160541833" style="zoom:80%;" /><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ol><li><p>在创建好的工程中不需要创建配置类</p></li><li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p><p>可以删除的目录和文件如下：</p><ul><li><code>.mvn</code></li><li><code>.gitignore</code></li><li><code>HELP.md</code></li><li><code>mvnw</code></li><li><code>mvnw.cmd</code></li></ul></li></ol></blockquote><h5 id="1-1-1-2-创建-Controller"><a href="#1-1-1-2-创建-Controller" class="headerlink" title="1.1.1.2  创建 Controller"></a>1.1.1.2  创建 <code>Controller</code></h5><p>在  <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-1-3-启动服务器"><a href="#1-1-1-3-启动服务器" class="headerlink" title="1.1.1.3  启动服务器"></a>1.1.1.3  启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p><p><img src="/../images/2024/12/1217/boot/image-20210911165642280.png" alt="image-20210911165642280"></p><h5 id="1-1-1-4-进行测试"><a href="#1-1-1-4-进行测试" class="headerlink" title="1.1.1.4  进行测试"></a>1.1.1.4  进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p><p><img src="/../images/2024/12/1217/boot/image-20210911160850121.png" alt="image-20210911160850121"></p><p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p><p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p><p>再看看 <code>pom.xml</code> 配置文件中的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_01_quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDK 的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p><h4 id="1-1-2-对比"><a href="#1-1-2-对比" class="headerlink" title="1.1.2  对比"></a>1.1.2  对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p><img src="../images/2024/12/1217/boot/image-20210911172200292.png" alt="image-20210911172200292" style="zoom:60%;" /><ul><li><p><strong>坐标</strong></p><p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p><p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p></li><li><p><strong>web3.0配置类</strong></p><p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p><p><code>SpringBoot</code> 程序不需要我们自己书写</p></li><li><p><strong>配置类</strong></p><p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code>  程序则不需要书写。</p></li></ul><blockquote><p>&#x3D;&#x3D;注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。&#x3D;&#x3D; </p></blockquote><h4 id="1-1-4-SpringBoot工程快速启动"><a href="#1-1-4-SpringBoot工程快速启动" class="headerlink" title="1.1.4  SpringBoot工程快速启动"></a>1.1.4  SpringBoot工程快速启动</h4><h5 id="1-1-4-1-问题导入"><a href="#1-1-4-1-问题导入" class="headerlink" title="1.1.4.1  问题导入"></a>1.1.4.1  问题导入</h5><img src="../images/2024/12/1217/boot/image-20210911180828611.png" alt="image-20210911180828611" style="zoom:50%;" /><p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p><p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p><img src="../images/2024/12/1217/boot/image-20210911181714437.png" alt="image-20210911181714437" style="zoom:50%;" /><p>那现在问题是如何打包呢？</p><h5 id="1-1-4-2-打包"><a href="#1-1-4-2-打包" class="headerlink" title="1.1.4.2  打包"></a>1.1.4.2  打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p><blockquote><p>&#x3D;&#x3D;注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。&#x3D;&#x3D;</p></blockquote><h5 id="1-1-4-3-启动"><a href="#1-1-4-3-启动" class="headerlink" title="1.1.4.3  启动"></a>1.1.4.3  启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p><img src="../images/2024/12/1217/boot/image-20210911182956629.png" alt="image-20210911182956629" style="zoom:60%;" /><h3 id="1-2-SpringBoot概述"><a href="#1-2-SpringBoot概述" class="headerlink" title="1.2  SpringBoot概述"></a>1.2  SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来&#x3D;&#x3D;简化&#x3D;&#x3D;Spring应用的&#x3D;&#x3D;初始搭建&#x3D;&#x3D;以及&#x3D;&#x3D;开发过程&#x3D;&#x3D;。</p><p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p><p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p><ul><li>配置繁琐</li><li>依赖设置繁琐</li></ul><p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p><ul><li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li><li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li><li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li></ul><p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p><h4 id="1-2-1-起步依赖"><a href="#1-2-1-起步依赖" class="headerlink" title="1.2.1  起步依赖"></a>1.2.1  起步依赖</h4><p>我们使用 <code>Spring Initializr</code>  方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p><img src="../images/2024/12/1217/boot/image-20210918220338109.png" alt="image-20210918220338109" style="zoom:70%;" /><p>这些依赖就是&#x3D;&#x3D;启动依赖&#x3D;&#x3D;，接下来我们探究一下他是如何实现的。</p><h5 id="1-2-1-1-探索父工程"><a href="#1-2-1-1-探索父工程" class="headerlink" title="1.2.1.1  探索父工程"></a>1.2.1.1  探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p><img src="../images/2024/12/1217/boot/image-20210918220855024.png" alt="image-20210918220855024" style="zoom:80%;" /><p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p><img src="../images/2024/12/1217/boot/image-20210918221042947.png" alt="image-20210918221042947" style="zoom:80%;" /><p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code>  和 <code>mysql</code> 的版本如下图</p><img src="../images/2024/12/1217/boot/image-20210918221511249.png" alt="image-20210918221511249" style="zoom:80%;" /><p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p><p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p><img src="../images/2024/12/1217/boot/image-20210918221942453.png" alt="image-20210918221942453" style="zoom:80%;" /><p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p><h5 id="1-2-1-2-探索依赖"><a href="#1-2-1-2-探索依赖" class="headerlink" title="1.2.1.2  探索依赖"></a>1.2.1.2  探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p><img src="../images/2024/12/1217/boot/image-20210918222321402.png" alt="image-20210918222321402" style="zoom:80%;" /><p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p><img src="../images/2024/12/1217/boot/image-20210918222607469.png" alt="image-20210918222607469" style="zoom:80%;" /><p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p><p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p><p>&#x3D;&#x3D;结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可&#x3D;&#x3D;</p><h5 id="1-2-1-3-小结"><a href="#1-2-1-3-小结" class="headerlink" title="1.2.1.3  小结"></a>1.2.1.3  小结</h5><p><strong>starter</strong></p><ul><li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li></ul><p><strong>parent</strong></p><ul><li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p></li><li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p></li></ul><p><strong>实际开发</strong></p><ul><li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p><blockquote><p>G：groupid</p><p>A：artifactId</p><p>V：version</p></blockquote></li><li><p>如发生坐标错误，再指定version（要小心版本冲突）</p></li></ul><h4 id="1-2-2-程序启动"><a href="#1-2-2-程序启动" class="headerlink" title="1.2.2  程序启动"></a>1.2.2  程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01QuickstartApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ul><li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p></li><li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p><p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p></li></ul><h4 id="1-2-3-切换web服务器"><a href="#1-2-3-切换web服务器" class="headerlink" title="1.2.3  切换web服务器"></a>1.2.3  切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p><p><img src="/../images/2024/12/1217/boot/image-20210918232512707.png" alt="image-20210918232512707"></p><p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p><p><img src="/../images/2024/12/1217/boot/image-20210918232904623.png" alt="image-20210918232904623"></p><p><strong>小结：</strong></p><p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p><h2 id="2，配置文件"><a href="#2，配置文件" class="headerlink" title="2，配置文件"></a>2，配置文件</h2><h3 id="2-1-配置文件格式"><a href="#2-1-配置文件格式" class="headerlink" title="2.1  配置文件格式"></a>2.1  配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure><p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/books/1</span><br></pre></td></tr></table></figure><p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p><ul><li><p><code>application.properties</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>&#x3D;&#x3D;注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。&#x3D;&#x3D;</p></blockquote><h4 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1  环境准备"></a>2.1.1  环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p><img src="../images/2024/12/1217/boot/image-20210917151314753.png" alt="image-20210917151314753" style="zoom:80%;" /><p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-不同配置文件演示"><a href="#2-1-2-不同配置文件演示" class="headerlink" title="2.1.2  不同配置文件演示"></a>2.1.2  不同配置文件演示</h4><ul><li><strong>application.properties配置文件</strong></li></ul><p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p><img src="../images/2024/12/1217/boot/image-20210917161422535.png" alt="image-20210917161422535" style="zoom:80%;" /><p><code>application.properties</code> 配置文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p><img src="../images/2024/12/1217/boot/image-20210917161720855.png" alt="image-20210917161720855" style="zoom:80%;" /><ul><li><strong>application.yml配置文件</strong></li></ul><p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;注意： 在<code>:</code>后，数据前一定要加空格。&#x3D;&#x3D;</p></blockquote><p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p><img src="../images/2024/12/1217/boot/image-20210917162512646.png" alt="image-20210917162512646" style="zoom:80%;" /><p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p><p><img src="/../images/2024/12/1217/boot/image-20210917162700711.png" alt="image-20210917162700711"></p><ul><li><strong>application.yaml配置文件</strong></li></ul><p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p><p><code>application.yaml</code> 配置文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">83</span></span><br></pre></td></tr></table></figure><p>启动服务，在控制台可以看到绑定的端口号</p><p><img src="/../images/2024/12/1217/boot/image-20210917163335913.png" alt="image-20210917163335913"></p><p>&#x3D;&#x3D;注意：在配合文件中如果没有提示，可以使用一下方式解决&#x3D;&#x3D;</p><ul><li>点击 <code>File</code> 选中 <code>Project Structure</code></li></ul><img src="../images/2024/12/1217/boot/image-20210917163557071.png" alt="image-20210917163557071" style="zoom:80%;" /><ul><li>弹出如下窗口，按图中标记红框进行选择</li></ul><img src="../images/2024/12/1217/boot/image-20210917163736458.png" alt="image-20210917163736458" style="zoom:70%;" /><ul><li>通过上述操作，会弹出如下窗口</li></ul><img src="../images/2024/12/1217/boot/image-20210917163818051.png" alt="image-20210917163818051" style="zoom:80%;" /><ul><li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li></ul><img src="../images/2024/12/1217/boot/image-20210917163828518.png" alt="image-20210917163828518" style="zoom:80%;" /><ul><li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li></ul><img src="../images/2024/12/1217/boot/image-20210917163846243.png" alt="image-20210917163846243" style="zoom:80%;" /><h4 id="2-1-3-三种配合文件的优先级"><a href="#2-1-3-三种配合文件的优先级" class="headerlink" title="2.1.3  三种配合文件的优先级"></a>2.1.3  三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p><p><code>application.properties</code> 文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p><code>application.yaml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p><p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p><p>从上述的验证结果可以确定三种配置文件的优先级是：</p><p>&#x3D;&#x3D;<code>application.properties</code>  &gt;  <code>application.yml</code>   &gt;  <code>application.yaml</code>&#x3D;&#x3D;</p><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ul><li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p></li><li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p><p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="2-2-yaml格式"><a href="#2-2-yaml格式" class="headerlink" title="2.2  yaml格式"></a>2.2  yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p><p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p><p>最开始我们使用的是 <code>xml</code> ，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">enterprise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>4006184000<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而 <code>properties</code> 类型的配置文件如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise.name</span>=<span class="string">itcast</span></span><br><span class="line"><span class="attr">enterprise.age</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">enterprise.tel</span>=<span class="string">4006184000</span></span><br></pre></td></tr></table></figure><p><code>yaml</code> 类型的配置文件内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"><span class="attr">tel:</span> <span class="number">4006184000</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>容易阅读</p><p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p></li><li><p>容易与脚本语言交互</p></li><li><p>以数据为核心，重数据轻格式</p><p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p></li></ul><p><strong>YAML 文件扩展名：</strong></p><ul><li><code>.yml</code> (主流)</li><li><code>.yaml</code></li></ul><p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p><h4 id="2-2-1-语法规则"><a href="#2-2-1-语法规则" class="headerlink" title="2.2.1  语法规则"></a>2.2.1  语法规则</h4><ul><li><p>大小写敏感</p></li><li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p></li><li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p><p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p></li><li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p></li><li><p># 表示注释</p></li></ul><p>&#x3D;&#x3D;核心规则：数据前面要加空格与冒号隔开&#x3D;&#x3D;</p><p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><h3 id="2-3-yaml配置文件数据读取"><a href="#2-3-yaml配置文件数据读取" class="headerlink" title="2.3  yaml配置文件数据读取"></a>2.3  yaml配置文件数据读取</h3><h4 id="2-3-1-环境准备"><a href="#2-3-1-环境准备" class="headerlink" title="2.3.1  环境准备"></a>2.3.1  环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p><img src="../images/2024/12/1217/boot/image-20210917172736484.png" alt="image-20210917172736484" style="zoom:80%;" /><p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-读取配置数据"><a href="#2-3-2-读取配置数据" class="headerlink" title="2.3.2  读取配置数据"></a>2.3.2  读取配置数据</h4><h5 id="2-3-2-1-使用-Value注解"><a href="#2-3-2-1-使用-Value注解" class="headerlink" title="2.3.2.1  使用 @Value注解"></a>2.3.2.1  使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p><p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code>  注解读取配合文件数据，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lesson;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subject_00;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(lesson);</span><br><span class="line">        System.out.println(port);</span><br><span class="line">        System.out.println(subject_00);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-2-Environment对象"><a href="#2-3-2-2-Environment对象" class="headerlink" title="2.3.2.2  Environment对象"></a>2.3.2.2  Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;lesson&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;注意：这种方式，框架内容大量数据，而在开发中我们很少使用。&#x3D;&#x3D;</p></blockquote><h5 id="2-3-2-3-自定义对象"><a href="#2-3-2-3-自定义对象" class="headerlink" title="2.3.2.3  自定义对象"></a>2.3.2.3  自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p><ul><li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p><p>在类上添加 <code>@Component</code> 注解</p></li><li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p><p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p></li><li><p>在 <code>BookController</code> 中进行注入</p></li></ul><p><strong>具体代码如下：</strong></p><p><code>Enterprise</code> 实体类内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enterprise&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BookController</code> 内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(enterprise.getName());</span><br><span class="line">        System.out.println(enterprise.getAge());</span><br><span class="line">        System.out.println(enterprise.getSubject());</span><br><span class="line">        System.out.println(enterprise.getTel());</span><br><span class="line">        System.out.println(enterprise.getSubject()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><p>使用第三种方式，在实体类上有如下警告提示</p><img src="../images/2024/12/1217/boot/image-20210917180919390.png" alt="image-20210917180919390" style="zoom:70%;" /><p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-多环境配置"><a href="#2-4-多环境配置" class="headerlink" title="2.4  多环境配置"></a>2.4  多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p><img src="../images/2024/12/1217/boot/image-20210917185253557.png" alt="image-20210917185253557" style="zoom:60%;" /><p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p><h4 id="2-4-1-yaml文件"><a href="#2-4-1-yaml文件" class="headerlink" title="2.4.1  yaml文件"></a>2.4.1  yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#给开发环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span> <span class="comment">#给生产环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span> <span class="comment">#给测试环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>  <span class="comment">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure><p>综上所述，<code>application.yml</code> 配置文件内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-properties文件"><a href="#2-4-2-properties文件" class="headerlink" title="2.4.2  properties文件"></a>2.4.2  properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p><ul><li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure></li></ul><p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-命令行启动参数设置"><a href="#2-4-3-命令行启动参数设置" class="headerlink" title="2.4.3  命令行启动参数设置"></a>2.4.3  命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p><p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure><p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure><p>进入上面网站后会看到如下页面</p><p><img src="/../images/2024/12/1217/boot/image-20210917193910191.png" alt="image-20210917193910191"></p><p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p><h3 id="2-5-配置文件分类"><a href="#2-5-配置文件分类" class="headerlink" title="2.5  配置文件分类"></a>2.5  配置文件分类</h3><img src="../images/2024/12/1217/boot/image-20210917194941597.png" alt="image-20210917194941597" style="zoom:70%;" /><p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure><p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p><p><code>SpringBoot</code> 中4级配置文件放置位置：</p><ul><li>1级：classpath：application.yml  </li><li>2级：classpath：config&#x2F;application.yml</li><li>3级：file ：application.yml</li><li>4级：file ：config&#x2F;application.yml</li></ul><blockquote><p>&#x3D;&#x3D;说明：&#x3D;&#x3D;级别越高优先级越高</p></blockquote><h4 id="2-5-1-代码演示"><a href="#2-5-1-代码演示" class="headerlink" title="2.5.1  代码演示"></a>2.5.1  代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p><h5 id="2-5-1-1-环境准备"><a href="#2-5-1-1-环境准备" class="headerlink" title="2.5.1.1  环境准备"></a>2.5.1.1  环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p><img src="../images/2024/12/1217/boot/image-20210917200241282.png" alt="image-20210917200241282" style="zoom:80%;" /><p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h5 id="2-5-1-2-验证1级和2级的优先级"><a href="#2-5-1-2-验证1级和2级的优先级" class="headerlink" title="2.5.1.2  验证1级和2级的优先级"></a>2.5.1.2  验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p><p><img src="/../images/2024/12/1217/boot/image-20210917200805389.png" alt="image-20210917200805389"></p><p>通过这个结果可以得出&#x3D;&#x3D;类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p><h5 id="2-5-1-3-验证2级和4级的优先级"><a href="#2-5-1-3-验证2级和4级的优先级" class="headerlink" title="2.5.1.3  验证2级和4级的优先级"></a>2.5.1.3  验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p><ul><li><p>将工程打成 <code>jar</code> 包</p><p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p><img src="../images/2024/12/1217/boot/image-20210917201243721.png" alt="image-20210917201243721" style="zoom:80%;" /></li><li><p>在硬盘上找到 <code>jar</code> 包所在位置</p><img src="../images/2024/12/1217/boot/image-20210917201523669.png" alt="image-20210917201523669" style="zoom:70%;" /></li><li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code> </p></li><li><p>在命令行使用以下命令运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>运行后日志信息如下</p><p><img src="/../images/2024/12/1217/boot/image-20210917201922831.png" alt="image-20210917201922831"></p><p>通过这个结果可以得出&#x3D;&#x3D;file： <code>config</code> 下的配置文件优先于类路径下的配置文件。&#x3D;&#x3D;</p></li></ul><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p></blockquote><h2 id="3，SpringBoot整合junit"><a href="#3，SpringBoot整合junit" class="headerlink" title="3，SpringBoot整合junit"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p><ul><li>在测试类上添加 <code>SpringBootTest</code> 注解</li><li>使用 <code>@Autowired</code> 注入要测试的资源</li><li>定义测试方法进行测试</li></ul><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1  环境准备"></a>3.1  环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p><img src="../images/2024/12/1217/boot/image-20210917213556673.png" alt="image-20210917213556673" style="zoom:80%;" /><p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service is running ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编写测试类"><a href="#3-2-编写测试类" class="headerlink" title="3.2  编写测试类"></a>3.2  编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;这里的引导类所在包必须是测试类所在包及其子包。</p><p>例如：</p><ul><li>引导类所在包是 <code>com.itheima</code></li><li>测试类所在包是 <code>com.itheima</code></li></ul><p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p></blockquote><h2 id="4，SpringBoot整合mybatis"><a href="#4，SpringBoot整合mybatis" class="headerlink" title="4，SpringBoot整合mybatis"></a>4，SpringBoot整合mybatis</h2><h3 id="4-1-回顾Spring整合Mybatis"><a href="#4-1-回顾Spring整合Mybatis" class="headerlink" title="4.1  回顾Spring整合Mybatis"></a>4.1  回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p><ul><li><p><code>SpringConfig</code> 配置类</p><ul><li><p>导入 <code>JdbcConfig</code> 配置类</p></li><li><p>导入 <code>MybatisConfig</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>JdbcConfig</code> 配置类</p></li><li><p>定义数据源（加载properties配置项：driver、url、username、password）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>MybatisConfig</code> 配置类</p><ul><li><p>定义 <code>SqlSessionFactoryBean</code></p></li><li><p>定义映射配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">getMapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">    ssfb.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-2-SpringBoot整合mybatis"><a href="#4-2-SpringBoot整合mybatis" class="headerlink" title="4.2  SpringBoot整合mybatis"></a>4.2  SpringBoot整合mybatis</h3><h4 id="4-2-1-创建模块"><a href="#4-2-1-创建模块" class="headerlink" title="4.2.1  创建模块"></a>4.2.1  创建模块</h4><ul><li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li></ul><img src="../images/2024/12/1217/boot/image-20210917215913779.png" alt="image-20210917215913779" style="zoom:80%;" /><ul><li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p><img src="../images/2024/12/1217/boot/image-20210917215958091.png" alt="image-20210917215958091" style="zoom:80%;" /></li></ul><h4 id="4-2-2-定义实体类"><a href="#4-2-2-定义实体类" class="headerlink" title="4.2.2  定义实体类"></a>4.2.2  定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and  getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-定义dao接口"><a href="#4-2-3-定义dao接口" class="headerlink" title="4.2.3  定义dao接口"></a>4.2.3  定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-定义测试类"><a href="#4-2-4-定义测试类" class="headerlink" title="4.2.4  定义测试类"></a>4.2.4  定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">System.out.println(book);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-编写配置"><a href="#4-2-5-编写配置" class="headerlink" title="4.2.5  编写配置"></a>4.2.5  编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p><p>在 <code>application.yml</code> 配置文件中配置如下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="4-2-6-测试"><a href="#4-2-6-测试" class="headerlink" title="4.2.6  测试"></a>4.2.6  测试</h4><p>运行测试方法，我们会看到如下错误信息</p><img src="../images/2024/12/1217/boot/image-20210917221427930.png" alt="image-20210917221427930" style="zoom:70%;" /><p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p><p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p></blockquote><h4 id="4-2-7-使用Druid数据源"><a href="#4-2-7-使用Druid数据源" class="headerlink" title="4.2.7  使用Druid数据源"></a>4.2.7  使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p><ul><li><p>导入 <code>Druid</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.yml</code> 配置文件配置</p><p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5，案例"><a href="#5，案例" class="headerlink" title="5，案例"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p><ol><li><p>pom.xml</p><p>配置起步依赖，必要的资源坐标(druid)</p></li><li><p>application.yml</p><p>设置数据源、端口等</p></li><li><p>配置类</p><p>全部删除</p></li><li><p>dao</p><p>设置@Mapper</p></li><li><p>测试类</p></li><li><p>页面</p><p>放置在resources目录下的static目录中</p></li></ol><h3 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1  创建工程"></a>5.1  创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p><img src="../images/2024/12/1217/boot/image-20210917225019868.png" alt="image-20210917225019868" style="zoom:80%;" /><p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-代码拷贝"><a href="#5-2-代码拷贝" class="headerlink" title="5.2  代码拷贝"></a>5.2  代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p><img src="../images/2024/12/1217/boot/image-20210917225715519.png" alt="image-20210917225715519" style="zoom:70%;" /><p>需要修改的内容如下：</p><ul><li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p></li><li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p></li><li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-配置文件"><a href="#5-3-配置文件" class="headerlink" title="5.3  配置文件"></a>5.3  配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p><ul><li>服务的端口号</li><li>连接数据库的信息</li><li>数据源</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="5-4-静态资源"><a href="#5-4-静态资源" class="headerlink" title="5.4  静态资源"></a>5.4  静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p><p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p><img src="../images/2024/12/1217/boot/image-20210917230702072.png" alt="image-20210917230702072" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC2-SSM整合 和 interceptor拦截器</title>
      <link href="/2024/12/17/SpringMVC_day02/"/>
      <url>/2024/12/17/SpringMVC_day02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringMVC2-SSM整合-和-interceptor拦截器"><a href="#SpringMVC2-SSM整合-和-interceptor拦截器" class="headerlink" title="SpringMVC2-SSM整合 和 interceptor拦截器"></a>SpringMVC2-SSM整合 和 interceptor拦截器</h2><h2 id="1，SSM整合"><a href="#1，SSM整合" class="headerlink" title="1，SSM整合"></a>1，SSM整合</h2><p>前面我们已经把<code>Mybatis</code>、<code>Spring</code>和<code>SpringMVC</code>三个框架进行了学习，今天主要的内容就是把这三个框架整合在一起完成我们的业务功能开发，具体如何来整合，我们一步步来学习。</p><h3 id="1-1-流程分析"><a href="#1-1-流程分析" class="headerlink" title="1.1 流程分析"></a>1.1 流程分析</h3><p>(1) 创建工程</p><ul><li>创建一个Maven的web工程</li><li>pom.xml添加SSM需要的依赖jar包</li><li>编写Web项目的入口配置类，实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>重写以下方法<ul><li>getRootConfigClasses()：返回Spring的配置类-&gt;需要&#x3D;&#x3D;SpringConfig&#x3D;&#x3D;配置类</li><li>getServletConfigClasses() ：返回SpringMVC的配置类-&gt;需要&#x3D;&#x3D;SpringMvcConfig&#x3D;&#x3D;配置类</li><li>getServletMappings()      : 设置SpringMVC请求拦截路径规则</li><li>getServletFilters()       ：设置过滤器，解决POST请求中文乱码问题</li></ul></li></ul><p>(2)SSM整合[&#x3D;&#x3D;重点是各个配置的编写&#x3D;&#x3D;]</p><ul><li>SpringConfig<ul><li>标识该类为配置类 @Configuration</li><li>扫描Service所在的包 @ComponentScan</li><li>在Service层要管理事务 @EnableTransactionManagement</li><li>读取外部的properties配置文件 @PropertySource</li><li>整合Mybatis需要引入Mybatis相关配置类 @Import<ul><li>第三方数据源配置类 JdbcConfig<ul><li>构建DataSource数据源，DruidDataSouroce,需要注入数据库连接四要素， @Bean @Value</li><li>构建平台事务管理器，DataSourceTransactionManager,@Bean</li></ul></li><li>Mybatis配置类 MybatisConfig<ul><li>构建SqlSessionFactoryBean并设置别名扫描与数据源，@Bean</li><li>构建MapperScannerConfigurer并设置DAO层的包扫描</li></ul></li></ul></li></ul></li><li>SpringMvcConfig<ul><li>标识该类为配置类 @Configuration</li><li>扫描Controller所在的包 @ComponentScan</li><li>开启SpringMVC注解支持 @EnableWebMvc</li></ul></li></ul><p>(3)功能模块[与具体的业务模块有关]</p><ul><li>创建数据库表</li><li>根据数据库表创建对应的模型类</li><li>通过Dao层完成数据库表的增删改查(接口+自动代理)</li><li>编写Service层[Service接口+实现类]<ul><li>@Service</li><li>@Transactional</li><li>整合Junit对业务层进行单元测试<ul><li>@RunWith</li><li>@ContextConfiguration</li><li>@Test</li></ul></li></ul></li><li>编写Controller层<ul><li>接收请求 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping</li><li>接收数据 简单、POJO、嵌套POJO、集合、数组、JSON数据类型<ul><li>@RequestParam</li><li>@PathVariable</li><li>@RequestBody</li></ul></li><li>转发业务层 <ul><li>@Autowired</li></ul></li><li>响应结果<ul><li>@ResponseBody</li></ul></li></ul></li></ul><h3 id="1-2-整合配置"><a href="#1-2-整合配置" class="headerlink" title="1.2 整合配置"></a>1.2 整合配置</h3><p>掌握上述的知识点后，接下来，我们就可以按照上述的步骤一步步的来完成SSM的整合。</p><h4 id="步骤1：创建Maven的web项目"><a href="#步骤1：创建Maven的web项目" class="headerlink" title="步骤1：创建Maven的web项目"></a>步骤1：创建Maven的web项目</h4><p>可以使用Maven的骨架创建</p><p><img src="/../images/2024/12/1217/mvc2/1630561266760.png" alt="1630561266760"></p><h4 id="步骤2-添加依赖"><a href="#步骤2-添加依赖" class="headerlink" title="步骤2:添加依赖"></a>步骤2:添加依赖</h4><p>pom.xml添加SSM所需要的依赖jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_08_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3-创建项目包结构"><a href="#步骤3-创建项目包结构" class="headerlink" title="步骤3:创建项目包结构"></a>步骤3:创建项目包结构</h4><p><img src="/../images/2024/12/1217/mvc2/1630561591931.png" alt="1630561591931"></p><ul><li>config目录存放的是相关的配置类</li><li>controller编写的是Controller类</li><li>dao存放的是Dao接口，因为使用的是Mapper接口代理方式，所以没有实现类包</li><li>service存的是Service接口，impl存放的是Service实现类</li><li>resources:存入的是配置文件，如Jdbc.properties</li><li>webapp:目录可以存放静态资源</li><li>test&#x2F;java:存放的是测试类</li></ul><h4 id="步骤4-创建SpringConfig配置类"><a href="#步骤4-创建SpringConfig配置类" class="headerlink" title="步骤4:创建SpringConfig配置类"></a>步骤4:创建SpringConfig配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5-创建JdbcConfig配置类"><a href="#步骤5-创建JdbcConfig配置类" class="headerlink" title="步骤5:创建JdbcConfig配置类"></a>步骤5:创建JdbcConfig配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤6-创建MybatisConfig配置类"><a href="#步骤6-创建MybatisConfig配置类" class="headerlink" title="步骤6:创建MybatisConfig配置类"></a>步骤6:创建MybatisConfig配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-创建jdbc-properties"><a href="#步骤7-创建jdbc-properties" class="headerlink" title="步骤7:创建jdbc.properties"></a>步骤7:创建jdbc.properties</h4><p>在resources下提供jdbc.properties,设置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="步骤8-创建SpringMVC配置类"><a href="#步骤8-创建SpringMVC配置类" class="headerlink" title="步骤8:创建SpringMVC配置类"></a>步骤8:创建SpringMVC配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤9-创建Web项目入口配置类"><a href="#步骤9-创建Web项目入口配置类" class="headerlink" title="步骤9:创建Web项目入口配置类"></a>步骤9:创建Web项目入口配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载SpringMVC配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置SpringMVC请求地址拦截规则</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置post请求中文乱码过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此SSM整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢?</p><h3 id="1-3-功能模块开发"><a href="#1-3-功能模块开发" class="headerlink" title="1.3 功能模块开发"></a>1.3 功能模块开发</h3><blockquote><p>需求:对表tbl_book进行新增、修改、删除、根据ID查询和查询所有</p></blockquote><h4 id="步骤1-创建数据库及表"><a href="#步骤1-创建数据库及表" class="headerlink" title="步骤1:创建数据库及表"></a>步骤1:创建数据库及表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use ssm_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_book(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  type <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tbl_book`(`id`,`type`,`name`,`description`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第五版&#x27;</span>,<span class="string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实践&#x27;</span>,<span class="string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码刨析Spring源码中蕴含的10大设计模式&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring MVC+Mybatis开发从入门到项目实战&#x27;</span>,<span class="string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>,<span class="string">&#x27;源码级刨析Spring框架，适合已掌握Java基础的读者&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java核心技术 卷Ⅰ 基础知识(原书第11版)&#x27;</span>,<span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="string">&#x27;5个纬度全面刨析JVM,大厂面试知识点全覆盖&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java编程思想(第4版)&#x27;</span>,<span class="string">&#x27;Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;零基础学Java(全彩版)&#x27;</span>,<span class="string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳奇、薇娅成长为网红的秘密都在书中&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="步骤2-编写模型类"><a href="#步骤2-编写模型类" class="headerlink" title="步骤2:编写模型类"></a>步骤2:编写模型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-编写Dao接口"><a href="#步骤3-编写Dao接口" class="headerlink" title="步骤3:编写Dao接口"></a>步骤3:编写Dao接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4-编写Service接口和实现类"><a href="#步骤4-编写Service接口和实现类" class="headerlink" title="步骤4:编写Service接口和实现类"></a>步骤4:编写Service接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>bookDao在Service中注入的会提示一个红线提示，为什么呢?</p><ul><li>BookDao是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li><li>代理对象是由Spring的IOC容器来创建管理的</li><li>IOC容器又是在Web服务器启动的时候才会创建</li><li>IDEA在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li><li>但是程序运行的时候，代理对象就会被创建，框架会使用DI进行注入，所以程序运行无影响。</li></ul></li><li><p>如何解决上述问题?</p><ul><li><p>可以不用理会，因为运行是正常的</p></li><li><p>设置错误提示级别</p><p><img src="/../images/2024/12/1217/mvc2/1630600227357.png"></p></li></ul></li></ul><h4 id="步骤5-编写Contorller类"><a href="#步骤5-编写Contorller类" class="headerlink" title="步骤5:编写Contorller类"></a>步骤5:编写Contorller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于图书模块的增删改查就已经完成了编写，我们可以从后往前写也可以从前往后写，最终只需要能把功能实现即可。</p><p>接下来我们就先把业务层的代码使用<code>Spring整合Junit</code>的知识点进行单元测试:</p><h3 id="1-4-单元测试"><a href="#1-4-单元测试" class="headerlink" title="1.4 单元测试"></a>1.4 单元测试</h3><h4 id="步骤1-新建测试类"><a href="#步骤1-新建测试类" class="headerlink" title="步骤1:新建测试类"></a>步骤1:新建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2-注入Service类"><a href="#步骤2-注入Service类" class="headerlink" title="步骤2:注入Service类"></a>步骤2:注入Service类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-编写测试方法"><a href="#步骤3-编写测试方法" class="headerlink" title="步骤3:编写测试方法"></a>步骤3:编写测试方法</h4><p>我们先来对查询进行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据ID查询，测试的结果为:</p><p><img src="/../images/2024/12/1217/mvc2/1630600844191.png" alt="1630600844191"></p><p>查询所有，测试的结果为:</p><p><img src="/../images/2024/12/1217/mvc2/1630600927486.png" alt="1630600927486"></p><h2 id="2，统一结果封装"><a href="#2，统一结果封装" class="headerlink" title="2，统一结果封装"></a>2，统一结果封装</h2><h3 id="2-1-表现层与前端数据传输协议定义"><a href="#2-1-表现层与前端数据传输协议定义" class="headerlink" title="2.1 表现层与前端数据传输协议定义"></a>2.1 表现层与前端数据传输协议定义</h3><p>SSM整合以及功能模块开发完成后，接下来，我们在上述案例的基础上分析下有哪些问题需要我们去解决下。首先第一个问题是:</p><ul><li><p>在Controller层增删改返回给前端的是boolean类型数据</p><p><img src="/../images/2024/12/1217/mvc2/1630653359533.png" alt="1630653359533"></p></li><li><p>在Controller层查询单个返回给前端的是对象</p><p><img src="/../images/2024/12/1217/mvc2/1630653385377.png" alt="1630653385377"></p></li><li><p>在Controller层查询所有返回给前端的是集合对象</p><p><img src="/../images/2024/12/1217/mvc2/1630653468887.png" alt="1630653468887"></p></li></ul><p>目前我们就已经有三种数据类型返回给前端，如果随着业务的增长，我们需要返回的数据类型会越来越多。对于前端开发人员在解析数据的时候就比较凌乱了，所以对于前端来说，如果后台能够返回一个统一的数据结果，前端在解析的时候就可以按照一种方式进行解析。开发就会变得更加简单。</p><p>所以我们就想能不能将返回结果的数据进行统一，具体如何来做，大体的思路为:</p><ul><li>为了封装返回的结果数据:&#x3D;&#x3D;创建结果模型类，封装数据到data属性中&#x3D;&#x3D;</li><li>为了封装返回的数据是何种操作及是否操作成功:&#x3D;&#x3D;封装操作结果到code属性中&#x3D;&#x3D;</li><li>操作失败后为了封装返回的错误信息:&#x3D;&#x3D;封装特殊消息到message(msg)属性中&#x3D;&#x3D;</li></ul><p><img src="/../images/2024/12/1217/mvc2/1630654293972.png" alt="1630654293972"></p><p>根据分析，我们可以设置统一数据返回结果类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**Result类名及类中的字段并不是固定的，可以根据需要自行增减提供若干个构造方法，方便操作。</p><h2 id="3，统一异常处理"><a href="#3，统一异常处理" class="headerlink" title="3，统一异常处理"></a>3，统一异常处理</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>在讲解这一部分知识点之前，我们先来演示个效果，修改BookController类的<code>getById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//手动添加一个错误信息</span></span><br><span class="line">    <span class="keyword">if</span>(id==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动运行项目，使用PostMan发送请求，当传入的id为1，则会出现如下效果：</p><p><img src="/../images/2024/12/1217/mvc2/1630656982337.png" alt="1630656982337"></p><p>前端接收到这个信息后和之前我们约定的格式不一致，这个问题该如何解决?</p><p>在解决问题之前，我们先来看下异常的种类及出现异常的原因:</p><ul><li>框架内部抛出的异常：因使用不合规导致</li><li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li><li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</li><li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li><li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</li></ul><p>看完上面这些出现异常的位置，你会发现，在我们开发的任何一个位置都有可能出现异常，而且这些异常是不能避免的。所以我们就得将异常进行处理。</p><p><strong>思考</strong></p><ol><li><p>各个层级均出现异常，异常处理代码书写在哪一层?</p><p>&#x3D;&#x3D;所有的异常均抛出到表现层进行处理&#x3D;&#x3D;</p></li><li><p>异常的种类很多，表现层如何将所有的异常都处理到呢?</p><p>&#x3D;&#x3D;异常分类&#x3D;&#x3D;</p></li><li><p>表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决?</p><p>&#x3D;&#x3D;AOP&#x3D;&#x3D;</p></li></ol><p>对于上面这些问题及解决方案，SpringMVC已经为我们提供了一套解决方案:</p><ul><li><p>异常处理器:</p><ul><li><p>集中的、统一的处理项目中出现的异常。</p><p><img src="/../images/2024/12/1217/mvc2/1630657791653.png" alt="1630657791653"></p></li></ul></li></ul><h3 id="3-2-异常处理器的使用"><a href="#3-2-异常处理器的使用" class="headerlink" title="3.2 异常处理器的使用"></a>3.2 异常处理器的使用</h3><h4 id="3-2-1-环境准备"><a href="#3-2-1-环境准备" class="headerlink" title="3.2.1 环境准备"></a>3.2.1 环境准备</h4><ul><li>创建一个Web的Maven项目</li><li>pom.xml添加SSM整合所需jar包</li><li>创建对应的配置类</li><li>编写Controller、Service接口、Service实现类、Dao接口和模型类</li><li>resources下提供jdbc.properties配置文件</li></ul><p>内容参考前面的项目或者直接使用前面的项目进行本节内容的学习。</p><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc2/1630657972564.png" alt="1630657972564"></p><h4 id="3-2-2-使用步骤"><a href="#3-2-2-使用步骤" class="headerlink" title="3.2.2 使用步骤"></a>3.2.2 使用步骤</h4><h5 id="步骤1-创建异常处理器类"><a href="#步骤1-创建异常处理器类" class="headerlink" title="步骤1:创建异常处理器类"></a>步骤1:创建异常处理器类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;确保SpringMvcConfig能够扫描到异常处理器类&#x3D;&#x3D;</p><h5 id="步骤2-让程序抛出异常"><a href="#步骤2-让程序抛出异常" class="headerlink" title="步骤2:让程序抛出异常"></a>步骤2:让程序抛出异常</h5><p>修改<code>BookController</code>的getById方法，添加<code>int i = 1/0</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序，测试"><a href="#步骤3-运行程序，测试" class="headerlink" title="步骤3:运行程序，测试"></a>步骤3:运行程序，测试</h5><p><img src="/../images/2024/12/1217/mvc2/1630658350945.png" alt="1630658350945"></p><p>说明异常已经被拦截并执行了<code>doException</code>方法。</p><h5 id="异常处理器类返回结果给前端"><a href="#异常处理器类返回结果给前端" class="headerlink" title="异常处理器类返回结果给前端"></a>异常处理器类返回结果给前端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>,<span class="literal">null</span>,<span class="string">&quot;嘿嘿,异常你哪里跑！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动运行程序，测试</p><p><img src="/../images/2024/12/1217/mvc2/1630658606549.png" alt="1630658606549"></p><p>至此，就算后台执行的过程中抛出异常，最终也能按照我们和前端约定好的格式返回给前端。</p><h4 id="知识点1：-RestControllerAdvice"><a href="#知识点1：-RestControllerAdvice" class="headerlink" title="知识点1：@RestControllerAdvice"></a>知识点1：@RestControllerAdvice</h4><table><thead><tr><th>名称</th><th>@RestControllerAdvice</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>Rest风格开发的控制器增强类定义上方</td></tr><tr><td>作用</td><td>为Rest风格开发的控制器类做增强</td></tr></tbody></table><p>**说明:**此注解自带@ResponseBody注解与@Component注解，具备对应的功能</p><p><img src="/../images/2024/12/1217/mvc2/1630659060451.png" alt="1630659060451"></p><h4 id="知识点2：-ExceptionHandler"><a href="#知识点2：-ExceptionHandler" class="headerlink" title="知识点2：@ExceptionHandler"></a>知识点2：@ExceptionHandler</h4><table><thead><tr><th>名称</th><th>@ExceptionHandler</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>专用于异常处理的控制器方法上方</td></tr><tr><td>作用</td><td>设置指定异常的处理方案，功能等同于控制器方法，<br/>出现异常后终止原始控制器执行,并转入当前方法执行</td></tr></tbody></table><p><strong>说明：</strong>此类方法可以根据处理的异常不同，制作多个方法分别处理对应的异常</p><h3 id="3-3-项目异常处理方案"><a href="#3-3-项目异常处理方案" class="headerlink" title="3.3 项目异常处理方案"></a>3.3 项目异常处理方案</h3><h4 id="3-3-1-异常分类"><a href="#3-3-1-异常分类" class="headerlink" title="3.3.1 异常分类"></a>3.3.1 异常分类</h4><p>异常处理器我们已经能够使用了，那么在咱们的项目中该如何来处理异常呢?</p><p>因为异常的种类有很多，如果每一个异常都对应一个@ExceptionHandler，那得写多少个方法来处理各自的异常，所以我们在处理异常之前，需要对异常进行一个分类:</p><ul><li><p>业务异常（BusinessException）</p><ul><li><p>规范的用户行为产生的异常</p><ul><li><p>用户在页面输入内容的时候未按照指定格式进行数据填写，如在年龄框输入的是字符串</p><p><img src="/../images/2024/12/1217/mvc2/1630659599983.png" alt="1630659599983"></p></li></ul></li><li><p>不规范的用户行为操作产生的异常</p><ul><li><p>如用户故意传递错误数据</p><p><img src="/../images/2024/12/1217/mvc2/1630659622958.png" alt="1630659622958"></p></li></ul></li></ul></li><li><p>系统异常（SystemException）</p><ul><li>项目运行过程中可预计但无法避免的异常<ul><li>比如数据库或服务器宕机</li></ul></li></ul></li><li><p>其他异常（Exception）</p><ul><li><p>编程人员未预期到的异常，如:用到的文件不存在</p><p><img src="/../images/2024/12/1217/mvc2/1630659690341.png" alt="1630659690341"></p></li></ul></li></ul><p>将异常分类以后，针对不同类型的异常，要提供具体的解决方案:</p><h4 id="3-3-2-异常解决方案"><a href="#3-3-2-异常解决方案" class="headerlink" title="3.3.2 异常解决方案"></a>3.3.2 异常解决方案</h4><ul><li>业务异常（BusinessException）<ul><li>发送对应消息传递给用户，提醒规范操作<ul><li>大家常见的就是提示用户名已存在或密码格式不正确等</li></ul></li></ul></li><li>系统异常（SystemException）<ul><li>发送固定消息传递给用户，安抚用户<ul><li>系统繁忙，请稍后再试</li><li>系统正在维护升级，请稍后再试</li><li>系统出问题，请联系系统管理员等</li></ul></li><li>发送特定消息给运维人员，提醒维护<ul><li>可以发送短信、邮箱或者是公司内部通信软件</li></ul></li><li>记录日志<ul><li>发消息和记录日志对用户来说是不可见的，属于后台程序</li></ul></li></ul></li><li>其他异常（Exception）<ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给编程人员，提醒维护（纳入预期范围内）<ul><li>一般是程序没有考虑全，比如未做非空校验等</li></ul></li><li>记录日志</li></ul></li></ul><h4 id="3-3-3-异常解决方案的具体实现"><a href="#3-3-3-异常解决方案的具体实现" class="headerlink" title="3.3.3 异常解决方案的具体实现"></a>3.3.3 异常解决方案的具体实现</h4><blockquote><p>思路:</p><p>1.先通过自定义异常，完成BusinessException和SystemException的定义</p><p>2.将其他异常包装成自定义异常类型</p><p>3.在异常处理器类中对不同的异常进行处理</p></blockquote><h5 id="步骤1-自定义异常类"><a href="#步骤1-自定义异常类" class="headerlink" title="步骤1:自定义异常类"></a>步骤1:自定义异常类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>让自定义异常类继承<code>RuntimeException</code>的好处是，后期在抛出这两个异常的时候，就不用在try…catch…或throws了</li><li>自定义异常类中添加<code>code</code>属性的原因是为了更好的区分异常是来自哪个业务的</li></ul><h5 id="步骤2-将其他异常包成自定义异常"><a href="#步骤2-将其他异常包成自定义异常" class="headerlink" title="步骤2:将其他异常包成自定义异常"></a>步骤2:将其他异常包成自定义异常</h5><p>假如在BookServiceImpl的getById方法抛异常了，该如何来包装呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//模拟业务异常，包装成自定义异常</span></span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟系统异常，将可能出现的异常进行包装，转换成自定义异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(Code.SYSTEM_TIMEOUT_ERR,<span class="string">&quot;服务器访问超时，请重试!&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的包装方式有：</p><ul><li>方式一:<code>try&#123;&#125;catch()&#123;&#125;</code>在catch中重新throw我们自定义异常即可。</li><li>方式二:直接throw自定义异常即可</li></ul><p>上面为了使<code>code</code>看着更专业些，我们在Code类中再新增需要的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_ERR</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_TIMEOUT_ERR</span> <span class="operator">=</span> <span class="number">50002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_UNKNOW_ERR</span> <span class="operator">=</span> <span class="number">59999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BUSINESS_ERR</span> <span class="operator">=</span> <span class="number">60002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3-处理器类中处理自定义异常"><a href="#步骤3-处理器类中处理自定义异常" class="headerlink" title="步骤3:处理器类中处理自定义异常"></a>步骤3:处理器类中处理自定义异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestControllerAdvice用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>根据ID查询，</p><p>如果传入的参数为1，会报<code>BusinessException</code></p><p><img src="/../images/2024/12/1217/mvc2/1630661162758.png" alt="1630661162758"></p><p>如果传入的是其他参数，会报<code>SystemException</code></p><p><img src="/../images/2024/12/1217/mvc2/1630661192383.png" alt="1630661192383"></p><p>对于异常我们就已经处理完成了，不管后台哪一层抛出异常，都会以我们与前端约定好的方式进行返回，前端只需要把信息获取到，根据返回的正确与否来展示不同的内容即可。</p><p><strong>小结</strong></p><p>以后项目中的异常处理方式为:</p><p><img src="/../images/2024/12/1217/mvc2/1630658821746.png" alt="1630658821746"></p><h2 id="5，拦截器"><a href="#5，拦截器" class="headerlink" title="5，拦截器"></a>5，拦截器</h2><p>对于拦截器这节的知识，我们需要学习如下内容:</p><ul><li>拦截器概念</li><li>入门案例</li><li>拦截器参数</li><li>拦截器工作流程分析</li></ul><h3 id="5-1-拦截器概念"><a href="#5-1-拦截器概念" class="headerlink" title="5.1 拦截器概念"></a>5.1 拦截器概念</h3><p>讲解拦截器的概念之前，我们先看一张图:</p><p><img src="/../images/2024/12/1217/mvc2/1630676280170.png" alt="1630676280170"></p><p>(1)浏览器发送一个请求会先到Tomcat的web服务器</p><p>(2)Tomcat服务器接收到请求以后，会去判断请求的是静态资源还是动态资源</p><p>(3)如果是静态资源，会直接到Tomcat的项目部署目录下去直接访问</p><p>(4)如果是动态资源，就需要交给项目的后台代码进行处理</p><p>(5)在找到具体的方法之前，我们可以去配置过滤器(可以配置多个)，按照顺序进行执行</p><p>(6)然后进入到到中央处理器(SpringMVC中的内容)，SpringMVC会根据配置的规则进行拦截</p><p>(7)如果满足规则，则进行处理，找到其对应的controller类中的方法进行执行,完成后返回结果</p><p>(8)如果不满足规则，则不进行处理</p><p>(9)这个时候，如果我们需要在每个Controller方法执行的前后添加业务，具体该如何来实现?</p><p>这个就是拦截器要做的事。</p><ul><li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li><li>作用:<ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行</li><li>总结：拦截器就是用来做增强</li></ul></li></ul><p>看完以后，大家会发现</p><ul><li>拦截器和过滤器在作用和执行顺序上也很相似</li></ul><p>所以这个时候，就有一个问题需要思考:拦截器和过滤器之间的区别是什么?</p><ul><li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li><li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li></ul><p><img src="/../images/2024/12/1217/mvc2/1630676903190.png" alt="1630676903190"></p><h3 id="5-2-拦截器入门案例"><a href="#5-2-拦截器入门案例" class="headerlink" title="5.2 拦截器入门案例"></a>5.2 拦截器入门案例</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1 环境准备"></a>5.2.1 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加SSM整合所需jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_12_interceptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建模型类Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;书名=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, 价格=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc2/1630677370998.png" alt="1630677370998"></p><h4 id="5-2-2-拦截器开发"><a href="#5-2-2-拦截器开发" class="headerlink" title="5.2.2 拦截器开发"></a>5.2.2 拦截器开发</h4><h5 id="步骤1-创建拦截器类"><a href="#步骤1-创建拦截器类" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>让类实现HandlerInterceptor接口，重写接口中的三个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**拦截器类要被SpringMVC容器扫描到。</p><h5 id="步骤2-配置拦截器类"><a href="#步骤2-配置拦截器类" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-SpringMVC添加SpringMvcSupport包扫描"><a href="#步骤3-SpringMVC添加SpringMvcSupport包扫描" class="headerlink" title="步骤3:SpringMVC添加SpringMvcSupport包扫描"></a>步骤3:SpringMVC添加SpringMvcSupport包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-运行程序测试"><a href="#步骤4-运行程序测试" class="headerlink" title="步骤4:运行程序测试"></a>步骤4:运行程序测试</h5><p>使用PostMan发送<code>http://localhost/books</code></p><p><img src="/../images/2024/12/1217/mvc2/1630678114224.png" alt="1630678114224"></p><p>如果发送<code>http://localhost/books/100</code>会发现拦截器没有被执行，原因是拦截器的<code>addPathPatterns</code>方法配置的拦截路径是<code>/books</code>,我们现在发送的是<code>/books/100</code>，所以没有匹配上，因此没有拦截，拦截器就不会执行。</p><h5 id="步骤5-修改拦截器拦截规则"><a href="#步骤5-修改拦截器拦截规则" class="headerlink" title="步骤5:修改拦截器拦截规则"></a>步骤5:修改拦截器拦截规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，如果再次访问<code>http://localhost/books/100</code>，拦截器就会被执行。</p><p>最后说一件事，就是拦截器中的<code>preHandler</code>方法，如果返回true,则代表放行，会执行原始Controller类中要请求的方法，如果返回false，则代表拦截，后面的就不会再执行了。</p><h5 id="步骤6-简化SpringMvcSupport的编写"><a href="#步骤6-简化SpringMvcSupport的编写" class="headerlink" title="步骤6:简化SpringMvcSupport的编写"></a>步骤6:简化SpringMvcSupport的编写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此后咱们就不用再写<code>SpringMvcSupport</code>类了。</p><p>最后我们来看下拦截器的执行流程:</p><p><img src="/../images/2024/12/1217/mvc2/1630679464294.png" alt="1630679464294"></p><p>当有拦截器后，请求会先进入preHandle方法，</p><p>​如果方法返回true，则放行继续执行后面的handle[controller的方法]和后面的方法</p><p>​如果返回false，则直接跳过后面方法的执行。</p><h3 id="5-3-拦截器参数"><a href="#5-3-拦截器参数" class="headerlink" title="5.3 拦截器参数"></a>5.3 拦截器参数</h3><h4 id="5-3-1-前置处理方法"><a href="#5-3-1-前置处理方法" class="headerlink" title="5.3.1 前置处理方法"></a>5.3.1 前置处理方法</h4><p>原始方法之前运行preHandle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                         HttpServletResponse response,</span></span><br><span class="line"><span class="params">                         Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>request:请求对象</li><li>response:响应对象</li><li>handler:被调用的处理器对象，本质上是一个方法对象，对反射中的Method对象进行了再包装</li></ul><p>使用request对象可以获取请求数据中的内容，如获取请求头的<code>Content-Type</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用handler参数，可以获取方法的相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> hm.getMethod().getName();<span class="comment">//可以获取方法的名称</span></span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+methodName);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-后置处理方法"><a href="#5-3-2-后置处理方法" class="headerlink" title="5.3.2 后置处理方法"></a>5.3.2 后置处理方法</h4><p>原始方法运行后运行，如果原始方法被拦截，则不执行  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       Object handler,</span></span><br><span class="line"><span class="params">                       ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前三个参数和上面的是一致的。</p><p>modelAndView:如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行调整</p><p>因为咱们现在都是返回json数据，所以该参数的使用率不高。</p><h4 id="5-3-3-完成处理方法"><a href="#5-3-3-完成处理方法" class="headerlink" title="5.3.3 完成处理方法"></a>5.3.3 完成处理方法</h4><p>拦截器最后执行的方法，无论原始方法是否执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            Object handler,</span></span><br><span class="line"><span class="params">                            Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前三个参数与上面的是一致的。</p><p>ex:如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理  </p><p>因为我们现在已经有全局异常处理器类，所以该参数的使用率也不高。</p><p>这三个方法中，最常用的是&#x3D;&#x3D;preHandle&#x3D;&#x3D;,在这个方法中可以通过返回值来决定是否要进行放行，我们可以把业务逻辑放在该方法中，如果满足业务则返回true放行，不满足则返回false拦截。</p><h3 id="5-4-拦截器链配置"><a href="#5-4-拦截器链配置" class="headerlink" title="5.4 拦截器链配置"></a>5.4 拦截器链配置</h3><p>目前，我们在项目中只添加了一个拦截器，如果有多个，该如何配置?配置多个后，执行顺序是什么?</p><h4 id="5-4-1-配置多个拦截器"><a href="#5-4-1-配置多个拦截器" class="headerlink" title="5.4.1 配置多个拦截器"></a>5.4.1 配置多个拦截器</h4><h5 id="步骤1-创建拦截器类-1"><a href="#步骤1-创建拦截器类-1" class="headerlink" title="步骤1:创建拦截器类"></a>步骤1:创建拦截器类</h5><p>实现接口，并重写接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-配置拦截器类-1"><a href="#步骤2-配置拦截器类-1" class="headerlink" title="步骤2:配置拦截器类"></a>步骤2:配置拦截器类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor2 projectInterceptor2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">        registry.addInterceptor(projectInterceptor2).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤3:运行程序，观察顺序</p><p><img src="/../images/2024/12/1217/mvc2/1630680435269.png" alt="1630680435269"></p><p>拦截器执行的顺序是和配置顺序有关。就和前面所提到的运维人员进入机房的案例，先进后出。</p><ul><li>当配置多个拦截器时，形成拦截器链</li><li>拦截器链的运行顺序参照拦截器添加顺序为准</li><li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li><li>当拦截器运行中断，仅运行配置在前面的拦截器的afterCompletion操作</li></ul><p><img src="/../images/2024/12/1217/mvc2/1630680579735.png" alt="1630680579735"></p><p>preHandle：与配置顺序相同，必定运行</p><p>postHandle:与配置顺序相反，可能不运行</p><p>afterCompletion:与配置顺序相反，可能不运行。</p><p>这个顺序不太好记，最终只需要把握住一个原则即可:&#x3D;&#x3D;以最终的运行结果为准&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC1-从Servlet到SpringMVC</title>
      <link href="/2024/12/17/SpringMVC_day01/"/>
      <url>/2024/12/17/SpringMVC_day01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringMVC1-从Servlet到SpringMVC"><a href="#SpringMVC1-从Servlet到SpringMVC" class="headerlink" title="SpringMVC1-从Servlet到SpringMVC"></a>SpringMVC1-从Servlet到SpringMVC</h2><blockquote><p>之前上铁哥的课，主要还是学的SpringMVC的内容，铁哥也是从Servlet、Tomcat讲起，然后讲到MVC架构，讲到SpringMVC的，后面是模板引擎Themleaf，最后才是主流的前后端分层架构。这一期我主要总结下SpringMVC-1的相关内容，包括SpringMVC项目的搭建、常用注解、请求响应流程、Restful API等。</p></blockquote><h2 id="1，SpringMVC概述"><a href="#1，SpringMVC概述" class="headerlink" title="1，SpringMVC概述"></a>1，SpringMVC概述</h2><p>学习SpringMVC我们先来回顾下现在web程序是如何做的，咱们现在web程序大都基于三层架构来实现。</p><p>三层架构</p><p><img src="/../images/2024/12/1217/mvc1/1630427303762.png" alt="1630427303762"></p><ul><li><p>浏览器发送一个请求给后端服务器，后端服务器现在是使用Servlet来接收请求和数据</p></li><li><p>如果所有的处理都交给Servlet来处理的话，所有的东西都耦合在一起，对后期的维护和扩展极为不利</p></li><li><p>将后端服务器Servlet拆分成三层，分别是<code>web</code>、<code>service</code>和<code>dao</code></p><ul><li>web层主要由servlet来处理，负责页面请求和数据的收集以及响应结果给前端</li><li>service层主要负责业务逻辑的处理</li><li>dao层主要负责数据的增删改查操作</li></ul></li><li><p>servlet处理请求和数据的时候，存在的问题是一个servlet只能处理一个请求</p></li><li><p>针对web层进行了优化，采用了MVC设计模式，将其设计为<code>controller</code>、<code>view</code>和<code>Model</code></p><ul><li>controller负责请求和数据的接收，接收后将其转发给service进行业务处理</li><li>service根据需要会调用dao对数据进行增删改查</li><li>dao把数据处理完后将结果交给service,service再交给controller</li><li>controller根据需求组装成Model和View,Model和View组合起来生成页面转发给前端浏览器</li><li>这样做的好处就是controller可以处理多个请求，并对请求进行分发，执行不同的业务操作。</li></ul></li></ul><p>随着互联网的发展，上面的模式因为是同步调用，性能慢慢的跟不是需求，所以异步调用慢慢的走到了前台，是现在比较流行的一种处理方式。</p><p><img src="/../images/2024/12/1217/mvc1/1630427769938.png" alt="1630427769938"></p><ul><li>因为是异步调用，所以后端不需要返回view视图，将其去除</li><li>前端如果通过异步调用的方式进行交互，后台就需要将返回的数据转换成json格式进行返回</li><li>SpringMVC&#x3D;&#x3D;主要&#x3D;&#x3D;负责的就是<ul><li>controller如何接收请求和数据</li><li>如何将请求和数据转发给业务层</li><li>如何将响应数据转换成json发回到前端</li></ul></li></ul><p>介绍了这么多，对SpringMVC进行一个定义</p><ul><li><p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</p></li><li><p>优点</p><ul><li>使用简单、开发便捷(相比于Servlet)</li><li>灵活性强</li></ul><p>这里所说的优点，就需要我们在使用的过程中慢慢体会。</p></li></ul><h2 id="2，SpringMVC入门案例"><a href="#2，SpringMVC入门案例" class="headerlink" title="2，SpringMVC入门案例"></a>2，SpringMVC入门案例</h2><p>因为SpringMVC是一个Web框架，将来是要替换Servlet,所以先来回顾下以前Servlet是如何进行开发的?</p><p>1.创建web工程(Maven结构)</p><p>2.设置tomcat服务器，加载web工程(tomcat插件)</p><p>3.导入坐标(Servlet)</p><p>4.定义处理请求的功能类(UserServlet)</p><p>5.设置请求映射(配置映射关系)</p><p>SpringMVC的制作过程和上述流程几乎是一致的，具体的实现流程是什么?</p><p>1.创建web工程(Maven结构)</p><p>2.设置tomcat服务器，加载web工程(tomcat插件)</p><p>3.导入坐标(&#x3D;&#x3D;SpringMVC&#x3D;&#x3D;+Servlet)</p><p>4.定义处理请求的功能类(&#x3D;&#x3D;UserController&#x3D;&#x3D;)</p><p>5.&#x3D;&#x3D;设置请求映射(配置映射关系)&#x3D;&#x3D;</p><p>6.&#x3D;&#x3D;将SpringMVC设定加载到Tomcat容器中&#x3D;&#x3D;</p><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><h3 id="2-2-案例制作"><a href="#2-2-案例制作" class="headerlink" title="2.2 案例制作"></a>2.2 案例制作</h3><h4 id="步骤1-创建Maven项目"><a href="#步骤1-创建Maven项目" class="headerlink" title="步骤1:创建Maven项目"></a>步骤1:创建Maven项目</h4><p>打开IDEA,创建一个新的web项目</p><p><img src="/../images/2024/12/1217/mvc1/1630428920116.png" alt="1630428920116"></p><h4 id="步骤2-补全目录结构"><a href="#步骤2-补全目录结构" class="headerlink" title="步骤2:补全目录结构"></a>步骤2:补全目录结构</h4><p>因为使用骨架创建的项目结构不完整，需要手动补全</p><p><img src="/../images/2024/12/1217/mvc1/1630429288339.png" alt="1630429288339"></p><h4 id="步骤3-导入jar包"><a href="#步骤3-导入jar包" class="headerlink" title="步骤3:导入jar包"></a>步骤3:导入jar包</h4><p>将pom.xml中多余的内容删除掉，再添加SpringMVC需要的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springmvc_01_quickstart&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">5.2</span><span class="number">.10</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;port&gt;<span class="number">80</span>&lt;/port&gt;</span><br><span class="line">          &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**说明:**servlet的坐标为什么需要添加<code>&lt;scope&gt;provided&lt;/scope&gt;</code>?</p><ul><li><p>scope是maven中jar包依赖作用范围的描述，</p></li><li><p>如果不设置默认是<code>compile</code>在在编译、运行、测试时均有效</p></li><li><p>如果运行有效的话就会和tomcat中的servlet-api包发生冲突，导致启动报错</p></li><li><p>provided代表的是该包只在编译和测试的时候用，运行的时候无效直接使用tomcat中的，就避免冲突</p></li></ul><h4 id="步骤4-创建配置类"><a href="#步骤4-创建配置类" class="headerlink" title="步骤4:创建配置类"></a>步骤4:创建配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5-创建Controller类"><a href="#步骤5-创建Controller类" class="headerlink" title="步骤5:创建Controller类"></a>步骤5:创建Controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤6-使用配置类替换web-xml"><a href="#步骤6-使用配置类替换web-xml" class="headerlink" title="步骤6:使用配置类替换web.xml"></a>步骤6:使用配置类替换web.xml</h4><p>将web.xml删除，换成ServletContainersInitConfig 这个其实就是项目的主入口，项目会从这个类开始加载，然后这个类又会去加载SpringMVCConfig和SpringConfig这些配置类，而这些配置类又会去加载Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springmvc配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置由springmvc控制器处理的请求映射路径</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-配置Tomcat环境"><a href="#步骤7-配置Tomcat环境" class="headerlink" title="步骤7:配置Tomcat环境"></a>步骤7:配置Tomcat环境</h4><p><img src="/../images/2024/12/1217/mvc1/1630430302683.png" alt="1630430302683"></p><h4 id="步骤8-启动运行项目"><a href="#步骤8-启动运行项目" class="headerlink" title="步骤8:启动运行项目"></a>步骤8:启动运行项目</h4><p><img src="/../images/2024/12/1217/mvc1/1630430345246.png" alt="1630430345246"></p><h4 id="步骤9-浏览器访问"><a href="#步骤9-浏览器访问" class="headerlink" title="步骤9:浏览器访问"></a>步骤9:浏览器访问</h4><p>浏览器输入<code>http://localhost/save</code>进行访问，会报如下错误:</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/2024/12/1217/mvc1/1630430401561.png" alt="1630430401561"></h4><p>页面报错的原因是后台没有指定返回的页面，目前只需要关注控制台看<code>user save ...</code>有没有被执行即可。</p><h4 id="步骤10-修改Controller返回值解决上述问题"><a href="#步骤10-修改Controller返回值解决上述问题" class="headerlink" title="步骤10:修改Controller返回值解决上述问题"></a>步骤10:修改Controller返回值解决上述问题</h4><p>前面我们说过现在主要的是前端发送异步请求，后台响应json数据，所以接下来我们把Controller类的save方法进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次重启tomcat服务器，然后重新通过浏览器测试访问,会发现还是会报错，这次的错是404</p><p><img src="/../images/2024/12/1217/mvc1/1630430658028.png" alt="1630430658028"></p><p>出错的原因是，如果方法直接返回字符串，springmvc会把字符串当成页面的名称在项目中进行查找返回，因为不存在对应返回值名称的页面，所以会报404错误，找不到资源。</p><p>而我们其实是想要直接返回的是json数据，具体如何修改呢?</p><h4 id="步骤11-设置返回数据为json"><a href="#步骤11-设置返回数据为json" class="headerlink" title="步骤11:设置返回数据为json"></a>步骤11:设置返回数据为json</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次重启tomcat服务器，然后重新通过浏览器测试访问，就能看到返回的结果数据</p><p><img src="/../images/2024/12/1217/mvc1/1630430835628.png" alt="1630430835628"></p><p>至此SpringMVC的入门案例就已经完成。</p><p><strong>注意事项</strong></p><ul><li>SpringMVC是基于Spring的，在pom.xml只导入了<code>spring-webmvc</code>jar包的原因是它会自动依赖spring相关坐标</li><li>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化Web3.0容器的抽象类</li><li>AbstractDispatcherServletInitializer提供了三个接口方法供用户实现<ul><li>createServletApplicationContext方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个web容器范围</li><li>getServletMappings方法，设定SpringMVC对应的请求映射路径，即SpringMVC拦截哪些请求</li><li>createRootApplicationContext方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean,使用当前方法进行，使用方式和createServletApplicationContext相同。</li><li>createServletApplicationContext用来加载SpringMVC环境</li><li>createRootApplicationContext用来加载Spring环境</li></ul></li></ul><h3 id="知识点1：-Controller"><a href="#知识点1：-Controller" class="headerlink" title="知识点1：@Controller"></a>知识点1：@Controller</h3><table><thead><tr><th>名称</th><th>@Controller</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类定义上方</td></tr><tr><td>作用</td><td>设定SpringMVC的核心控制器bean</td></tr></tbody></table><h3 id="知识点2：-RequestMapping"><a href="#知识点2：-RequestMapping" class="headerlink" title="知识点2：@RequestMapping"></a>知识点2：@RequestMapping</h3><table><thead><tr><th>名称</th><th>@RequestMapping</th></tr></thead><tbody><tr><td>类型</td><td>类注解或方法注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类或方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法请求访问路径</td></tr><tr><td>相关属性</td><td>value(默认)，请求访问路径</td></tr></tbody></table><h3 id="知识点3：-ResponseBody"><a href="#知识点3：-ResponseBody" class="headerlink" title="知识点3：@ResponseBody"></a>知识点3：@ResponseBody</h3><table><thead><tr><th>名称</th><th>@ResponseBody</th></tr></thead><tbody><tr><td>类型</td><td>类注解或方法注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类或方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法响应内容为当前返回值，无需解析</td></tr></tbody></table><h3 id="2-3-入门案例总结"><a href="#2-3-入门案例总结" class="headerlink" title="2.3 入门案例总结"></a>2.3 入门案例总结</h3><ul><li>一次性工作<ul><li>创建工程，设置服务器，加载工程</li><li>导入坐标</li><li>创建web容器启动类，加载SpringMVC配置，并设置SpringMVC请求拦截路径</li><li>SpringMVC核心配置类（设置配置类，扫描controller包，加载Controller控制器bean）</li></ul></li><li>多次工作<ul><li>定义处理请求的控制器类</li><li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回json数据（@ResponseBody）</li></ul></li></ul><h3 id="2-4-工作流程解析"><a href="#2-4-工作流程解析" class="headerlink" title="2.4 工作流程解析"></a>2.4 工作流程解析</h3><p>为了更好的使用SpringMVC,我们将SpringMVC的使用过程总共分两个阶段来分析，分别是<code>启动服务器初始化过程</code>和<code>单次请求过程</code></p><p><img src="/../images/2024/12/1217/mvc1/1630432494752.png" alt="1630432494752"></p><h4 id="2-4-1-启动服务器初始化过程"><a href="#2-4-1-启动服务器初始化过程" class="headerlink" title="2.4.1 启动服务器初始化过程"></a>2.4.1 启动服务器初始化过程</h4><ol><li><p>服务器启动，执行ServletContainersInitConfig类，初始化web容器</p><ul><li>功能类似于以前的web.xml</li></ul></li><li><p>执行createServletApplicationContext方法，创建了WebApplicationContext对象</p><ul><li>该方法加载SpringMVC的配置类SpringMvcConfig来初始化SpringMVC的容器</li></ul></li><li><p>加载SpringMvcConfig配置类</p><p><img src="/../images/2024/12/1217/mvc1/1630433335744.png" alt="1630433335744"></p></li><li><p>执行@ComponentScan加载对应的bean</p><ul><li>扫描指定包及其子包下所有类上的注解，如Controller类上的@Controller注解</li></ul></li><li><p>加载UserController，每个@RequestMapping的名称对应一个具体的方法</p><p><img src="/../images/2024/12/1217/mvc1/1630433398932.png" alt="1630433398932"></p><ul><li>此时就建立了 <code>/save</code> 和 save方法的对应关系</li></ul></li><li><p>执行getServletMappings方法，设定SpringMVC拦截请求的路径规则</p><p><img src="/../images/2024/12/1217/mvc1/1630433510528.png" alt="1630433510528"></p><ul><li><code>/</code>代表所拦截请求的路径规则，只有被拦截后才能交给SpringMVC来处理请求</li></ul></li></ol><h4 id="2-4-2-单次请求过程"><a href="#2-4-2-单次请求过程" class="headerlink" title="2.4.2 单次请求过程"></a>2.4.2 单次请求过程</h4><ol><li>发送请求<code>http://localhost/save</code></li><li>web容器发现该请求满足SpringMVC拦截规则，将请求交给SpringMVC处理</li><li>解析请求路径&#x2F;save</li><li>由&#x2F;save匹配执行对应的方法save(）<ul><li>上面的第五步已经将请求路径和方法建立了对应关系，通过&#x2F;save就能找到对应的save方法</li></ul></li><li>执行save()</li><li>检测到有@ResponseBody直接将save()方法的返回值作为响应体返回给请求方</li></ol><h3 id="2-5-bean加载控制"><a href="#2-5-bean加载控制" class="headerlink" title="2.5 bean加载控制"></a>2.5 bean加载控制</h3><h4 id="2-5-1-问题分析"><a href="#2-5-1-问题分析" class="headerlink" title="2.5.1 问题分析"></a>2.5.1 问题分析</h4><p>入门案例的内容已经做完了，在入门案例中我们创建过一个<code>SpringMvcConfig</code>的配置类，再回想前面咱们学习Spring的时候也创建过一个配置类<code>SpringConfig</code>。这两个配置类都需要加载资源，那么它们分别都需要加载哪些内容?</p><p>我们先来看下目前我们的项目目录结构:</p><p><img src="/../images/2024/12/1217/mvc1/1630459727575.png" alt="1630459727575"></p><ul><li><p>config目录存入的是配置类,写过的配置类有:</p><ul><li>ServletContainersInitConfig</li><li>SpringConfig</li><li>SpringMvcConfig</li><li>JdbcConfig</li><li>MybatisConfig</li></ul></li><li><p>controller目录存放的是SpringMVC的controller类</p></li><li><p>service目录存放的是service接口和实现类</p></li><li><p>dao目录存放的是dao&#x2F;Mapper接口</p></li></ul><p>controller、service和dao这些类都需要被容器管理成bean对象，那么到底是该让SpringMVC加载还是让Spring加载呢?</p><ul><li>SpringMVC加载其相关bean(表现层bean),也就是controller包下的类</li><li>Spring控制的bean<ul><li>业务bean(Service)</li><li>功能bean(DataSource,SqlSessionFactoryBean,MapperScannerConfigurer等)</li></ul></li></ul><p>分析清楚谁该管哪些bean以后，接下来要解决的问题是如何让Spring和SpringMVC分开加载各自的内容。</p><p>在SpringMVC的配置类<code>SpringMvcConfig</code>中使用注解<code>@ComponentScan</code>，我们只需要将其扫描范围设置到controller即可，如</p><p><img src="/../images/2024/12/1217/mvc1/1630460319004.png" alt="1630460319004"></p><p>在Spring的配置类<code>SpringConfig</code>中使用注解<code>@ComponentScan</code>,当时扫描的范围中其实是已经包含了controller,如:</p><p><img src="/../images/2024/12/1217/mvc1/1630460408159.png" alt="1630460408159"></p><p>从包结构来看的话，Spring已经多把SpringMVC的controller类也给扫描到，所以针对这个问题该如何解决，就是咱们接下来要学习的内容。</p><p>概括的描述下咱们现在的问题就是&#x3D;&#x3D;因为功能不同，如何避免Spring错误加载到SpringMVC的bean?&#x3D;&#x3D;</p><h4 id="2-5-2-思路分析"><a href="#2-5-2-思路分析" class="headerlink" title="2.5.2 思路分析"></a>2.5.2 思路分析</h4><p>针对上面的问题，解决方案也比较简单，就是:</p><ul><li>加载Spring控制的bean的时候排除掉SpringMVC控制的bean</li></ul><p>具体该如何排除：</p><ul><li>方式一:Spring加载的bean设定扫描范围为精准范围，例如service包、dao包等</li><li>方式二:Spring加载的bean设定扫描范围为com.itheima,排除掉controller包中的bean</li><li>方式三:不区分Spring与SpringMVC的环境，加载到同一个环境中[了解即可]</li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630461261820.png" alt="1630461261820"></p><h4 id="2-5-3-设置bean加载控制"><a href="#2-5-3-设置bean加载控制" class="headerlink" title="2.5.3 设置bean加载控制"></a>2.5.3 设置bean加载控制</h4><p>方式一:修改Spring配置类，设定扫描范围为精准范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;comitheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>上述只是通过例子说明可以精确指定让Spring扫描对应的包结构，真正在做开发的时候，因为Dao最终是交给<code>MapperScannerConfigurer</code>对象来进行扫描处理的，我们只需要将其扫描到service包即可。</p><p>方式二:修改Spring配置类，设定扫描范围为com.itheima,排除掉controller包中的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&quot;com.itheima&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters=@ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>excludeFilters属性：设置扫描加载bean时，排除的过滤规则</p></li><li><p>type属性：设置排除规则，当前使用按照bean定义时的注解类型进行排除</p><ul><li>ANNOTATION：按照注解排除</li><li>ASSIGNABLE_TYPE:按照指定的类型过滤</li><li>ASPECTJ:按照Aspectj表达式排除，基本上不会用</li><li>REGEX:按照正则表达式排除</li><li>CUSTOM:按照自定义规则排除</li></ul><p>大家只需要知道第一种ANNOTATION即可</p></li><li><p>classes属性：设置排除的具体注解类，当前设置排除@Controller定义的bean</p></li></ul><p>如何测试controller类已经被排除掉了?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        System.out.println(ctx.getBean(UserController.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果被排除了，该方法执行就会报bean未被定义的错误</p><p><img src="/../images/2024/12/1217/mvc1/1630462200947.png" alt="1630462200947"></p><p>&#x3D;&#x3D;注意:测试的时候，需要把SpringMvcConfig配置类上的@ComponentScan注解注释掉，否则不会报错&#x3D;&#x3D;</p><p>出现问题的原因是，</p><ul><li>Spring配置类扫描的包是<code>com.itheima</code></li><li>SpringMVC的配置类，<code>SpringMvcConfig</code>上有一个@Configuration注解，也会被Spring扫描到</li><li>SpringMvcConfig上又有一个@ComponentScan，把controller类又给扫描进来了</li><li>所以如果不把@ComponentScan注释掉，Spring配置类将Controller排除，但是因为扫描到SpringMVC的配置类，又将其加载回来，演示的效果就出不来</li><li>解决方案，也简单，把SpringMVC的配置类移出Spring配置类的扫描范围即可。</li></ul><p>最后一个问题，有了Spring的配置类，要想在tomcat服务器启动将其加载，我们需要修改ServletContainersInitConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述的配置方式，Spring还提供了一种更简单的配置方式，可以不用再去创建<code>AnnotationConfigWebApplicationContext</code>对象，不用手动<code>register</code>对应的配置类，如何实现?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点1：-ComponentScan"><a href="#知识点1：-ComponentScan" class="headerlink" title="知识点1：@ComponentScan"></a>知识点1：@ComponentScan</h3><table><thead><tr><th>名称</th><th>@ComponentScan</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr><td>相关属性</td><td>excludeFilters:排除扫描路径中加载的bean,需要指定类别(type)和具体项(classes)<br/>includeFilters:加载指定的bean，需要指定类别(type)和具体项(classes)</td></tr></tbody></table><h2 id="4，请求与响应"><a href="#4，请求与响应" class="headerlink" title="4，请求与响应"></a>4，请求与响应</h2><p>前面我们已经完成了入门案例相关的知识学习，接来了我们就需要针对SpringMVC相关的知识点进行系统的学习，之前我们提到过，SpringMVC是web层的框架，主要的作用是接收请求、接收数据、响应结果，所以这一章节是学习SpringMVC的&#x3D;&#x3D;重点&#x3D;&#x3D;内容，我们主要会讲解四部分内容:</p><ul><li>请求映射路径</li><li>请求参数</li><li>日期类型参数传递</li><li>响应json数据</li></ul><h3 id="4-1-设置请求映射路径"><a href="#4-1-设置请求映射路径" class="headerlink" title="4.1 设置请求映射路径"></a>4.1 设置请求映射路径</h3><h4 id="4-1-1-环境准备"><a href="#4-1-1-环境准备" class="headerlink" title="4.1.1 环境准备"></a>4.1.1 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_03_request_mapping<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写BookController和UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630466431549.png" alt="1630466431549"></p><p>把环境准备好后，启动Tomcat服务器，后台会报错:</p><p><img src="/../images/2024/12/1217/mvc1/1630466555934.png" alt="1630466555934"></p><p>从错误信息可以看出:</p><ul><li>UserController有一个save方法，访问路径为<code>http://localhost/save</code></li><li>BookController也有一个save方法，访问路径为<code>http://localhost/save</code></li><li>当访问<code>http://localhost/saved</code>的时候，到底是访问UserController还是BookController?</li></ul><h4 id="4-1-2-问题分析"><a href="#4-1-2-问题分析" class="headerlink" title="4.1.2 问题分析"></a>4.1.2 问题分析</h4><p>团队多人开发，每人设置不同的请求路径，冲突问题该如何解决?</p><p>解决思路:为不同模块设置模块名作为请求路径前置</p><p>对于Book模块的save,将其访问路径设置<code>http://localhost/book/save</code></p><p>对于User模块的save,将其访问路径设置<code>http://localhost/user/save</code></p><p>这样在同一个模块中出现命名冲突的情况就比较少了。</p><h4 id="4-1-3-设置映射路径"><a href="#4-1-3-设置映射路径" class="headerlink" title="4.1.3 设置映射路径"></a>4.1.3 设置映射路径</h4><h5 id="优化路径配置"><a href="#优化路径配置" class="headerlink" title="优化路径配置"></a>优化路径配置</h5><p>优化方案:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>当类上和方法上都添加了<code>@RequestMapping</code>注解，前端发送请求的时候，要和两个注解的value值相加匹配才能访问到。</li><li>@RequestMapping注解value属性前面加不加<code>/</code>都可以</li></ul><h3 id="4-2-请求参数"><a href="#4-2-请求参数" class="headerlink" title="4.2 请求参数"></a>4.2 请求参数</h3><p>请求路径设置好后，只要确保页面发送请求地址和后台Controller类中配置的路径一致，就可以接收到前端的请求，接收到请求后，如何接收页面传递的参数?</p><p>关于请求参数的传递与接收是和请求方式有关系的，目前比较常见的两种请求方式为：</p><ul><li>GET</li><li>POST</li></ul><p>针对于不同的请求前端如何发送，后端如何接收?</p><h4 id="4-2-1-环境准备"><a href="#4-2-1-环境准备" class="headerlink" title="4.2.1 环境准备"></a>4.2.1 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_03_request_mapping<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写模型类，User和Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">//setter...getter...略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//setter...getter...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630467830654.png" alt="1630467830654"></p><h4 id="4-2-2-参数传递"><a href="#4-2-2-参数传递" class="headerlink" title="4.2.2 参数传递"></a>4.2.2 参数传递</h4><h5 id="GET发送单个参数"><a href="#GET发送单个参数" class="headerlink" title="GET发送单个参数"></a>GET发送单个参数</h5><p>发送请求与参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/commonParam?name=itcast</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1217/mvc1/1630467921300.png" alt="1630467921300"></p><p>接收参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="GET发送多个参数"><a href="#GET发送多个参数" class="headerlink" title="GET发送多个参数"></a>GET发送多个参数</h5><p>发送请求与参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/commonParam?name=itcast&amp;age=15</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1217/mvc1/1630468045733.png" alt="1630468045733"></p><p>接收参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="GET请求中文乱码"><a href="#GET请求中文乱码" class="headerlink" title="GET请求中文乱码"></a>GET请求中文乱码</h5><p>如果我们传递的参数中有中文，你会发现接收到的参数会出现中文乱码问题。</p><p>发送请求:<code>http://localhost/commonParam?name=张三&amp;age=18</code></p><p>控制台:</p><p><img src="/../images/2024/12/1217/mvc1/1630480536510.png" alt="1630480536510"></p><p>出现乱码的原因相信大家都清楚，Tomcat8.5以后的版本已经处理了中文乱码的问题，但是IDEA中的Tomcat插件目前只到Tomcat7，所以需要修改pom.xml来解决GET请求中文乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span><span class="comment">&lt;!--tomcat端口号--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span> <span class="comment">&lt;!--虚拟目录--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span><span class="comment">&lt;!--访问路径编解码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="POST发送参数"><a href="#POST发送参数" class="headerlink" title="POST发送参数"></a>POST发送参数</h5><p>发送请求与参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630480812809.png" alt="1630480812809">接收参数：</p><p>和GET一致，不用做任何修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;commonParam&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="POST请求中文乱码"><a href="#POST请求中文乱码" class="headerlink" title="POST请求中文乱码"></a>POST请求中文乱码</h5><p>发送请求与参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630480964421.png" alt="1630480964421"></p><p>接收参数:</p><p>控制台打印，会发现有中文乱码问题。</p><p><img src="/../images/2024/12/1217/mvc1/1630481008109.png" alt="1630481008109"></p><p>解决方案:配置过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CharacterEncodingFilter是在spring-web包中，所以用之前需要导入对应的jar包。</p><h3 id="4-3-五种类型参数传递"><a href="#4-3-五种类型参数传递" class="headerlink" title="4.3 五种类型参数传递"></a>4.3 五种类型参数传递</h3><p>前面我们已经能够使用GET或POST来发送请求和数据，所携带的数据都是比较简单的数据，接下来在这个基础上，我们来研究一些比较复杂的参数传递，常见的参数种类有:</p><ul><li>普通参数</li><li>POJO类型参数</li><li>嵌套POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><p>这些参数如何发送，后台改如何接收?我们一个个来学习。</p><h4 id="4-3-1-普通参数"><a href="#4-3-1-普通参数" class="headerlink" title="4.3.1 普通参数"></a>4.3.1 普通参数</h4><ul><li>普通参数:url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数。</li></ul><p><img src="/../images/2024/12/1217/mvc1/1630481585729.png" alt="1630481585729"></p><p>如果形参与地址参数名不一致该如何解决?</p><p>发送请求与参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/commonParamDifferentName?name=张三&amp;age=18</span><br></pre></td></tr></table></figure><p>后台接收参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/commonParamDifferentName&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonParamDifferentName</span><span class="params">(String userName , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前端给的是<code>name</code>,后台接收使用的是<code>userName</code>,两个名称对不上，导致接收数据失败:</p><p><img src="/../images/2024/12/1217/mvc1/1630481772035.png" alt="1630481772035"></p><p>解决方案:使用@RequestParam注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/commonParamDifferentName&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParamDifferentName</span><span class="params">(<span class="meta">@RequestPaam(&quot;name&quot;)</span> String userName , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意:写上@RequestParam注解框架就不需要自己去解析注入，能提升框架处理性能</strong></p><h4 id="4-3-2-POJO数据类型"><a href="#4-3-2-POJO数据类型" class="headerlink" title="4.3.2 POJO数据类型"></a>4.3.2 POJO数据类型</h4><p>简单数据类型一般处理的是参数个数比较少的请求，如果参数比较多，那么后台接收参数的时候就比较复杂，这个时候我们可以考虑使用POJO数据类型。</p><ul><li>POJO参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</li></ul><p>此时需要使用前面准备好的POJO类，先来看下User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//setter...getter...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求和参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630482186745.png" alt="1630482186745"></p><p>后台接收参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>POJO参数接收，前端GET和POST发送请求数据的方式不变。</li><li>&#x3D;&#x3D;请求参数key的名称要和POJO中属性的名称一致，否则无法封装。&#x3D;&#x3D;</li></ul><h4 id="4-3-3-嵌套POJO类型参数"><a href="#4-3-3-嵌套POJO类型参数" class="headerlink" title="4.3.3 嵌套POJO类型参数"></a>4.3.3 嵌套POJO类型参数</h4><p>如果POJO对象中嵌套了其他的POJO类，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">//setter...getter...略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//setter...getter...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</li></ul><p>发送请求和参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630482363291.png" alt="1630482363291"></p><p>后台接收参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>&#x3D;&#x3D;请求参数key的名称要和POJO中属性的名称一致，否则无法封装&#x3D;&#x3D;</p><h4 id="4-3-4-数组类型参数"><a href="#4-3-4-数组类型参数" class="headerlink" title="4.3.4 数组类型参数"></a>4.3.4 数组类型参数</h4><p>举个简单的例子，如果前端需要获取用户的爱好，爱好绝大多数情况下都是多个，如何发送请求数据和接收数据呢?</p><ul><li>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型即可接收参数</li></ul><p>发送请求和参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630482999626.png" alt="1630482999626"></p><p>后台接收参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组参数：同名请求参数可以直接映射到对应名称的形参数组对象中</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;数组参数传递 likes ==&gt; &quot;</span>+ Arrays.toString(likes));</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;array param&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-5-集合类型参数"><a href="#4-3-5-集合类型参数" class="headerlink" title="4.3.5 集合类型参数"></a>4.3.5 集合类型参数</h4><p>数组能接收多个值，那么集合是否也可以实现这个功能呢?</p><p>发送请求和参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630484283773.png" alt="1630484283773"></p><p>后台接收参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;集合参数传递 likes ==&gt; &quot;</span>+ likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行会报错，</p><p><img src="/../images/2024/12/1217/mvc1/1630484339065.png" alt="1630484339065"></p><p>错误的原因是:SpringMVC将List看做是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象，所以报错。</p><p>解决方案是:使用<code>@RequestParam</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;集合参数传递 likes ==&gt; &quot;</span>+ likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系</li><li>对于简单数据类型使用数组会比集合更简单些。</li></ul><h3 id="知识点1：-RequestParam"><a href="#知识点1：-RequestParam" class="headerlink" title="知识点1：@RequestParam"></a>知识点1：@RequestParam</h3><table><thead><tr><th>名称</th><th>@RequestParam</th></tr></thead><tbody><tr><td>类型</td><td>形参注解</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>绑定请求参数与处理器方法形参间的关系</td></tr><tr><td>相关参数</td><td>required：是否为必传参数 <br/>defaultValue：参数默认值</td></tr></tbody></table><h3 id="4-4-JSON数据传输参数"><a href="#4-4-JSON数据传输参数" class="headerlink" title="4.4 JSON数据传输参数"></a>4.4 JSON数据传输参数</h3><p>前面我们说过，现在比较流行的开发方式为异步调用。前后台以异步方式进行交换，传输的数据使用的是&#x3D;&#x3D;JSON&#x3D;&#x3D;,所以前端如果发送的是JSON数据，后端该如何接收?</p><p>对于JSON数据类型，我们常见的有三种:</p><ul><li>json普通数组（[“value1”,”value2”,”value3”,…]）</li><li>json对象（{key1:value1,key2:value2,…}）</li><li>json对象数组（[{key1:value1,…},{key2:value2,…}]）</li></ul><p>对于上述数据，前端如何发送，后端如何接收?</p><h4 id="JSON普通数组"><a href="#JSON普通数组" class="headerlink" title="JSON普通数组"></a>JSON普通数组</h4><h6 id="步骤1-pom-xml添加依赖"><a href="#步骤1-pom-xml添加依赖" class="headerlink" title="步骤1:pom.xml添加依赖"></a>步骤1:pom.xml添加依赖</h6><p>SpringMVC默认使用的是jackson来处理json的转换，所以需要在pom.xml添加jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤2-PostMan发送JSON数据"><a href="#步骤2-PostMan发送JSON数据" class="headerlink" title="步骤2:PostMan发送JSON数据"></a>步骤2:PostMan发送JSON数据</h6><p><img src="/../images/2024/12/1217/mvc1/1630485135061.png" alt="1630485135061"></p><h6 id="步骤3-开启SpringMVC注解支持"><a href="#步骤3-开启SpringMVC注解支持" class="headerlink" title="步骤3:开启SpringMVC注解支持"></a>步骤3:开启SpringMVC注解支持</h6><p>在SpringMVC的配置类中开启SpringMVC的注解支持，这里面就包含了将JSON转换成对象的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤4-参数前添加-RequestBody"><a href="#步骤4-参数前添加-RequestBody" class="headerlink" title="步骤4:参数前添加@RequestBody"></a>步骤4:参数前添加@RequestBody</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤5-启动运行程序"><a href="#步骤5-启动运行程序" class="headerlink" title="步骤5:启动运行程序"></a>步骤5:启动运行程序</h6><p><img src="/../images/2024/12/1217/mvc1/1630492624684.png" alt="1630492624684"></p><p>JSON普通数组的数据就已经传递完成，下面针对JSON对象数据和JSON对象数组的数据该如何传递呢?</p><h4 id="JSON对象数据"><a href="#JSON对象数据" class="headerlink" title="JSON对象数据"></a>JSON对象数据</h4><p>我们会发现，只需要关注请求和数据如何发送?后端数据如何接收?</p><p>请求和数据的发送:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;itcast&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">15</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1217/mvc1/1630493105450.png" alt="1630493105450"></p><p>后端接收数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo(json)参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序访问测试</p><p><img src="/../images/2024/12/1217/mvc1/1630493233550.png" alt="1630493233550"></p><p><strong>说明:</strong></p><p>address为null的原因是前端没有传递数据给后端。</p><p>如果想要address也有数据，我们需求修改前端传递的数据内容:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;itcast&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;beijing&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;beijing&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再次发送请求，就能看到address中的数据</p><p><img src="/../images/2024/12/1217/mvc1/1630493450694.png" alt="1630493450694"></p><h4 id="JSON对象数组"><a href="#JSON对象数组" class="headerlink" title="JSON对象数组"></a>JSON对象数组</h4><p>集合中保存多个POJO该如何实现?</p><p>请求和数据的发送:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;itcast&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;itheima&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p> <img src="/../images/2024/12/1217/mvc1/1630493501205.png" alt="1630493501205"></p><p>后端接收数据:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listPojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listPojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list pojo(json)参数传递 list ==&gt; &quot;</span>+list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序访问测试</p><p><img src="/../images/2024/12/1217/mvc1/1630493561137.png" alt="1630493561137"></p><p><strong>小结</strong></p><p>SpringMVC接收JSON数据的实现步骤为:</p><p>(1)导入jackson包</p><p>(2)使用PostMan发送JSON数据</p><p>(3)开启SpringMVC注解驱动，在配置类上添加@EnableWebMvc注解</p><p>(4)Controller方法的参数前添加@RequestBody注解</p><h4 id="知识点1：-EnableWebMvc"><a href="#知识点1：-EnableWebMvc" class="headerlink" title="知识点1：@EnableWebMvc"></a>知识点1：@EnableWebMvc</h4><table><thead><tr><th>名称</th><th>@EnableWebMvc</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;配置类注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>SpringMVC配置类定义上方</td></tr><tr><td>作用</td><td>开启SpringMVC多项辅助功能</td></tr></tbody></table><h4 id="知识点2：-RequestBody"><a href="#知识点2：-RequestBody" class="headerlink" title="知识点2：@RequestBody"></a>知识点2：@RequestBody</h4><table><thead><tr><th>名称</th><th>@RequestBody</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;形参注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td></tr></tbody></table><h4 id="RequestBody与-RequestParam区别"><a href="#RequestBody与-RequestParam区别" class="headerlink" title="@RequestBody与@RequestParam区别"></a>@RequestBody与@RequestParam区别</h4><ul><li><p>区别</p><ul><li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li><li>@RequestBody用于接收json数据【application&#x2F;json】</li></ul></li><li><p>应用</p><ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li></ul></li></ul><h3 id="4-5-日期类型参数传递"><a href="#4-5-日期类型参数传递" class="headerlink" title="4.5 日期类型参数传递"></a>4.5 日期类型参数传递</h3><p>前面我们处理过简单数据类型、POJO数据类型、数组和集合数据类型以及JSON数据类型，接下来我们还得处理一种开发中比较常见的一种数据类型，<code>日期类型</code></p><p>日期类型比较特殊，因为对于日期的格式有N多中输入方式，比如:</p><ul><li>2088-08-18</li><li>2088&#x2F;08&#x2F;18</li><li>08&#x2F;18&#x2F;2088</li><li>……</li></ul><p>针对这么多日期格式，SpringMVC该如何接收，它能很好的处理日期类型数据么?</p><h4 id="步骤1-编写方法接收日期数据"><a href="#步骤1-编写方法接收日期数据" class="headerlink" title="步骤1:编写方法接收日期数据"></a>步骤1:编写方法接收日期数据</h4><p>在UserController类中添加方法，把参数设置为日期类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2-启动Tomcat服务器"><a href="#步骤2-启动Tomcat服务器" class="headerlink" title="步骤2:启动Tomcat服务器"></a>步骤2:启动Tomcat服务器</h4><p>查看控制台是否报错，如果有错误，先解决错误。</p><h4 id="步骤3-使用PostMan发送请求"><a href="#步骤3-使用PostMan发送请求" class="headerlink" title="步骤3:使用PostMan发送请求"></a>步骤3:使用PostMan发送请求</h4><p>使用PostMan发送GET请求，并设置date参数</p><p><code>http://localhost/dataParam?date=2088/08/08</code></p><p><img src="/../images/2024/12/1217/mvc1/1630494320917.png" alt="1630494320917"></p><h4 id="步骤4-查看控制台"><a href="#步骤4-查看控制台" class="headerlink" title="步骤4:查看控制台"></a>步骤4:查看控制台</h4><p><img src="/../images/2024/12/1217/mvc1/1630494443738.png" alt="1630494443738"></p><p>通过打印，我们发现SpringMVC可以接收日期数据类型，并将其打印在控制台。</p><p>这个时候，我们就想如果把日期参数的格式改成其他的，SpringMVC还能处理么?</p><h4 id="步骤5-更换日期格式"><a href="#步骤5-更换日期格式" class="headerlink" title="步骤5:更换日期格式"></a>步骤5:更换日期格式</h4><p>为了能更好的看到程序运行的结果，我们在方法中多添加一个日期参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,Date date1)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PostMan发送请求，携带两个不同的日期格式，</p><p><code>http://localhost/dataParam?date=2088/08/08&amp;date1=2088-08-08</code></p><p><img src="/../images/2024/12/1217/mvc1/1630494565970.png" alt="1630494565970"></p><p>发送请求和数据后，页面会报400，控制台会报出一个错误</p><p>Resolved [org.springframework.web.method.annotation.&#x3D;&#x3D;MethodArgumentTypeMismatchException&#x3D;&#x3D;: Failed to convert value of type ‘java.lang.String’ to required type ‘java.util.Date’; nested exception is org.springframework.core.convert.&#x3D;&#x3D;ConversionFailedException&#x3D;&#x3D;: Failed to convert from type [java.lang.String] to type [java.util.Date] for value ‘2088-08-08’; nested exception is java.lang.IllegalArgumentException]</p><p>从错误信息可以看出，错误的原因是在将<code>2088-08-08</code>转换成日期类型的时候失败了，原因是SpringMVC默认支持的字符串转日期的格式为<code>yyyy/MM/dd</code>,而我们现在传递的不符合其默认格式，SpringMVC就无法进行格式转换，所以报错。</p><p>解决方案也比较简单，需要使用<code>@DateTimeFormat</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> Date date1)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">System.out.println(<span class="string">&quot;参数传递 date1(yyyy-MM-dd) ==&gt; &quot;</span>+date1);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务器，重新发送请求测试，SpringMVC就可以正确的进行日期转换了</p><p><img src="/../images/2024/12/1217/mvc1/1630495221038.png" alt="1630495221038"></p><h4 id="步骤6-携带时间的日期"><a href="#步骤6-携带时间的日期" class="headerlink" title="步骤6:携带时间的日期"></a>步骤6:携带时间的日期</h4><p>接下来我们再来发送一个携带时间的日期，看下SpringMVC该如何处理?</p><p>先修改UserController类，添加第三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern=&quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date2)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">System.out.println(<span class="string">&quot;参数传递 date1(yyyy-MM-dd) ==&gt; &quot;</span>+date1);</span><br><span class="line">System.out.println(<span class="string">&quot;参数传递 date2(yyyy/MM/dd HH:mm:ss) ==&gt; &quot;</span>+date2);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PostMan发送请求，携带两个不同的日期格式，</p><p><code>http://localhost/dataParam?date=2088/08/08&amp;date1=2088-08-08&amp;date2=2088/08/08 8:08:08</code></p><p><img src="/../images/2024/12/1217/mvc1/1630495347289.png" alt="1630495347289"></p><p>重新启动服务器，重新发送请求测试，SpringMVC就可以将日期时间的数据进行转换</p><p><img src="/../images/2024/12/1217/mvc1/1630495507353.png" alt="1630495507353"></p><h4 id="知识点1：-DateTimeFormat"><a href="#知识点1：-DateTimeFormat" class="headerlink" title="知识点1：@DateTimeFormat"></a>知识点1：@DateTimeFormat</h4><table><thead><tr><th>名称</th><th>@DateTimeFormat</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;形参注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参前面</td></tr><tr><td>作用</td><td>设定日期时间型数据格式</td></tr><tr><td>相关属性</td><td>pattern：指定日期时间格式字符串</td></tr></tbody></table><h4 id="内部实现原理"><a href="#内部实现原理" class="headerlink" title="内部实现原理"></a>内部实现原理</h4><p>讲解内部原理之前，我们需要先思考个问题:</p><ul><li>前端传递字符串，后端使用日期Date接收</li><li>前端传递JSON数据，后端使用对象接收</li><li>前端传递字符串，后端使用Integer接收</li><li>后台需要的数据类型有很多中</li><li>在数据的传递过程中存在很多类型的转换</li></ul><p>问:谁来做这个类型转换?</p><p>答:SpringMVC</p><p>问:SpringMVC是如何实现类型转换的?</p><p>答:SpringMVC中提供了很多类型转换接口和实现类</p><p>在框架中，有一些类型转换接口，其中有:</p><ul><li>(1) Converter接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*S: the source type</span></span><br><span class="line"><span class="comment">*T: the target type</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;S, T&gt; &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">//该方法就是将从页面上接收的数据(S)转换成我们想要的数据类型(T)返回</span></span><br><span class="line">    T <span class="title function_">convert</span><span class="params">(S source)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:Converter所属的包为<code>org.springframework.core.convert.converter</code></strong></p><p>Converter接口的实现类</p><p><img src="/../images/2024/12/1217/mvc1/1630496385398.png" alt="1630496385398"></p><p>框架中有提供很多对应Converter接口的实现类，用来实现不同数据类型之间的转换,如:</p><p>请求参数年龄数据（String→Integer）</p><p>日期格式转换（String → Date）</p><ul><li>(2) HttpMessageConverter接口</li></ul><p>该接口是实现对象与JSON之间的转换工作</p><p><strong>&#x3D;&#x3D;注意:SpringMVC的配置类把@EnableWebMvc当做标配配置上去，不要省略&#x3D;&#x3D;</strong></p><h3 id="4-6-响应"><a href="#4-6-响应" class="headerlink" title="4.6 响应"></a>4.6 响应</h3><p>SpringMVC接收到请求和数据后，进行一些了的处理，当然这个处理可以是转发给Service，Service层再调用Dao层完成的，不管怎样，处理完以后，都需要将结果告知给用户。</p><p>比如:根据用户ID查询用户信息、查询用户列表、新增用户等。</p><p>对于响应，主要就包含两部分内容：</p><ul><li>响应页面</li><li>响应数据<ul><li>文本数据</li><li>json数据</li></ul></li></ul><p>因为异步调用是目前常用的主流方式，所以我们需要更关注的就是如何返回JSON数据，对于其他只需要认识了解即可。</p><h4 id="4-6-1-环境准备"><a href="#4-6-1-环境准备" class="headerlink" title="4.6.1 环境准备"></a>4.6.1 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_05_response<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写模型类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>webapp下创建page.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello Spring MVC!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630497314131.png" alt="1630497314131"></p><h4 id="4-6-2-响应页面-了解"><a href="#4-6-2-响应页面-了解" class="headerlink" title="4.6.2 响应页面[了解]"></a>4.6.2 响应页面[了解]</h4><h5 id="步骤1-设置返回页面"><a href="#步骤1-设置返回页面" class="headerlink" title="步骤1:设置返回页面"></a>步骤1:设置返回页面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toJumpPage&quot;)</span></span><br><span class="line">    <span class="comment">//注意</span></span><br><span class="line">    <span class="comment">//1.此处不能添加@ResponseBody,如果加了该注入，会直接将page.jsp当字符串返回前端</span></span><br><span class="line">    <span class="comment">//2.方法需要返回String</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toJumpPage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳转页面&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;page.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-启动程序测试"><a href="#步骤2-启动程序测试" class="headerlink" title="步骤2:启动程序测试"></a>步骤2:启动程序测试</h5><p>此处涉及到页面跳转，所以不适合采用PostMan进行测试，直接打开浏览器，输入</p><p><code>http://localhost/toJumpPage</code></p><p><img src="/../images/2024/12/1217/mvc1/1630497496785.png" alt="1630497496785"></p><h4 id="4-6-3-返回文本数据-了解"><a href="#4-6-3-返回文本数据-了解" class="headerlink" title="4.6.3 返回文本数据[了解]"></a>4.6.3 返回文本数据[了解]</h4><h5 id="步骤1-设置返回文本内容"><a href="#步骤1-设置返回文本内容" class="headerlink" title="步骤1:设置返回文本内容"></a>步骤1:设置返回文本内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/toText&quot;)</span></span><br><span class="line"><span class="comment">//注意此处该注解就不能省略，如果省略了,会把response text当前页面名称去查找，如果没有回报404错误</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toText</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回纯文本数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;response text&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-启动程序测试-1"><a href="#步骤2-启动程序测试-1" class="headerlink" title="步骤2:启动程序测试"></a>步骤2:启动程序测试</h5><p>此处不涉及到页面跳转，因为我们现在发送的是GET请求，可以使用浏览器也可以使用PostMan进行测试，输入地址<code>http://localhost/toText</code>访问</p><p><img src="/../images/2024/12/1217/mvc1/1630497741388.png" alt="1630497741388"></p><h4 id="4-6-4-响应JSON数据"><a href="#4-6-4-响应JSON数据" class="headerlink" title="4.6.4 响应JSON数据"></a>4.6.4 响应JSON数据</h4><h5 id="响应POJO对象"><a href="#响应POJO对象" class="headerlink" title="响应POJO对象"></a>响应POJO对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toJsonPOJO&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">toJsonPOJO</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回json对象数据&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">15</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的json数据，需要依赖&#x3D;&#x3D;@ResponseBody&#x3D;&#x3D;注解和&#x3D;&#x3D;@EnableWebMvc&#x3D;&#x3D;注解</p><p>重新启动服务器，访问<code>http://localhost/toJsonPOJO</code></p><p><img src="/../images/2024/12/1217/mvc1/1630497954896.png" alt="1630497954896"></p><h5 id="响应POJO集合对象"><a href="#响应POJO集合对象" class="headerlink" title="响应POJO集合对象"></a>响应POJO集合对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toJsonList&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">toJsonList</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回json集合数据&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setName(<span class="string">&quot;传智播客&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user2.setAge(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新启动服务器，访问<code>http://localhost/toJsonList</code></p><p><img src="/../images/2024/12/1217/mvc1/1630498084047.png" alt="1630498084047"></p><h4 id="知识点1：-ResponseBody"><a href="#知识点1：-ResponseBody" class="headerlink" title="知识点1：@ResponseBody"></a>知识点1：@ResponseBody</h4><table><thead><tr><th>名称</th><th>@ResponseBody</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;方法\类注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>SpringMVC控制器方法定义上方和控制类上</td></tr><tr><td>作用</td><td>设置当前控制器返回值作为响应体,<br/>写在类上，该类的所有方法都有该注解功能</td></tr><tr><td>相关属性</td><td>pattern：指定日期时间格式字符串</td></tr></tbody></table><p><strong>说明:</strong></p><ul><li>该注解可以写在类上或者方法上</li><li>写在类上就是该类下的所有方法都有@ReponseBody功能</li><li>当方法上有@ReponseBody注解后<ul><li>方法的返回值为字符串，会将其作为文本内容直接响应给前端</li><li>方法的返回值为对象，会将对象转换成JSON响应给前端</li></ul></li></ul><p>此处又使用到了类型转换，内部还是通过Converter接口的实现类完成的，所以Converter除了前面所说的功能外，它还可以实现:</p><ul><li>对象转Json数据(POJO -&gt; json)</li><li>集合转Json数据(Collection -&gt; json)</li></ul><h2 id="5，Rest风格"><a href="#5，Rest风格" class="headerlink" title="5，Rest风格"></a>5，Rest风格</h2><p>对于Rest风格，我们需要学习的内容包括:</p><ul><li>REST简介</li><li>REST入门案例</li><li>REST快速开发</li><li>案例:基于RESTful页面数据交互</li></ul><h3 id="5-1-REST简介"><a href="#5-1-REST简介" class="headerlink" title="5.1 REST简介"></a>5.1 REST简介</h3><ul><li><p>&#x3D;&#x3D;REST&#x3D;&#x3D;（Representational State Transfer），表现形式状态转换,它是一种软件架构&#x3D;&#x3D;风格&#x3D;&#x3D;</p><p>当我们想表示一个网络资源的时候，可以使用两种方式:</p><ul><li>传统风格资源描述形式<ul><li><code>http://localhost/user/getById?id=1</code> 查询id为1的用户信息</li><li><code>http://localhost/user/saveUser</code> 保存用户信息</li></ul></li><li>REST风格描述形式<ul><li><code>http://localhost/user/1</code> </li><li><code>http://localhost/user</code></li></ul></li></ul></li></ul><p>传统方式一般是一个请求url对应一种操作，这样做不仅麻烦，也不安全，因为会程序的人读取了你的请求url地址，就大概知道该url实现的是一个什么样的操作。</p><p>查看REST风格的描述，你会发现请求地址变的简单了，并且光看请求URL并不是很能猜出来该URL的具体功能</p><p>所以REST的优点有:</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul><p>但是我们的问题也随之而来了，一个相同的url地址即可以是新增也可以是修改或者查询，那么到底我们该如何区分该请求到底是什么操作呢?</p><ul><li>按照REST风格访问资源时使用&#x3D;&#x3D;行为动作&#x3D;&#x3D;区分对资源进行了何种操作<ul><li><code>http://localhost/users</code>查询全部用户信息 GET（查询）</li><li><code>http://localhost/users/1</code>  查询指定用户信息 GET（查询）</li><li><code>http://localhost/users</code>    添加用户信息    POST（新增&#x2F;保存）</li><li><code>http://localhost/users</code>    修改用户信息    PUT（修改&#x2F;更新）</li><li><code>http://localhost/users/1</code>  删除用户信息    DELETE（删除）</li></ul></li></ul><p>请求的方式比较多，但是比较常用的就4种，分别是<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>DELETE</code>。</p><p>按照不同的请求方式代表不同的操作类型。</p><ul><li>发送GET请求是用来做查询</li><li>发送POST请求是用来做新增</li><li>发送PUT请求是用来做修改</li><li>发送DELETE请求是用来做删除</li></ul><p>但是&#x3D;&#x3D;注意&#x3D;&#x3D;:</p><ul><li>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范<ul><li>REST提供了对应的架构方式，按照这种架构设计项目可以降低开发的复杂性，提高系统的可伸缩性</li><li>REST中规定GET&#x2F;POST&#x2F;PUT&#x2F;DELETE针对的是查询&#x2F;新增&#x2F;修改&#x2F;删除，但是我们如果非要用GET请求做删除，这点在程序上运行是可以实现的</li><li>但是如果绝大多数人都遵循这种风格，你写的代码让别人读起来就有点莫名其妙了。</li></ul></li><li>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如:users、books、accounts……</li></ul><p>清楚了什么是REST风格后，我们后期会经常提到一个概念叫<code>RESTful</code>，那什么又是RESTful呢?</p><ul><li>根据REST风格对资源进行访问称为&#x3D;&#x3D;RESTful&#x3D;&#x3D;。</li></ul><p>后期我们在进行开发的过程中，大多是都是遵从REST风格来访问我们的后台服务，所以可以说咱们以后都是基于RESTful来进行开发的。</p><h3 id="5-2-RESTful入门案例"><a href="#5-2-RESTful入门案例" class="headerlink" title="5.2 RESTful入门案例"></a>5.2 RESTful入门案例</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1 环境准备"></a>5.2.1 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_06_rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写模型类User和Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">     <span class="comment">//getter...setter...toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写UserController和BookController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user update...&quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getById&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630503741455.png" alt="1630503741455"></p><h4 id="5-2-2-思路分析"><a href="#5-2-2-思路分析" class="headerlink" title="5.2.2 思路分析"></a>5.2.2 思路分析</h4><blockquote><p>需求:将之前的增删改查替换成RESTful的开发方式。</p><p>1.之前不同的请求有不同的路径,现在要将其修改为统一的请求路径</p><p> 修改前: 新增: &#x2F;save ,修改: &#x2F;update,删除 &#x2F;delete…</p><p> 修改后: 增删改查: &#x2F;users</p><p>2.根据GET查询、POST新增、PUT修改、DELETE删除对方法的请求方式进行限定</p><p>3.发送请求的过程中如何设置请求参数?</p></blockquote><h4 id="5-2-3-修改RESTful风格"><a href="#5-2-3-修改RESTful风格" class="headerlink" title="5.2.3 修改RESTful风格"></a>5.2.3 修改RESTful风格</h4><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将请求路径更改为<code>/users</code></p><ul><li>访问该方法使用 POST: <code>http://localhost/users</code></li></ul></li><li><p>使用method属性限定该方法的访问方式为<code>POST</code></p><ul><li><p>如果发送的不是POST请求，比如发送GET请求，则会报错</p><p><img src="/../images/2024/12/1217/mvc1/1630505392070.png" alt="1630505392070"></p></li></ul></li></ul><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将请求路径更改为<code>/users</code><ul><li>访问该方法使用 DELETE: <code>http://localhost/users</code></li></ul></li></ul><p>访问成功，但是删除方法没有携带所要删除数据的id,所以针对RESTful的开发，如何携带数据参数?</p><h6 id="传递路径参数"><a href="#传递路径参数" class="headerlink" title="传递路径参数"></a>传递路径参数</h6><p>前端发送请求的时候使用:<code>http://localhost/users/1</code>,路径中的<code>1</code>就是我们想要传递的参数。</p><p>后端获取参数，需要做如下修改:</p><ul><li>修改@RequestMapping的value属性，将其中修改为<code>/users/&#123;id&#125;</code>，目的是和路径匹配</li><li>在方法的形参前添加@PathVariable注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考如下两个问题:</strong></p><p>(1)如果方法形参的名称和路径<code>&#123;&#125;</code>中的值不一致，该怎么办?</p><p><img src="/../images/2024/12/1217/mvc1/1630506231379.png" alt="1630506231379"></p><p>(2)如果有多个参数需要传递该如何编写?</p><p>前端发送请求的时候使用:<code>http://localhost/users/1/tom</code>,路径中的<code>1</code>和<code>tom</code>就是我们想要传递的两个参数。</p><p>后端获取参数，需要做如下修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;/&#123;name&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id+<span class="string">&quot;,&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user update...&quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将请求路径更改为<code>/users</code></p><ul><li>访问该方法使用 PUT: <code>http://localhost/users</code></li></ul></li><li><p>访问并携带参数:</p><p><img src="/../images/2024/12/1217/mvc1/1630506507096.png" alt="1630506507096"></p></li></ul><h5 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将请求路径更改为<code>/users</code></p><ul><li>访问该方法使用 GET: <code>http://localhost/users/666</code></li></ul><h5 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将请求路径更改为<code>/users</code></p><ul><li>访问该方法使用 GET: <code>http://localhost/users</code></li></ul><p><strong>小结</strong></p><p>RESTful入门案例，我们需要学习的内容如下:</p><p>(1)设定Http请求动作(动词)</p><p>@RequestMapping(value&#x3D;””,&#x3D;&#x3D;method&#x3D;&#x3D; &#x3D; RequestMethod.&#x3D;&#x3D;POST|GET|PUT|DELETE&#x3D;&#x3D;)</p><p>(2)设定请求参数(路径变量)</p><p>@RequestMapping(value&#x3D;”&#x2F;users&#x2F;&#x3D;&#x3D;{id}&#x3D;&#x3D;”,method &#x3D; RequestMethod.DELETE)</p><p>@ReponseBody</p><p>public String delete(&#x3D;&#x3D;@PathVariable&#x3D;&#x3D; Integer &#x3D;&#x3D;id&#x3D;&#x3D;){</p><p>}</p><h4 id="知识点1：-PathVariable"><a href="#知识点1：-PathVariable" class="headerlink" title="知识点1：@PathVariable"></a>知识点1：@PathVariable</h4><table><thead><tr><th>名称</th><th>@PathVariable</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;形参注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</td></tr></tbody></table><p>关于接收参数，我们学过三个注解<code>@RequestBody</code>、<code>@RequestParam</code>、<code>@PathVariable</code>,这三个注解之间的区别和应用分别是什么?</p><ul><li>区别<ul><li>@RequestParam用于接收url地址传参或表单传参</li><li>@RequestBody用于接收json数据</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul></li><li>应用<ul><li>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul></li></ul><h3 id="5-3-RESTful快速开发"><a href="#5-3-RESTful快速开发" class="headerlink" title="5.3 RESTful快速开发"></a>5.3 RESTful快速开发</h3><p>做完了RESTful的开发，你会发现&#x3D;&#x3D;好麻烦&#x3D;&#x3D;，麻烦在哪?</p><p><img src="/../images/2024/12/1217/mvc1/1630507339724.png" alt="1630507339724"></p><p>问题1：每个方法的@RequestMapping注解中都定义了访问路径&#x2F;books，重复性太高。</p><p>问题2：每个方法的@RequestMapping注解中都要使用method属性定义请求方式，重复性太高。</p><p>问题3：每个方法响应json都需要加上@ResponseBody注解，重复性太高。</p><p>对于上面所提的这三个问题，具体该如何解决?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//@Controller + ReponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于刚才的问题，我们都有对应的解决方案：</p><p>问题1：每个方法的@RequestMapping注解中都定义了访问路径&#x2F;books，重复性太高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将@RequestMapping提到类上面，用来定义所有方法共同的访问路径。</span><br></pre></td></tr></table></figure><p>问题2：每个方法的@RequestMapping注解中都要使用method属性定义请求方式，重复性太高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用@GetMapping  @PostMapping  @PutMapping  @DeleteMapping代替</span><br></pre></td></tr></table></figure><p>问题3：每个方法响应json都需要加上@ResponseBody注解，重复性太高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.将ResponseBody提到类上面，让所有的方法都有@ResponseBody的功能</span><br><span class="line">2.使用@RestController注解替换@Controller与@ResponseBody注解，简化书写</span><br></pre></td></tr></table></figure><h4 id="知识点1：-RestController"><a href="#知识点1：-RestController" class="headerlink" title="知识点1：@RestController"></a>知识点1：@RestController</h4><table><thead><tr><th>名称</th><th>@RestController</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;类注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>基于SpringMVC的RESTful开发控制器类定义上方</td></tr><tr><td>作用</td><td>设置当前控制器类为RESTful风格，<br/>等同于@Controller与@ResponseBody两个注解组合功能</td></tr></tbody></table><h4 id="知识点2：-GetMapping-PostMapping-PutMapping-DeleteMapping"><a href="#知识点2：-GetMapping-PostMapping-PutMapping-DeleteMapping" class="headerlink" title="知识点2：@GetMapping @PostMapping @PutMapping @DeleteMapping"></a>知识点2：@GetMapping @PostMapping @PutMapping @DeleteMapping</h4><table><thead><tr><th>名称</th><th>@GetMapping @PostMapping @PutMapping @DeleteMapping</th></tr></thead><tbody><tr><td>类型</td><td>&#x3D;&#x3D;方法注解&#x3D;&#x3D;</td></tr><tr><td>位置</td><td>基于SpringMVC的RESTful开发控制器方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，<br/>例如@GetMapping对应GET请求</td></tr><tr><td>相关属性</td><td>value（默认）：请求访问路径</td></tr></tbody></table><h3 id="5-4-RESTful案例"><a href="#5-4-RESTful案例" class="headerlink" title="5.4 RESTful案例"></a>5.4 RESTful案例</h3><h4 id="5-4-1-需求分析"><a href="#5-4-1-需求分析" class="headerlink" title="5.4.1 需求分析"></a>5.4.1 需求分析</h4><p>需求一:图片列表查询，从后台返回数据，将数据展示在页面上</p><p><img src="/../images/2024/12/1217/mvc1/1630508310063.png" alt="1630508310063"></p><p>需求二:新增图片，将新增图书的数据传递到后台，并在控制台打印</p><p><img src="/../images/2024/12/1217/mvc1/1630508367105.png" alt="1630508367105"></p><p>**说明:**此次案例的重点是在SpringMVC中如何使用RESTful实现前后台交互，所以本案例并没有和数据库进行交互，所有数据使用<code>假</code>数据来完成开发。</p><p>步骤分析:</p><blockquote><p>1.搭建项目导入jar包</p><p>2.编写Controller类，提供两个方法，一个用来做列表查询，一个用来做新增</p><p>3.在方法上使用RESTful进行路径设置</p><p>4.完成请求、参数的接收和结果的响应</p><p>5.使用PostMan进行测试</p><p>6.将前端页面拷贝到项目中</p><p>7.页面发送ajax请求</p><p>8.完成页面数据的展示</p></blockquote><h4 id="5-4-2-环境准备"><a href="#5-4-2-环境准备" class="headerlink" title="5.4.2 环境准备"></a>5.4.2 环境准备</h4><ul><li><p>创建一个Web的Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_07_rest_case<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建对应的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写模型类Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//setter...getter...toString略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写BookController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1217/mvc1/1630508864017.png" alt="1630508864017"></p><h4 id="5-4-2-后台接口开发"><a href="#5-4-2-后台接口开发" class="headerlink" title="5.4.2 后台接口开发"></a>5.4.2 后台接口开发</h4><h5 id="步骤1-编写Controller类并使用RESTful进行配置"><a href="#步骤1-编写Controller类并使用RESTful进行配置" class="headerlink" title="步骤1:编写Controller类并使用RESTful进行配置"></a>步骤1:编写Controller类并使用RESTful进行配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save ==&gt; &quot;</span>+ book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save success&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll is running ...&quot;</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book1.setType(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">        book1.setName(<span class="string">&quot;SpringMVC入门教程&quot;</span>);</span><br><span class="line">        book1.setDescription(<span class="string">&quot;小试牛刀&quot;</span>);</span><br><span class="line">        bookList.add(book1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book2.setType(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">        book2.setName(<span class="string">&quot;SpringMVC实战教程&quot;</span>);</span><br><span class="line">        book2.setDescription(<span class="string">&quot;一代宗师&quot;</span>);</span><br><span class="line">        bookList.add(book2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book3.setType(<span class="string">&quot;计算机丛书&quot;</span>);</span><br><span class="line">        book3.setName(<span class="string">&quot;SpringMVC实战教程进阶&quot;</span>);</span><br><span class="line">        book3.setDescription(<span class="string">&quot;一代宗师呕心创作&quot;</span>);</span><br><span class="line">        bookList.add(book3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2：使用PostMan进行测试"><a href="#步骤2：使用PostMan进行测试" class="headerlink" title="步骤2：使用PostMan进行测试"></a>步骤2：使用PostMan进行测试</h5><p>测试新增</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;计算机丛书&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;SpringMVC终极开发&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;这是一本好书&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1217/mvc1/1630509266954.png" alt="1630509266954"></p><p>测试查询</p><p><img src="/../images/2024/12/1217/mvc1/image-20210805140307371.png"></p><h4 id="5-4-3-页面访问处理"><a href="#5-4-3-页面访问处理" class="headerlink" title="5.4.3 页面访问处理"></a>5.4.3 页面访问处理</h4><p>SpringMVC拦截了静态资源，根据&#x2F;pages&#x2F;books.html去controller找对应的方法，找不到所以会报404的错误。</p><p>SpringMVC为什么会拦截静态资源呢?</p><p><img src="/../images/2024/12/1217/mvc1/1630510397429.png" alt="1630510397429"></p><ul><li>SpringMVC需要将静态资源进行放行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">//设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//当访问/pages/????时候，从/pages目录下查找内容</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>该配置类是在config目录下，SpringMVC扫描的是controller包，所以该配置类还未生效，要想生效需要将SpringMvcConfig配置类进行修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础-上</title>
      <link href="/2024/12/16/React%E5%9F%BA%E7%A1%80-%E4%B8%8A/"/>
      <url>/2024/12/16/React%E5%9F%BA%E7%A1%80-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h1><p>React由Meta公司开发，是一个用于 构建Web和原生交互界面的库<br><img src="/../images/2024/12/1216/01.png" alt="image.png"></p><h1 id="开发环境创建"><a href="#开发环境创建" class="headerlink" title="开发环境创建"></a>开发环境创建</h1><p>create-react-app是一个快速创建React开发环境的工具，底层由Webpack构件，封装了配置细节，开箱即用<br>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-basic</span><br></pre></td></tr></table></figure><ol><li>npx -  Node.js工具命令，查找并执行后续的包命令</li><li>create-react-app - 核心包（固定写法），用于创建React项目</li><li>react-basic  React项目的名称（可以自定义）<br>:::warning<br>创建React项目的更多方式<br><a href="https://zh-hans.react.dev/learn/start-a-new-react-project">https://zh-hans.react.dev/learn/start-a-new-react-project</a><br>:::</li></ol><h1 id="JSX基础"><a href="#JSX基础" class="headerlink" title="JSX基础"></a>JSX基础</h1><h2 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="什么是JSX"></a>什么是JSX</h2><blockquote><p>概念：JSX是JavaScript和XMl(HTML)的缩写，表示在JS代码中编写HTML模版结构，它是React中构建UI的方式</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;message&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优势：</p><ol><li>HTML的声明式模版写法</li><li>JavaScript的可编程能力</li></ol><h2 id="JSX的本质"><a href="#JSX的本质" class="headerlink" title="JSX的本质"></a>JSX的本质</h2><blockquote><p>JSX并不是标准的JS语法，它是 JS的语法扩展，浏览器本身不能识别，需要通过解析工具做解析之后才能在浏览器中使用</p></blockquote><p><img src="/../images/2024/12/1216/03.png" alt="image.png"></p><h2 id="JSX高频场景-JS表达式"><a href="#JSX高频场景-JS表达式" class="headerlink" title="JSX高频场景-JS表达式"></a>JSX高频场景-JS表达式</h2><blockquote><p>在JSX中可以通过 <code>大括号语法&#123;&#125;</code> 识别JavaScript中的表达式，比如常见的变量、函数调用、方法调用等等</p></blockquote><ol><li>使用引号传递字符串</li><li>使用JS变量</li><li>函数调用和方法调用</li><li>使用JavaScript对象<br>:::warning<br>注意：if语句、switch语句、变量声明不属于表达式，不能出现在{}中<br>:::<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;this is message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 字符串识别 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;&#x27;this is str&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 变量识别 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;message&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 变量识别 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;message&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 函数调用 渲染为函数的返回值 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;getAge()&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSX高频场景-列表渲染"><a href="#JSX高频场景-列表渲染" class="headerlink" title="JSX高频场景-列表渲染"></a>JSX高频场景-列表渲染</h2><p><img src="/../images/2024/12/1216/04.png" alt="image.png"></p><blockquote><p>在JSX中可以使用原生js种的<code>map方法</code> 实现列表渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1001</span>, <span class="attr">name</span>:<span class="string">&#x27;Vue&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1002</span>, <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1003</span>, <span class="attr">name</span>: <span class="string">&#x27;Angular&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map(item=&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSX高频场景-条件渲染"><a href="#JSX高频场景-条件渲染" class="headerlink" title="JSX高频场景-条件渲染"></a>JSX高频场景-条件渲染</h2><p><img src="/../images/2024/12/1216/05.png" alt="image.png"></p><blockquote><p>在React中，可以通过逻辑与运算符&amp;&amp;、三元表达式(?:) 实现基础的条件渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;flag &amp;&amp; <span class="tag">&lt;<span class="name">span</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;loading ? <span class="tag">&lt;<span class="name">span</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span>:<span class="tag">&lt;<span class="name">span</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSX高频场景-复杂条件渲染"><a href="#JSX高频场景-复杂条件渲染" class="headerlink" title="JSX高频场景-复杂条件渲染"></a>JSX高频场景-复杂条件渲染</h2><p><img src="/../images/2024/12/1216/06.png" alt="image.png"></p><blockquote><p>需求：列表中需要根据文章的状态适配<br>解决方案：自定义函数 + 判断语句</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="number">1</span>  <span class="comment">// 0|1|3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArticleJSX</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>无图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>单图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;<span class="title function_">else</span>(<span class="params">type === <span class="number">3</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>三图模式模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; getArticleJSX() &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React的事件绑定"><a href="#React的事件绑定" class="headerlink" title="React的事件绑定"></a>React的事件绑定</h1><h2 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h2><blockquote><p>React中的事件绑定，通过语法 <code>on + 事件名称 = &#123; 事件处理程序 &#125;</code>，整体上遵循驼峰命名法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button按钮点击了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用事件参数"><a href="#使用事件参数" class="headerlink" title="使用事件参数"></a>使用事件参数</h2><blockquote><p>在事件回调函数中设置形参e即可</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params">e</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button按钮点击了&#x27;</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传递自定义参数"><a href="#传递自定义参数" class="headerlink" title="传递自定义参数"></a>传递自定义参数</h2><blockquote><p>语法：事件绑定的位置改造成箭头函数的写法，在执行clickHandler实际处理业务函数的时候传递实参</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params">name</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button按钮点击了&#x27;</span>, name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>clickHandler(&#x27;jack&#x27;)&#125;&gt;click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::warning<br>注意：不能直接写函数调用，这里事件绑定需要一个函数引用<br>:::</p><h2 id="同时传递事件对象和自定义参数"><a href="#同时传递事件对象和自定义参数" class="headerlink" title="同时传递事件对象和自定义参数"></a>同时传递事件对象和自定义参数</h2><blockquote><p>语法：在事件绑定的位置传递事件实参e和自定义参数，clickHandler中声明形参，注意顺序对应</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params">name,e</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button按钮点击了&#x27;</span>, name,e)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span>=&gt;</span>clickHandler(&#x27;jack&#x27;,e)&#125;&gt;click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React组件基础使用"><a href="#React组件基础使用" class="headerlink" title="React组件基础使用"></a>React组件基础使用</h1><h2 id="组件是什么"><a href="#组件是什么" class="headerlink" title="组件是什么"></a>组件是什么</h2><p>概念：一个组件就是一个用户界面的一部分，它可以有自己的逻辑和外观，组件之间可以互相嵌套，也可以服用多次<br><img src="/../images/2024/12/1216/07.png" alt="image.png"></p><h2 id="组件基础使用"><a href="#组件基础使用" class="headerlink" title="组件基础使用"></a>组件基础使用</h2><blockquote><p>在React中，一个组件就是<strong>首字母大写的函数</strong>，内部存放了组件的逻辑和视图UI, 渲染组件只需要把组件当成标签书写即可</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 自闭和 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 成对标签 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组件状态管理-useState"><a href="#组件状态管理-useState" class="headerlink" title="组件状态管理-useState"></a>组件状态管理-useState</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><blockquote><p>useState 是一个 React Hook（函数），它允许我们向组件添加一个<code>状态变量</code>, 从而控制影响组件的渲染结果<br>和普通JS变量不同的是，状态变量一旦发生变化组件的视图UI也会跟着变化（数据驱动视图）</p></blockquote><p><img src="/../images/2024/12/1216/08.png" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [ count, setCount ] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setCount(count+1)&#125;&gt;&#123; count &#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态的修改规则"><a href="#状态的修改规则" class="headerlink" title="状态的修改规则"></a>状态的修改规则</h2><blockquote><p>在React中状态被认为是只读的，我们应该始终<code>替换它而不是修改它</code>, 直接修改状态不能引发视图更新</p></blockquote><p><img src="/../images/2024/12/1216/09.png" alt="image.png"></p><h2 id="修改对象状态"><a href="#修改对象状态" class="headerlink" title="修改对象状态"></a>修改对象状态</h2><blockquote><p>对于对象类型的状态变量，应该始终给set方法一个<code>全新的对象</code> 来进行修改</p></blockquote><p><img src="/../images/2024/12/1216/10.png" alt="image.png"></p><h1 id="组件的基础样式处理"><a href="#组件的基础样式处理" class="headerlink" title="组件的基础样式处理"></a>组件的基础样式处理</h1><blockquote><p>React组件基础的样式控制有俩种方式，行内样式和class类名控制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123; <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;<span class="variable language_">this</span> is div&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B站评论案例"><a href="#B站评论案例" class="headerlink" title="B站评论案例"></a>B站评论案例</h1><p><img src="/../images/2024/12/1216/11.png" alt="image.png"></p><ol><li>渲染评论列表</li><li>删除评论实现</li><li>渲染导航Tab和高亮实现</li><li>评论列表排序功能实现</li></ol><h2 id="基础模版"><a href="#基础模版" class="headerlink" title="基础模版"></a>基础模版</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;./images/bozai.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论列表的渲染和操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 根据状态渲染评论列表</span></span><br><span class="line"><span class="comment"> * 2. 删除评论</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 评论列表数据</span></span><br><span class="line"><span class="keyword">const</span> defaultList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 评论id</span></span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">// 用户信息</span></span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;13258165&#x27;</span>,</span><br><span class="line">      <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 评论内容</span></span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;哎哟，不错哦&#x27;</span>,</span><br><span class="line">    <span class="comment">// 评论时间</span></span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;10-18 08:15&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">88</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;36080105&#x27;</span>,</span><br><span class="line">      <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;许嵩&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;我寻你千百度 日出到迟暮&#x27;</span>,</span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;11-13 11:29&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">88</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;30009257&#x27;</span>,</span><br><span class="line">      avatar,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;黑马前端&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;学前端就来黑马&#x27;</span>,</span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;10-19 09:00&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">66</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 当前登录用户信息</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="comment">// 用户id</span></span><br><span class="line">  <span class="attr">uid</span>: <span class="string">&#x27;30009257&#x27;</span>,</span><br><span class="line">  <span class="comment">// 用户头像</span></span><br><span class="line">  avatar,</span><br><span class="line">  <span class="comment">// 用户昵称</span></span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;黑马前端&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导航 Tab 的渲染和操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 渲染导航 Tab 和高亮</span></span><br><span class="line"><span class="comment"> * 2. 评论列表排序</span></span><br><span class="line"><span class="comment"> *  最热 =&gt; 喜欢数量降序</span></span><br><span class="line"><span class="comment"> *  最新 =&gt; 创建时间降序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导航 Tab 数组</span></span><br><span class="line"><span class="keyword">const</span> tabs = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;hot&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;最热&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;time&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;最新&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 导航 Tab */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-navigation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;nav-title-text&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 评论数量 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;total-reply&quot;</span>&gt;</span>&#123;10&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-sort&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 高亮类名： active */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#x27;nav-item&#x27;</span>&gt;</span>最新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#x27;nav-item&#x27;</span>&gt;</span>最热<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 发表评论 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box-normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 当前用户头像 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar-img&quot;</span> <span class="attr">src</span>=<span class="string">&#123;avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;用户头像&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 评论框 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&quot;reply-box-textarea&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&quot;发一条友善的评论&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 发布按钮 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-send&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;send-text&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 评论列表 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 评论项 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 头像 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;root-reply-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">className</span>=<span class="string">&quot;bili-avatar-img&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 用户名 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 评论内容 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;root-reply&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-content&quot;</span>&gt;</span>这是一条评论回复<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/* 评论时间 */&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-time&quot;</span>&gt;</span>&#123;&#x27;2023-11-11&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/* 评论数量 */&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-time&quot;</span>&gt;</span>点赞数:&#123;100&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;delete-btn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    删除</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.reply-navigation</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">22px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.nav-bar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav-title</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">114px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.nav-title-text</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#18191c</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.total-reply</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">36px</span> <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: normal;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav-sort</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#00aeec</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;<span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">          <span class="attribute">display</span>: inline-block;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">          <span class="attribute">margin</span>: -<span class="number">1px</span> <span class="number">12px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.nav-item</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#18191c</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.reply-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-normal</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.reply-box-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.reply-box-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.reply-box-textarea</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#181931</span>;</span><br><span class="line">      <span class="attribute">font-family</span>: inherit;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f1f2f3</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f1f2f3</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">outline</span>: none;</span><br><span class="line">      <span class="attribute">resize</span>: none;</span><br><span class="line">      <span class="attribute">transition</span>: <span class="number">0.2s</span>;</span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;<span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="number">#c9ccd0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.reply-box-send</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">86px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.2s</span>;</span><br><span class="line"></span><br><span class="line">    &amp; <span class="selector-class">.send-text</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#00aeec</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bili-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bili-avatar-img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">image-rendering</span>: -webkit-optimize-contrast;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 评论列表</span><br><span class="line"><span class="selector-class">.reply-list</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.reply-item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">22px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">80px</span>;</span><br><span class="line">  <span class="selector-class">.root-reply-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#e3e5e7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.user-info</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.user-name</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#61666d</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.root-reply</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#181931</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="selector-class">.reply-info</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.reply-time</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">76px</span>;</span><br><span class="line">          <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.reply-like</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">          <span class="attribute">margin-right</span>: <span class="number">19px</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.like-icon</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#9499a0</span>;</span><br><span class="line">            <span class="attribute">background-position</span>: -<span class="number">153px</span> -<span class="number">25px</span>;</span><br><span class="line">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">              <span class="attribute">background-position</span>: -<span class="number">218px</span> -<span class="number">25px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-class">.like-icon</span><span class="selector-class">.liked</span> &#123;</span><br><span class="line">            <span class="attribute">background-position</span>: -<span class="number">154px</span> -<span class="number">89px</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.reply-dislike</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">          <span class="attribute">margin-right</span>: <span class="number">19px</span>;</span><br><span class="line">          <span class="selector-class">.dislike-icon</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">background-position</span>: -<span class="number">153px</span> -<span class="number">153px</span>;</span><br><span class="line">            &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">              <span class="attribute">background-position</span>: -<span class="number">217px</span> -<span class="number">153px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-class">.dislike-icon</span><span class="selector-class">.disliked</span> &#123;</span><br><span class="line">            <span class="attribute">background-position</span>: -<span class="number">154px</span> -<span class="number">217px</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.delete-btn</span> &#123;</span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">          &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#00aeec</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.reply-none</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#99a2aa</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成版本"><a href="#完成版本" class="headerlink" title="完成版本"></a>完成版本</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;./images/bozai.png&#x27;</span></span><br><span class="line"><span class="keyword">import</span> orderBy <span class="keyword">from</span> <span class="string">&#x27;lodash/orderBy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论列表的渲染和操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 根据状态渲染评论列表</span></span><br><span class="line"><span class="comment"> * 2. 删除评论</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 评论列表数据</span></span><br><span class="line"><span class="keyword">const</span> defaultList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 评论id</span></span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">// 用户信息</span></span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;13258165&#x27;</span>,</span><br><span class="line">      <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 评论内容</span></span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;哎哟，不错哦&#x27;</span>,</span><br><span class="line">    <span class="comment">// 评论时间</span></span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;10-18 08:15&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">88</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;36080105&#x27;</span>,</span><br><span class="line">      <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;许嵩&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;我寻你千百度 日出到迟暮&#x27;</span>,</span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;11-13 11:29&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">88</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rpid</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">uid</span>: <span class="string">&#x27;30009257&#x27;</span>,</span><br><span class="line">      avatar,</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;黑马前端&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;学前端就来黑马&#x27;</span>,</span><br><span class="line">    <span class="attr">ctime</span>: <span class="string">&#x27;10-19 09:00&#x27;</span>,</span><br><span class="line">    <span class="attr">like</span>: <span class="number">66</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 当前登录用户信息</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="comment">// 用户id</span></span><br><span class="line">  <span class="attr">uid</span>: <span class="string">&#x27;30009257&#x27;</span>,</span><br><span class="line">  <span class="comment">// 用户头像</span></span><br><span class="line">  avatar,</span><br><span class="line">  <span class="comment">// 用户昵称</span></span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;黑马前端&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导航 Tab 的渲染和操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 渲染导航 Tab 和高亮</span></span><br><span class="line"><span class="comment"> * 2. 评论列表排序</span></span><br><span class="line"><span class="comment"> *  最热 =&gt; 喜欢数量降序</span></span><br><span class="line"><span class="comment"> *  最新 =&gt; 创建时间降序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导航 Tab 数组</span></span><br><span class="line"><span class="keyword">const</span> tabs = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;hot&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;最热&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;time&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;最新&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 导航 Tab 高亮的状态</span></span><br><span class="line">  <span class="keyword">const</span> [activeTab, setActiveTab] = <span class="title function_">useState</span>(<span class="string">&#x27;hot&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>(defaultList)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除评论</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onDelete</span> = rpid =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果要删除数组中的元素，需要调用 filter 方法，并且一定要调用 setList 才能更新状态</span></span><br><span class="line">    <span class="title function_">setList</span>(list.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">rpid</span> !== rpid))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tab 高亮切换</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onToggle</span> = type =&gt; &#123;</span><br><span class="line">    <span class="title function_">setActiveTab</span>(type)</span><br><span class="line">    <span class="keyword">let</span> newList</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;time&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 按照时间降序排序</span></span><br><span class="line">      <span class="comment">// orderBy(对谁进行排序, 按照谁来排, 顺序)</span></span><br><span class="line">      newList = <span class="title function_">orderBy</span>(list, <span class="string">&#x27;ctime&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 按照喜欢数量降序排序</span></span><br><span class="line">      newList = <span class="title function_">orderBy</span>(list, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setList</span>(newList)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 导航 Tab */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-navigation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;nav-title-text&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 评论数量 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;total-reply&quot;</span>&gt;</span>&#123;list.length&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-sort&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 高亮类名： active */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;tabs.map(item =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">key</span>=<span class="string">&#123;item.type&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">className</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">item.type</span> === <span class="string">activeTab</span> ? &#x27;<span class="attr">nav-item</span> <span class="attr">active</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">nav-item</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onToggle(item.type)&#125;</span></span><br><span class="line"><span class="language-xml">                &gt;</span></span><br><span class="line"><span class="language-xml">                  &#123;item.text&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 发表评论 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box-normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 当前用户头像 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar-img&quot;</span> <span class="attr">src</span>=<span class="string">&#123;avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;用户头像&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 评论框 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&quot;reply-box-textarea&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&quot;发一条友善的评论&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 发布按钮 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-box-send&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;send-text&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 评论列表 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 评论项 */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;list.map(item =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.rpid&#125;</span> <span class="attr">className</span>=<span class="string">&quot;reply-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 头像 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;root-reply-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bili-avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">className</span>=<span class="string">&quot;bili-avatar-img&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">src</span>=<span class="string">&#123;item.user.avatar&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    /&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/* 用户名 */&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span>&#123;item.user.uname&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/* 评论内容 */&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;root-reply&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-content&quot;</span>&gt;</span>&#123;item.content&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;reply-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      &#123;/* 评论时间 */&#125;</span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-time&quot;</span>&gt;</span>&#123;item.ctime&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      &#123;/* 评论数量 */&#125;</span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;reply-time&quot;</span>&gt;</span>点赞数:&#123;item.like&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      &#123;user.uid === item.user.uid &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">className</span>=<span class="string">&quot;delete-btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onDelete(item.rpid)&#125;</span></span><br><span class="line"><span class="language-xml">                        &gt;</span></span><br><span class="line"><span class="language-xml">                          删除</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      )&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring3-AOP 和 Spring事务</title>
      <link href="/2024/12/14/Spring3-AOP%20%E5%92%8C%20Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/12/14/Spring3-AOP%20%E5%92%8C%20Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring3-AOP-和-Spring事务"><a href="#Spring3-AOP-和-Spring事务" class="headerlink" title="Spring3-AOP 和 Spring事务"></a>Spring3-AOP 和 Spring事务</h2><p><strong>目标</strong></p><blockquote><ul><li>理解并掌握AOP相关概念</li><li>能够说出AOP的工作流程</li><li>能运用AOP相关知识完成对应的案例编写</li><li>重点掌握Spring的声明式事务管理</li></ul></blockquote><h2 id="1，AOP简介"><a href="#1，AOP简介" class="headerlink" title="1，AOP简介"></a>1，AOP简介</h2><h3 id="1-1-什么是AOP"><a href="#1-1-什么是AOP" class="headerlink" title="1.1 什么是AOP?"></a>1.1 什么是AOP?</h3><ul><li>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构。<ul><li>OOP(Object Oriented Programming)面向对象编程</li></ul></li></ul><p>我们都知道OOP是一种编程思想，那么AOP也是一种编程思想，编程思想主要的内容就是指导程序员该如何编写程序，所以它们两个是不同的<code>编程范式</code>。</p><h3 id="1-2-AOP作用"><a href="#1-2-AOP作用" class="headerlink" title="1.2 AOP作用"></a>1.2 AOP作用</h3><ul><li>作用:在不惊动原始设计的基础上为其进行功能增强，前面咱们有技术就可以实现这样的功能即代理模式。</li></ul><p>前面咱们有技术就可以实现这样的功能即<code>代理模式</code>。</p><h3 id="1-3-AOP核心概念"><a href="#1-3-AOP核心概念" class="headerlink" title="1.3 AOP核心概念"></a>1.3 AOP核心概念</h3><p>为了能更好的理解AOP的相关概念，我们准备了一个环境，整个环境的内容我们暂时可以不用关注，最主要的类为:<code>BookDaoImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//记录程序当前执行执行（开始时间）</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//业务执行万次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录程序当前执行时间（结束时间）</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算时间差</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalTime</span> <span class="operator">=</span> endTime-startTime;</span><br><span class="line">        <span class="comment">//输出信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao delete ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao select ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630144353462.png" alt="1630144353462"></p><p>(1)前面一直在强调，Spring的AOP是对一个类的方法在不进行任何修改的前提下实现增强。对于上面的案例中BookServiceImpl中有<code>save</code>,<code>update</code>,<code>delete</code>和<code>select</code>方法,这些方法我们给起了一个名字叫 <strong>连接点</strong></p><p>(2)在BookServiceImpl的四个方法中，<code>update</code>和<code>delete</code>只有打印没有计算万次执行消耗时间，但是在运行的时候已经有该功能，那也就是说<code>update</code>和<code>delete</code>方法都已经被增强，所以对于需要增强的方法我们给起了一个名字叫 <strong>切入点</strong></p><p>(3)执行BookServiceImpl的update和delete方法的时候都被添加了一个计算万次执行消耗时间的功能，将这个功能抽取到一个方法中，换句话说就是存放共性功能的方法，我们给起了个名字叫 <strong>通知</strong></p><p>(4)通知是要增强的内容，会有多个，切入点是需要被增强的方法，也会有多个，那哪个切入点需要添加哪个通知，就需要提前将它们之间的关系描述清楚，那么对于通知和切入点之间的关系描述，我们给起了个名字叫 <strong>切面</strong></p><p>(5)通知是一个方法，方法不能独立存在需要被写在一个类中，这个类我们也给起了个名字叫 <strong>通知类</strong></p><p>至此AOP中的核心概念就已经介绍完了，总结下:</p><ul><li>连接点(JoinPoint)：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<ul><li>在SpringAOP中，理解为方法的执行</li></ul></li><li>切入点(Pointcut):匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法<ul><li>一个具体的方法:如com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li><li>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</li></ul></li><li>通知(Advice):在切入点处执行的操作，也就是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>通知类：定义通知的类</li><li>切面(Aspect):描述通知与切入点的对应关系。</li></ul><h2 id="2，AOP入门案例"><a href="#2，AOP入门案例" class="headerlink" title="2，AOP入门案例"></a>2，AOP入门案例</h2><h3 id="2-1-AOP实现步骤"><a href="#2-1-AOP实现步骤" class="headerlink" title="2.1 AOP实现步骤"></a>2.1 AOP实现步骤</h3><h4 id="步骤1-添加依赖"><a href="#步骤1-添加依赖" class="headerlink" title="步骤1:添加依赖"></a>步骤1:添加依赖</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630146885493.png" alt="1630146885493"></p><ul><li>因为<code>spring-context</code>中已经导入了<code>spring-aop</code>,所以不需要再单独导入<code>spring-aop</code></li><li>导入AspectJ的jar包,AspectJ是AOP思想的一个具体实现，Spring有自己的AOP实现，但是相比于AspectJ来说比较麻烦，所以我们直接采用Spring整合ApsectJ的方式进行AOP开发。</li></ul><h4 id="步骤2-定义接口与实现类"><a href="#步骤2-定义接口与实现类" class="headerlink" title="步骤2:定义接口与实现类"></a>步骤2:定义接口与实现类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">环境准备的时候，BookDaoImpl已经准备好，不需要做任何修改</span><br></pre></td></tr></table></figure><h4 id="步骤3-定义通知类和通知"><a href="#步骤3-定义通知类和通知" class="headerlink" title="步骤3:定义通知类和通知"></a>步骤3:定义通知类和通知</h4><p>通知就是将共性功能抽取出来后形成的方法，共性功能指的就是当前系统时间的打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类名和方法名没有要求，可以任意。</p><h4 id="步骤4-定义切入点"><a href="#步骤4-定义切入点" class="headerlink" title="步骤4:定义切入点"></a>步骤4:定义切入点</h4><p>BookDaoImpl中有两个方法，分别是save和update，我们要增强的是update方法，该如何定义呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>切入点定义依托一个不具有实际意义的方法进行，即无参数、无返回值、方法体无实际逻辑。</li><li>execution及后面编写的内容，后面会有章节专门去学习。</li></ul><h4 id="步骤5-制作切面"><a href="#步骤5-制作切面" class="headerlink" title="步骤5:制作切面"></a>步骤5:制作切面</h4><p>切面是用来描述通知和切入点之间的关系，如何进行关系的绑定?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行&#x3D;&#x3D;位置&#x3D;&#x3D;</p><p><img src="/../images/2024/12/1214/spring3/1630148447689.png" alt="1630148447689"></p><p><strong>说明:</strong>@Before翻译过来是之前，也就是说通知会在切入点方法执行之前执行，除此之前还有其他四种类型，后面会讲。</p><h4 id="步骤6-将通知类配给容器并标识其为切面类"><a href="#步骤6-将通知类配给容器并标识其为切面类" class="headerlink" title="步骤6:将通知类配给容器并标识其为切面类"></a>步骤6:将通知类配给容器并标识其为切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-开启注解格式AOP功能"><a href="#步骤7-开启注解格式AOP功能" class="headerlink" title="步骤7:开启注解格式AOP功能"></a>步骤7:开启注解格式AOP功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到在执行update方法之前打印了系统时间戳，说明对原始方法进行了增强，AOP编程成功。</p><p><img src="/../images/2024/12/1214/spring3/1630147945888.png" alt="1630147945888"></p><h3 id="知识点1：-EnableAspectJAutoProxy"><a href="#知识点1：-EnableAspectJAutoProxy" class="headerlink" title="知识点1：@EnableAspectJAutoProxy"></a>知识点1：@EnableAspectJAutoProxy</h3><table><thead><tr><th>名称</th><th>@EnableAspectJAutoProxy</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>配置类定义上方</td></tr><tr><td>作用</td><td>开启注解格式AOP功能</td></tr></tbody></table><h3 id="知识点2：-Aspect"><a href="#知识点2：-Aspect" class="headerlink" title="知识点2：@Aspect"></a>知识点2：@Aspect</h3><table><thead><tr><th>名称</th><th>@Aspect</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>切面类定义上方</td></tr><tr><td>作用</td><td>设置当前类为AOP切面类</td></tr></tbody></table><h3 id="知识点3：-Pointcut"><a href="#知识点3：-Pointcut" class="headerlink" title="知识点3：@Pointcut"></a>知识点3：@Pointcut</h3><table><thead><tr><th>名称</th><th>@Pointcut</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>切入点方法定义上方</td></tr><tr><td>作用</td><td>设置切入点方法</td></tr><tr><td>属性</td><td>value（默认）：切入点表达式</td></tr></tbody></table><h3 id="知识点4：-Before"><a href="#知识点4：-Before" class="headerlink" title="知识点4：@Before"></a>知识点4：@Before</h3><table><thead><tr><th>名称</th><th>@Before</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</td></tr></tbody></table><h2 id="3，AOP工作流程"><a href="#3，AOP工作流程" class="headerlink" title="3，AOP工作流程"></a>3，AOP工作流程</h2><p>AOP的入门案例已经完成，对于刚才案例的执行过程，我们就得来分析分析，这一节我们主要讲解两个知识点:<code>AOP工作流程</code>和<code>AOP核心概念</code>。其中核心概念是对前面核心概念的补充。</p><h3 id="3-1-AOP工作流程"><a href="#3-1-AOP工作流程" class="headerlink" title="3.1 AOP工作流程"></a>3.1 AOP工作流程</h3><p>由于AOP是基于Spring容器管理的bean做的增强，所以整个工作过程需要从Spring加载bean说起:</p><h4 id="流程1-Spring容器启动"><a href="#流程1-Spring容器启动" class="headerlink" title="流程1:Spring容器启动"></a>流程1:Spring容器启动</h4><ul><li>容器启动就需要去加载bean,哪些类需要被加载呢?</li><li>需要被增强的类，如:BookServiceImpl</li><li>通知类，如:MyAdvice</li><li>注意此时bean对象还没有创建成功</li></ul><h4 id="流程2-读取所有切面配置中的切入点"><a href="#流程2-读取所有切面配置中的切入点" class="headerlink" title="流程2:读取所有切面配置中的切入点"></a>流程2:读取所有切面配置中的切入点</h4><p><img src="/../images/2024/12/1214/spring3/1630151682428.png" alt="1630151682428"></p><ul><li>上面这个例子中有两个切入点的配置，但是第一个<code>ptx()</code>并没有被使用，所以不会被读取。</li></ul><h4 id="流程3-初始化bean，"><a href="#流程3-初始化bean，" class="headerlink" title="流程3:初始化bean，"></a>流程3:初始化bean，</h4><p>判定bean对应的类中的方法是否匹配到任意切入点</p><ul><li><p>注意第1步在容器启动的时候，bean对象还没有被创建成功。</p></li><li><p>要被实例化bean对象的类中的方法和切入点进行匹配</p><p><img src="/../images/2024/12/1214/spring3/1630152538083.png" alt="1630152538083"></p><ul><li>匹配失败，创建原始对象,如<code>UserDao</code><ul><li>匹配失败说明不需要增强，直接调用原始对象的方法即可。</li></ul></li><li>匹配成功，创建原始对象（&#x3D;&#x3D;目标对象&#x3D;&#x3D;）的&#x3D;&#x3D;代理&#x3D;&#x3D;对象,如:<code>BookDao</code><ul><li>匹配成功说明需要对其进行增强</li><li>对哪个类做增强，这个类对应的对象就叫做目标对象</li><li>因为要对目标对象进行功能增强，而采用的技术是动态代理，所以会为其创建一个代理对象</li><li>最终运行的是代理对象的方法，在该方法中会对原始方法进行功能增强</li></ul></li></ul></li></ul><h4 id="流程4-获取bean执行方法"><a href="#流程4-获取bean执行方法" class="headerlink" title="流程4:获取bean执行方法"></a>流程4:获取bean执行方法</h4><ul><li>获取的bean是原始对象时，调用方法并执行，完成操作</li><li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul><h3 id="3-2-AOP核心概念"><a href="#3-2-AOP核心概念" class="headerlink" title="3.2 AOP核心概念"></a>3.2 AOP核心概念</h3><p>在上面介绍AOP的工作流程中，我们提到了两个核心概念，分别是:</p><ul><li>目标对象(Target)：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理(Proxy)：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><p>上面这两个概念比较抽象，简单来说，</p><p>目标对象就是要增强的类[如:BookServiceImpl类]对应的对象，也叫原始对象，不能说它不能运行，只能说它在运行的过程中对于要增强的内容是缺失的。</p><p>SpringAOP是在不改变原有设计(代码)的前提下对其进行增强的，它的底层采用的是代理模式实现的，所以要对原始对象进行增强，就需要对原始对象创建代理对象，在代理对象中的方法把通知[如:MyAdvice中的method方法]内容加进去，就实现了增强,这就是我们所说的代理(Proxy)。</p><h2 id="4，AOP配置管理"><a href="#4，AOP配置管理" class="headerlink" title="4，AOP配置管理"></a>4，AOP配置管理</h2><h3 id="4-1-AOP切入点表达式"><a href="#4-1-AOP切入点表达式" class="headerlink" title="4.1 AOP切入点表达式"></a>4.1 AOP切入点表达式</h3><h4 id="4-1-1-语法格式"><a href="#4-1-1-语法格式" class="headerlink" title="4.1.1 语法格式"></a>4.1.1 语法格式</h4><p>首先我们先要明确两个概念:</p><ul><li>切入点:要进行增强的方法</li><li>切入点表达式:要进行增强的方法的描述方式</li></ul><p>对于切入点的描述，我们其实是有两中方式的，先来看下前面的例子</p><p><img src="/../images/2024/12/1214/spring3/1630156172790.png" alt="1630156172790"></p><p>描述方式一：执行com.itheima.dao包下的BookDao接口中的无参数update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.BookDao.update())</span><br></pre></td></tr></table></figure><p>描述方式二：执行com.itheima.dao.impl包下的BookDaoImpl类中的无参数update方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(void com.itheima.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure><p>因为调用接口方法的时候最终运行的还是其实现类的方法，所以上面两种描述方式都是可以的。</p><p>对于切入点表达式的语法为:</p><ul><li>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名(参数) 异常名）</li></ul><p>对于这个格式，我们不需要硬记，通过一个例子，理解它:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(public User com.itheima.service.UserService.findById(int))</span><br></pre></td></tr></table></figure><ul><li>execution：动作关键字，描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>public:访问修饰符,还可以是public，private等，可以省略</li><li>User：返回值，写返回值类型</li><li>com.itheima.service：包名，多级包使用点连接</li><li>UserService:类&#x2F;接口名称</li><li>findById：方法名</li><li>int:参数，直接写参数的类型，多个类型用逗号隔开</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><p>切入点表达式就是要找到需要增强的方法，所以它就是对一个具体方法的描述，但是方法的定义会有很多，所以如果每一个方法对应一个切入点表达式，想想这块就会觉得将来编写起来会比较麻烦，有没有更简单的方式呢?</p><p>就需要用到下面所学习的通配符。</p><h4 id="4-1-2-通配符"><a href="#4-1-2-通配符" class="headerlink" title="4.1.2 通配符"></a>4.1.2 通配符</h4><p>我们使用通配符描述切入点，主要的目的就是简化之前的配置，具体都有哪些通配符可以使用?</p><ul><li><p><code>*</code>:单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（public * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure><p>匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></li><li><p><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（public User com..UserService.findById(..))</span><br></pre></td></tr></table></figure><p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p></li><li><p><code>+</code>：专用于匹配子类类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><p>这个使用率较低，描述子类的，咱们做JavaEE开发，继承机会就一次，使用都很慎重，所以很少用它。*Service+，表示所有以Service结尾的接口的子类。</p></li></ul><p>接下来，我们把案例中使用到的切入点表达式来分析下:</p><p><img src="/../images/2024/12/1214/spring3/1630163744963.png" alt="1630163744963"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.BookDao.update())</span><br><span class="line">匹配接口，能匹配到</span><br><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">匹配实现类，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">返回值任意，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update(*))</span><br><span class="line">返回值任意，但是update方法必须要有一个参数，无法匹配，要想匹配需要在update接口和实现类添加参数</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意包三层包下的任意类的update方法，匹配到的是实现类，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意两层包下的任意类的update方法，匹配到的是接口，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> *..update())</span><br><span class="line">返回值为<span class="keyword">void</span>，方法名是update的任意包下的任意类，能匹配</span><br><span class="line">execution(* *..*(..))</span><br><span class="line">匹配项目中任意类的任意方法，能匹配，但是不建议使用这种方式，影响范围广</span><br><span class="line">execution(* *..u*(..))</span><br><span class="line">匹配项目中任意包任意类下只要以u开头的方法，update方法能满足，能匹配</span><br><span class="line">execution(* *..*e(..))</span><br><span class="line">匹配项目中任意包任意类下只要以e结尾的方法，update和save方法能满足，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com..*())</span><br><span class="line">返回值为<span class="keyword">void</span>，com包下的任意包任意类任意方法，能匹配，*代表的是方法</span><br><span class="line">execution(* com.itheima.*.*Service.find*(..))</span><br><span class="line">将项目中所有业务层方法的以find开头的方法匹配</span><br><span class="line">execution(* com.itheima.*.*Service.save*(..))</span><br><span class="line">将项目中所有业务层方法的以save开头的方法匹配</span><br></pre></td></tr></table></figure><p>后面两种更符合我们平常切入点表达式的编写规则</p><h4 id="4-1-3-书写技巧"><a href="#4-1-3-书写技巧" class="headerlink" title="4.1.3 书写技巧"></a>4.1.3 书写技巧</h4><p>对于切入点表达式的编写其实是很灵活的，那么在编写的时候，有没有什么好的技巧让我们用用:</p><ul><li>所有代码按照标准规范开发，否则以下技巧全部失效</li><li>描述切入点通**&#x3D;&#x3D;常描述接口&#x3D;&#x3D;**，而不描述实现类,如果描述到实现类，就出现紧耦合了</li><li>访问控制修饰符针对接口开发均采用public描述（**&#x3D;&#x3D;可省略访问控制修饰符描述&#x3D;&#x3D;**）</li><li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</li><li>**&#x3D;&#x3D;包名&#x3D;&#x3D;<strong>书写</strong>&#x3D;&#x3D;尽量不使用..匹配&#x3D;&#x3D;**，效率过低，常用*做单个包描述匹配，或精准匹配</li><li>**&#x3D;&#x3D;接口名&#x2F;类名&#x3D;&#x3D;<strong>书写名称与模块相关的</strong>&#x3D;&#x3D;采用*匹配&#x3D;&#x3D;**，例如UserService书写成*Service，绑定业务层接口名</li><li>**&#x3D;&#x3D;方法名&#x3D;&#x3D;<strong>书写以</strong>&#x3D;&#x3D;动词&#x3D;&#x3D;<strong>进行</strong>&#x3D;&#x3D;精准匹配&#x3D;&#x3D;*<em>，名词采用</em>匹配，例如getById书写成getBy*,selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常**&#x3D;&#x3D;不使用异常&#x3D;&#x3D;<strong>作为</strong>&#x3D;&#x3D;匹配&#x3D;&#x3D;**规则</li></ul><h3 id="4-2-AOP通知类型"><a href="#4-2-AOP通知类型" class="headerlink" title="4.2 AOP通知类型"></a>4.2 AOP通知类型</h3><h4 id="4-2-1-类型介绍"><a href="#4-2-1-类型介绍" class="headerlink" title="4.2.1 类型介绍"></a>4.2.1 类型介绍</h4><p>我们先来回顾下AOP通知:</p><ul><li>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</li></ul><p>通知具体要添加到切入点的哪里?</p><p>共提供了5种通知类型:</p><ul><li>前置通知</li><li>后置通知</li><li><strong>&#x3D;&#x3D;环绕通知(重点)&#x3D;&#x3D;</strong></li><li>返回后通知(了解)</li><li>抛出异常后通知(了解)</li></ul><p>为了更好的理解这几种通知类型，我们来看一张图</p><p><img src="/../images/2024/12/1214/spring3/1630166147697.png" alt="1630166147697"></p><p>(1)前置通知，追加功能到方法执行前,类似于在代码1或者代码2添加内容</p><p>(2)后置通知,追加功能到方法执行后,不管方法执行的过程中有没有抛出异常都会执行，类似于在代码5添加内容</p><p>(3)返回后通知,追加功能到方法执行后，只有方法正常执行结束后才进行,类似于在代码3添加内容，如果方法执行抛出异常，返回后通知将不会被添加</p><p>(4)抛出异常后通知,追加功能到方法抛出异常后，只有方法执行出异常才进行,类似于在代码4添加内容，只有方法抛出异常后才会被添加</p><p>(5)环绕通知,环绕通知功能比较强大，它可以追加功能到方法执行的前后，这也是比较常用的方式，它可以实现其他四种通知类型的功能，具体是如何实现的，需要我们往下学习。</p><h4 id="4-2-2-环境准备"><a href="#4-2-2-环境准备" class="headerlink" title="4.2.2 环境准备"></a>4.2.2 环境准备</h4><ul><li><p>创建一个Maven项目</p></li><li><p>pom.xml添加Spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加BookDao和BookDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao select is running ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Spring的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写App运行类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1214/spring3/1630167385146.png" alt="1630167385146"></p><h4 id="4-2-3-通知类型的使用"><a href="#4-2-3-通知类型的使用" class="headerlink" title="4.2.3 通知类型的使用"></a>4.2.3 通知类型的使用</h4><h5 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h5><p>修改MyAdvice,在before方法上添加<code>@Before注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="comment">//此处也可以写成 @Before(&quot;MyAdvice.pt()&quot;),不建议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630167805723.png" alt="1630167805723"></p><h5 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630167887131.png" alt="1630167887131"></p><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630167969051.png" alt="1630167969051"></p><p>运行结果中，通知的内容打印出来，但是原始方法的内容却没有被执行。</p><p>因为环绕通知需要在原始方法的前后进行增强，所以环绕通知就必须要能对原始操作进行调用，具体如何实现?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><p>(1)原始方法有返回值的处理</p><ul><li>修改MyAdvice,对BookDao中的select方法添加环绕通知，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改App类，调用select方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> bookDao.select();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后会报错，错误内容为:</p><p>Exception in thread “main” org.springframework.aop.AopInvocationException: &#x3D;&#x3D;Null return value from advice does not match primitive return type for: public abstract int com.itheima.dao.BookDao.select()&#x3D;&#x3D;<br>    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:226)<br>    at com.sun.proxy.$Proxy19.select(Unknown Source)<br>    at com.itheima.App.main(App.java:12)</p><p>错误大概的意思是:<code>空的返回不匹配原始方法的int返回</code></p><ul><li>void就是返回Null</li><li>原始方法就是BookDao下的select方法</li></ul><p>所以如果我们使用环绕通知的话，要根据原始方法的返回值来设置环绕通知的返回值，具体解决方案为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>​为什么返回的是Object而不是int的主要原因是Object类型更通用。</p><p>​在环绕通知中是可以对原始方法返回值就行修改的。</p><h5 id="返回后通知"><a href="#返回后通知" class="headerlink" title="返回后通知"></a>返回后通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630169124446.png" alt="1630169124446"></p><p><strong>注意：</strong>返回后通知是需要在原始方法<code>select</code>正常执行后才会被执行，如果<code>select()</code>方法执行的过程中出现了异常，那么返回后通知是不会被执行。后置通知是不管原始方法有没有抛出异常都会被执行。这个案例大家下去可以自己练习验证下。</p><h5 id="异常后通知"><a href="#异常后通知" class="headerlink" title="异常后通知"></a>异常后通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2024/12/1214/spring3/1630169357146.png" alt="1630169357146"></p><p><strong>注意：</strong>异常后通知是需要原始方法抛出异常，可以在<code>select()</code>方法中添加一行代码<code>int i = 1/0</code>即可。如果没有抛异常，异常后通知将不会被执行。</p><p>学习完这5种通知类型，我们来思考下环绕通知是如何实现其他通知类型的功能的?</p><p>因为环绕通知是可以控制原始方法执行的，所以我们把增强的代码写在调用原始方法的不同位置就可以实现不同的通知类型的功能，如:</p><p><img src="/../images/2024/12/1214/spring3/1630170090945.png" alt="1630170090945"></p><p>&#x3D;&#x3D;<strong>环绕通知注意事项</strong>&#x3D;&#x3D;</p><ol><li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，最好设定为Object类型</li><li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void,也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须要处理Throwable异常</li></ol><p>介绍完这么多种通知类型，具体该选哪一种呢?</p><p>我们可以通过一些案例加深下对通知类型的学习。</p><h3 id="4-3-业务层接口执行效率"><a href="#4-3-业务层接口执行效率" class="headerlink" title="4.3 业务层接口执行效率"></a>4.3 业务层接口执行效率</h3><h4 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1 需求分析"></a>4.3.1 需求分析</h4><p>这个需求也比较简单，前面我们在介绍AOP的时候已经演示过:</p><ul><li>需求:任意业务层接口执行均可显示其执行效率（执行时长）</li></ul><p>这个案例的目的是查看每个业务层执行的时间，这样就可以监控出哪个业务比较耗时，将其查找出来方便优化。</p><p>具体实现的思路:</p><p>(1) 开始执行方法之前记录一个时间</p><p>(2) 执行方法</p><p>(3) 执行完方法之后记录一个时间</p><p>(4) 用后一个时间减去前一个时间的差值，就是我们需要的结果。</p><p>所以要在方法执行的前后添加业务，经过分析我们将采用<code>环绕通知</code>。</p><p>**说明:**原始方法如果只执行一次，时间太快，两个时间差可能为0，所以我们要执行万次来计算时间差。</p><h4 id="4-3-2-功能开发"><a href="#4-3-2-功能开发" class="headerlink" title="4.3.2 功能开发"></a>4.3.2 功能开发</h4><h5 id="步骤1-开启SpringAOP的注解功能"><a href="#步骤1-开启SpringAOP的注解功能" class="headerlink" title="步骤1:开启SpringAOP的注解功能"></a>步骤1:开启SpringAOP的注解功能</h5><p>在Spring的主配置文件SpringConfig类中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-创建AOP的通知类"><a href="#步骤2-创建AOP的通知类" class="headerlink" title="步骤2:创建AOP的通知类"></a>步骤2:创建AOP的通知类</h5><ul><li><p>该类要被Spring管理，需要添加@Component</p></li><li><p>要标识该类是一个AOP的切面类，需要添加@Aspect</p></li><li><p>配置切入点表达式，需要添加一个方法，并添加@Pointcut</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-添加环绕通知"><a href="#步骤3-添加环绕通知" class="headerlink" title="步骤3:添加环绕通知"></a>步骤3:添加环绕通知</h5><p>在runSpeed()方法上添加@Around</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**目前并没有做任何增强</p><h5 id="步骤4-完成核心业务，记录万次执行的时间"><a href="#步骤4-完成核心业务，记录万次执行的时间" class="headerlink" title="步骤4:完成核心业务，记录万次执行的时间"></a>步骤4:完成核心业务，记录万次执行的时间</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层接口万次执行时间: &quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-运行单元测试类"><a href="#步骤5-运行单元测试类" class="headerlink" title="步骤5:运行单元测试类"></a>步骤5:运行单元测试类</h5><p><img src="/../images/2024/12/1214/spring3/1630215355776.png" alt="1630215355776"></p><p>**注意:**因为程序每次执行的时长是不一样的，所以运行多次最终的结果是不一样的。</p><h5 id="步骤6-程序优化"><a href="#步骤6-程序优化" class="headerlink" title="步骤6:程序优化"></a>步骤6:程序优化</h5><p>目前程序所面临的问题是，多个方法一起执行测试的时候，控制台都打印的是:</p><p><code>业务层接口万次执行时间:xxxms</code></p><p>我们没有办法区分到底是哪个接口的哪个方法执行的具体时间，具体如何优化?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//配置业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Around(&quot;ProjectAdvice.servicePt()&quot;) 可以简写为下面的方式</span></span><br><span class="line">    <span class="meta">@Around(&quot;servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        <span class="comment">//获取执行签名信息</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">        <span class="comment">//通过签名获取执行操作名称(接口名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">//通过签名获取执行操作名称(方法名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;万次执行：&quot;</span>+ className+<span class="string">&quot;.&quot;</span>+methodName+<span class="string">&quot;----&gt;&quot;</span> +(end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤7-运行单元测试类"><a href="#步骤7-运行单元测试类" class="headerlink" title="步骤7:运行单元测试类"></a>步骤7:运行单元测试类</h5><p><img src="/../images/2024/12/1214/spring3/1630215743444.png" alt="1630215743444"></p><p>&#x3D;&#x3D;补充说明&#x3D;&#x3D;</p><p>当前测试的接口执行效率仅仅是一个理论值，并不是一次完整的执行过程。</p><p>这块只是通过该案例把AOP的使用进行了学习，具体的实际值是有很多因素共同决定的。</p><h3 id="4-4-AOP通知获取数据"><a href="#4-4-AOP通知获取数据" class="headerlink" title="4.4 AOP通知获取数据"></a>4.4 AOP通知获取数据</h3><p>目前我们写AOP仅仅是在原始方法前后追加一些操作，接下来我们要说说AOP中数据相关的内容，我们将从<code>获取参数</code>、<code>获取返回值</code>和<code>获取异常</code>三个方面来研究切入点的相关信息。</p><p>前面我们介绍通知类型的时候总共讲了五种，那么对于这五种类型都会有参数，返回值和异常吗?</p><p>我们先来一个个分析下:</p><ul><li>获取<strong>切入点方法的参数</strong>，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li><li>获取<strong>切入点方法返回值</strong>，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取<strong>切入点方法运行异常信息</strong>，前置和返回后通知是不会有，后置通知可有可无，所以不做研究<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul><h4 id="4-4-1-获取参数"><a href="#4-4-1-获取参数" class="headerlink" title="4.4.1 获取参数"></a>4.4.1 获取参数</h4><h5 id="非环绕通知获取方式"><a href="#非环绕通知获取方式" class="headerlink" title="非环绕通知获取方式"></a>非环绕通知获取方式</h5><p>在方法上添加JoinPoint,通过JoinPoint来获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> </span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行App类，可以获取如下内容，说明参数100已经被获取</p><p><img src="/../images/2024/12/1214/spring3/1630233291929.png" alt="1630233291929"></p><p><strong>思考:方法的参数只有一个，为什么获取的是一个数组?</strong></p><p>因为参数的个数是不固定的，所以使用数组更通配些。</p><p>如果将参数改成两个会是什么效果呢?</p><p>(1)修改BookDao接口和BookDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)修改App类，调用方法传入多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bookDao.findName(<span class="number">100</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)运行App，查看结果,说明两个参数都已经被获取到</p><p><img src="/../images/2024/12/1214/spring3/1630233548743.png" alt="1630233548743"></p><p><strong>说明:</strong></p><p>使用JoinPoint的方式获取参数适用于<code>前置</code>、<code>后置</code>、<code>返回后</code>、<code>抛出异常后</code>通知。剩下的大家自行去验证。</p><h5 id="环绕通知获取方式"><a href="#环绕通知获取方式" class="headerlink" title="环绕通知获取方式"></a>环绕通知获取方式</h5><p>环绕通知使用的是ProceedingJoinPoint，因为ProceedingJoinPoint是JoinPoint类的子类，所以对于ProceedingJoinPoint类中应该也会有对应的<code>getArgs()</code>方法，我们去验证下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span><span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行App后查看运行结果，说明ProceedingJoinPoint也是可以通过getArgs()获取参数</p><p><img src="/../images/2024/12/1214/spring3/1630233974310.png" alt="1630233974310"></p><p><strong>注意:</strong></p><ul><li><p>pjp.proceed()方法是有两个构造方法，分别是:</p><p><img src="/../images/2024/12/1214/spring3/1630234756123.png" alt="1630234756123"></p><ul><li><p>调用无参数的proceed，当原始方法有参数，会在调用的过程中自动传入参数</p></li><li><p>所以调用这两个方法的任意一个都可以完成功能</p></li><li><p>但是当需要修改原始方法的参数时，就只能采用带有参数的方法,如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个特性后，我们就可以在环绕通知中对原始方法的参数进行拦截过滤，避免由于参数的问题导致程序无法正确运行，保证代码的健壮性。</p></li></ul></li></ul><h4 id="4-4-2-获取返回值"><a href="#4-4-2-获取返回值" class="headerlink" title="4.4.2 获取返回值"></a>4.4.2 获取返回值</h4><p>对于返回值，只有返回后<code>AfterReturing</code>和环绕<code>Around</code>这两个通知类型可以获取，具体如何获取?</p><h5 id="环绕通知获取返回值"><a href="#环绕通知获取返回值" class="headerlink" title="环绕通知获取返回值"></a>环绕通知获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>ret</code>就是方法的返回值，我们是可以直接获取，不但可以获取，如果需要还可以进行修改。</p><h5 id="返回后通知获取返回值"><a href="#返回后通知获取返回值" class="headerlink" title="返回后通知获取返回值"></a>返回后通知获取返回值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>(1)参数名的问题</p><p><img src="/../images/2024/12/1214/spring3/1630237320870.png" alt="1630237320870"></p><p>(2)afterReturning方法参数类型的问题</p><p>参数类型可以写成String，但是为了能匹配更多的参数类型，建议写成Object类型</p><p>(3)afterReturning方法参数的顺序问题</p><p><img src="/../images/2024/12/1214/spring3/1630237586682.png" alt="1630237586682"></p><h4 id="4-4-3-获取异常"><a href="#4-4-3-获取异常" class="headerlink" title="4.4.3 获取异常"></a>4.4.3 获取异常</h4><p>对于获取抛出的异常，只有抛出异常后<code>AfterThrowing</code>和环绕<code>Around</code>这两个通知类型可以获取，具体如何获取?</p><h5 id="环绕通知获取异常"><a href="#环绕通知获取异常" class="headerlink" title="环绕通知获取异常"></a>环绕通知获取异常</h5><p>这块比较简单，以前我们是抛出异常，现在只需要将异常捕获，就可以获取到原始方法的异常信息了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        System.out.println(Arrays.toString(args));</span><br><span class="line">        args[<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ret = pjp.proceed(args);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Throwable throwable)&#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在catch方法中就可以获取到异常，至于获取到异常以后该如何处理，这个就和你的业务需求有关了。</p><h5 id="抛出异常后通知获取异常"><a href="#抛出异常后通知获取异常" class="headerlink" title="抛出异常后通知获取异常"></a>抛出异常后通知获取异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>+t);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其他的略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何让原始方法抛出异常，方式有很多，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findName</span><span class="params">(<span class="type">int</span> id,String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p><img src="/../images/2024/12/1214/spring3/1630239939043.png" alt="1630239939043"></p><p>运行App后，查看控制台，就能看的异常信息被打印到控制台</p><p><img src="/../images/2024/12/1214/spring3/1630239997560.png" alt="1630239997560"></p><p>至此，AOP通知如何获取数据就已经讲解完了，数据中包含<code>参数</code>、<code>返回值</code>、<code>异常(了解)</code>。</p><h2 id="5，AOP总结"><a href="#5，AOP总结" class="headerlink" title="5，AOP总结"></a>5，AOP总结</h2><p>AOP的知识就已经讲解完了，接下来对于AOP的知识进行一个总结:</p><h3 id="5-1-AOP的核心概念"><a href="#5-1-AOP的核心概念" class="headerlink" title="5.1 AOP的核心概念"></a>5.1 AOP的核心概念</h3><ul><li>概念：AOP(Aspect Oriented Programming)面向切面编程，一种编程范式</li><li>作用：在不惊动原始设计的基础上为方法进行功能&#x3D;&#x3D;增强&#x3D;&#x3D;</li><li>核心概念<ul><li>代理（Proxy）：SpringAOP的核心本质是采用代理模式实现的</li><li>连接点（JoinPoint）：在SpringAOP中，理解为任意方法的执行</li><li>切入点（Pointcut）：匹配连接点的式子，也是具有共性功能的方法描述</li><li>通知（Advice）：若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li><li>切面（Aspect）：描述通知与切入点的对应关系</li><li>目标对象（Target）：被代理的原始对象成为目标对象</li></ul></li></ul><h3 id="5-2-切入点表达式"><a href="#5-2-切入点表达式" class="headerlink" title="5.2 切入点表达式"></a>5.2 切入点表达式</h3><ul><li><p>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名（参数）异常名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.itheima.service.*Service.*(..))</span><br></pre></td></tr></table></figure></li><li><p>切入点表达式描述通配符：</p><ul><li>作用：用于快速描述，范围描述</li><li><code>*</code>：匹配任意符号（常用）</li><li><code>..</code> ：匹配多个连续的任意符号（常用）</li><li><code>+</code>：匹配子类类型</li></ul></li><li><p>切入点表达式书写技巧</p><p>1.按&#x3D;&#x3D;标准规范&#x3D;&#x3D;开发<br>2.查询操作的返回值建议使用*匹配<br>3.减少使用..的形式描述包<br>4.&#x3D;&#x3D;对接口进行描述&#x3D;&#x3D;，使用*表示模块名，例如UserService的匹配描述为*Service<br>5.方法名书写保留动词，例如get，使用*表示名词，例如getById匹配描述为getBy*<br>6.参数根据实际情况灵活调整</p></li></ul><h3 id="5-3-五种通知类型"><a href="#5-3-五种通知类型" class="headerlink" title="5.3 五种通知类型"></a>5.3 五种通知类型</h3><ul><li>前置通知</li><li>后置通知</li><li>环绕通知（重点）<ul><li>环绕通知依赖形参ProceedingJoinPoint才能实现对原始方法的调用</li><li>环绕通知可以隔离原始方法的调用执行</li><li>环绕通知返回值设置为Object类型</li><li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li></ul></li><li>返回后通知</li><li>抛出异常后通知</li></ul><h3 id="5-4-通知中获取参数"><a href="#5-4-通知中获取参数" class="headerlink" title="5.4 通知中获取参数"></a>5.4 通知中获取参数</h3><ul><li>获取切入点方法的参数，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li><li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul><h2 id="6，AOP事务管理"><a href="#6，AOP事务管理" class="headerlink" title="6，AOP事务管理"></a>6，AOP事务管理</h2><h3 id="6-1-Spring事务简介"><a href="#6-1-Spring事务简介" class="headerlink" title="6.1 Spring事务简介"></a>6.1 Spring事务简介</h3><h4 id="6-1-1-相关概念介绍"><a href="#6-1-1-相关概念介绍" class="headerlink" title="6.1.1 相关概念介绍"></a>6.1.1 相关概念介绍</h4><ul><li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li><li>Spring事务作用：在数据层或**&#x3D;&#x3D;业务层&#x3D;&#x3D;**保障一系列的数据库操作同成功同失败</li></ul><p>数据层有事务我们可以理解，为什么业务层也需要处理事务呢?</p><p>举个简单的例子，</p><ul><li>转账业务会有两次数据层的调用，一次是加钱一次是减钱</li><li>把事务放在数据层，加钱和减钱就有两个事务</li><li>没办法保证加钱和减钱同时成功或者同时失败</li><li>这个时候就需要将事务放在业务层进行处理。</li></ul><p>Spring为了管理事务，提供了一个平台事务管理器<code>PlatformTransactionManager</code></p><p><img src="/../images/2024/12/1214/spring3/1630243651541.png" alt="1630243651541"></p><p>commit是用来提交事务，rollback是用来回滚事务。</p><p>PlatformTransactionManager只是一个接口，Spring还为其提供了一个具体的实现:</p><p><img src="/../images/2024/12/1214/spring3/1630243993380.png" alt="1630243993380"></p><p>从名称上可以看出，我们只需要给它一个DataSource对象，它就可以帮你去在业务层管理事务。其内部采用的是JDBC的事务。所以说如果你持久层采用的是JDBC相关的技术，就可以采用这个事务管理器来管理你的事务。而Mybatis内部采用的就是JDBC的事务，所以后期我们Spring整合Mybatis就采用的这个DataSourceTransactionManager事务管理器。</p><h4 id="6-1-2-转账案例-需求分析"><a href="#6-1-2-转账案例-需求分析" class="headerlink" title="6.1.2 转账案例-需求分析"></a>6.1.2 转账案例-需求分析</h4><p>接下来通过一个案例来学习下Spring是如何来管理事务的。</p><p>先来分析下需求:</p><p>需求: 实现任意两个账户间转账操作</p><p>需求微缩: A账户减钱，B账户加钱</p><p>为了实现上述的业务需求，我们可以按照下面步骤来实现下:<br>①：数据层提供基础操作，指定账户减钱（outMoney），指定账户加钱（inMoney）</p><p>②：业务层提供转账操作（transfer），调用减钱与加钱的操作</p><p>③：提供2个账号和操作金额执行转账操作</p><p>④：基于Spring整合MyBatis环境搭建上述操作</p><h4 id="6-1-3-转账案例-环境搭建"><a href="#6-1-3-转账案例-环境搭建" class="headerlink" title="6.1.3 转账案例-环境搭建"></a>6.1.3 转账案例-环境搭建</h4><h5 id="步骤1-准备数据库表"><a href="#步骤1-准备数据库表" class="headerlink" title="步骤1:准备数据库表"></a>步骤1:准备数据库表</h5><p>之前我们在整合Mybatis的时候已经创建了这个表,可以直接使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h5 id="步骤2-创建项目导入jar包"><a href="#步骤2-创建项目导入jar包" class="headerlink" title="步骤2:创建项目导入jar包"></a>步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-根据表创建模型类"><a href="#步骤3-根据表创建模型类" class="headerlink" title="步骤3:根据表创建模型类"></a>步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建Dao接口"><a href="#步骤4-创建Dao接口" class="headerlink" title="步骤4:创建Dao接口"></a>步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-创建Service接口和实现类"><a href="#步骤5-创建Service接口和实现类" class="headerlink" title="步骤5:创建Service接口和实现类"></a>步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6-添加jdbc-properties文件"><a href="#步骤6-添加jdbc-properties文件" class="headerlink" title="步骤6:添加jdbc.properties文件"></a>步骤6:添加jdbc.properties文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h5 id="步骤7-创建JdbcConfig配置类"><a href="#步骤7-创建JdbcConfig配置类" class="headerlink" title="步骤7:创建JdbcConfig配置类"></a>步骤7:创建JdbcConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤8-创建MybatisConfig配置类"><a href="#步骤8-创建MybatisConfig配置类" class="headerlink" title="步骤8:创建MybatisConfig配置类"></a>步骤8:创建MybatisConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9-创建SpringConfig配置类"><a href="#步骤9-创建SpringConfig配置类" class="headerlink" title="步骤9:创建SpringConfig配置类"></a>步骤9:创建SpringConfig配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤10-编写测试类"><a href="#步骤10-编写测试类" class="headerlink" title="步骤10:编写测试类"></a>步骤10:编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jerry&quot;</span>,<span class="number">100D</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终创建好的项目结构如下:</p><p><img src="/../images/2024/12/1214/spring3/1630247220645.png" alt="1630247220645"></p><h4 id="6-1-4-事务管理"><a href="#6-1-4-事务管理" class="headerlink" title="6.1.4 事务管理"></a>6.1.4 事务管理</h4><p>上述环境，运行单元测试类，会执行转账操作，<code>Tom</code>的账户会减少100，<code>Jerry</code>的账户会加100。</p><p>这是正常情况下的运行结果，但是如果在转账的过程中出现了异常，如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就模拟了转账过程中出现异常的情况，正确的操作应该是转账出问题了，<code>Tom</code>应该还是900，<code>Jerry</code>应该还是1100，但是真正运行后会发现，并没有像我们想象的那样，<code>Tom</code>账户为800而<code>Jerry</code>还是1100,100块钱凭空消息了，银行乐疯了。如果把转账换个顺序，银行就该哭了。</p><p>不管哪种情况，都是不允许出现的，对刚才的结果我们做一个分析:</p><p>①：程序正常执行时，账户金额A减B加，没有问题</p><p>②：程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</p><p>当程序出问题后，我们需要让事务进行回滚，而且这个事务应该是加在业务层上，而Spring的事务管理就是用来解决这类问题的。</p><p>Spring事务管理具体的实现步骤为:</p><h5 id="步骤1-在需要被事务管理的方法上添加注解"><a href="#步骤1-在需要被事务管理的方法上添加注解" class="headerlink" title="步骤1:在需要被事务管理的方法上添加注解"></a>步骤1:在需要被事务管理的方法上添加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>@Transactional可以写在接口类上、接口方法上、实现类上和实现类方法上</p><ul><li>写在接口类上，该接口的所有实现类的所有方法都会有事务</li><li>写在接口方法上，该接口的所有实现类的该方法都会有事务</li><li>写在实现类上，该类中的所有方法都会有事务</li><li>写在实现类方法上，该方法上有事务</li><li>&#x3D;&#x3D;建议写在实现类或实现类的方法上&#x3D;&#x3D;</li></ul><h5 id="步骤2-在JdbcConfig类中配置事务管理器"><a href="#步骤2-在JdbcConfig类中配置事务管理器" class="headerlink" title="步骤2:在JdbcConfig类中配置事务管理器"></a>步骤2:在JdbcConfig类中配置事务管理器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置事务管理器，mybatis使用的是jdbc事务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>事务管理器要根据使用技术进行选择，Mybatis框架使用的是JDBC事务，可以直接使用<code>DataSourceTransactionManager</code></p><h5 id="步骤3：开启事务注解"><a href="#步骤3：开启事务注解" class="headerlink" title="步骤3：开启事务注解"></a>步骤3：开启事务注解</h5><p>在SpringConfig的配置类中开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class</span></span><br><span class="line"><span class="meta">//开启注解式事务驱动</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">public class SpringConfig &#123;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h5 id="步骤4-运行测试类"><a href="#步骤4-运行测试类" class="headerlink" title="步骤4:运行测试类"></a>步骤4:运行测试类</h5><p>会发现在转换的业务出现错误后，事务就可以控制回顾，保证数据的正确性。</p><h5 id="知识点1：-EnableTransactionManagement"><a href="#知识点1：-EnableTransactionManagement" class="headerlink" title="知识点1：@EnableTransactionManagement"></a>知识点1：@EnableTransactionManagement</h5><table><thead><tr><th>名称</th><th>@EnableTransactionManagement</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>配置类定义上方</td></tr><tr><td>作用</td><td>设置当前Spring环境中开启注解式事务支持</td></tr></tbody></table><h5 id="知识点2：-Transactional"><a href="#知识点2：-Transactional" class="headerlink" title="知识点2：@Transactional"></a>知识点2：@Transactional</h5><table><thead><tr><th>名称</th><th>@Transactional</th></tr></thead><tbody><tr><td>类型</td><td>接口注解  类注解  方法注解</td></tr><tr><td>位置</td><td>业务层接口上方  业务层实现类上方  业务方法上方</td></tr><tr><td>作用</td><td>为当前业务层方法添加事务（如果设置在类或接口上方则类或接口中所有方法均添加事务）</td></tr></tbody></table><h3 id="6-2-Spring事务角色"><a href="#6-2-Spring事务角色" class="headerlink" title="6.2 Spring事务角色"></a>6.2 Spring事务角色</h3><p>这节中我们重点要理解两个概念，分别是<code>事务管理员</code>和<code>事务协调员</code>。</p><ol><li>未开启Spring事务之前:</li></ol><p><img src="/../images/2024/12/1214/spring3/1630248794837.png" alt="1630248794837"></p><ul><li>AccountDao的outMoney因为是修改操作，会开启一个事务T1</li><li>AccountDao的inMoney因为是修改操作，会开启一个事务T2</li><li>AccountService的transfer没有事务，<ul><li>运行过程中如果没有抛出异常，则T1和T2都正常提交，数据正确</li><li>如果在两个方法中间抛出异常，T1因为执行成功提交事务，T2因为抛异常不会被执行</li><li>就会导致数据出现错误</li></ul></li></ul><ol start="2"><li>开启Spring的事务管理后</li></ol><p><img src="/../images/2024/12/1214/spring3/1630249111055.png" alt="1630249111055"></p><ul><li>transfer上添加了@Transactional注解，在该方法上就会有一个事务T</li><li>AccountDao的outMoney方法的事务T1加入到transfer的事务T中</li><li>AccountDao的inMoney方法的事务T2加入到transfer的事务T中</li><li>这样就保证他们在同一个事务中，当业务层中出现异常，整个事务就会回滚，保证数据的准确性。</li></ul><p>通过上面例子的分析，我们就可以得到如下概念:</p><ul><li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>目前的事务管理是基于<code>DataSourceTransactionManager</code>和<code>SqlSessionFactoryBean</code>使用的是同一个数据源。</p><h3 id="6-3-Spring事务属性"><a href="#6-3-Spring事务属性" class="headerlink" title="6.3 Spring事务属性"></a>6.3 Spring事务属性</h3><p>上一节我们介绍了两个概念，事务的管理员和事务的协同员，对于这两个概念具体做什么的，我们待会通过案例来使用下。除了这两个概念，还有就是事务的其他相关配置都有哪些，就是我们接下来要学习的内容。</p><p>在这一节中，我们主要学习三部分内容<code>事务配置</code>、<code>转账业务追加日志</code>、<code>事务传播行为</code>。</p><h4 id="6-3-1-事务配置"><a href="#6-3-1-事务配置" class="headerlink" title="6.3.1 事务配置"></a>6.3.1 事务配置</h4><p><img src="/../images/2024/12/1214/spring3/1630250069844.png" alt="1630250069844"></p><p>上面这些属性都可以在<code>@Transactional</code>注解的参数上进行设置。</p><ul><li><p>readOnly：true只读事务，false读写事务，增删改要设为false,查询设为true。</p></li><li><p>timeout:设置超时时间单位秒，在多长时间之内事务没有提交成功就自动回滚，-1表示不设置超时时间。</p></li><li><p>rollbackFor:当出现指定异常进行事务回滚</p></li><li><p>noRollbackFor:当出现指定异常不进行事务回滚</p><ul><li><p>思考:出现异常事务会自动回滚，这个是我们之前就已经知道的</p></li><li><p>noRollbackFor是设定对于指定的异常不回滚，这个好理解</p></li><li><p>rollbackFor是指定回滚异常，对于异常事务不应该都回滚么，为什么还要指定?</p><ul><li><p>这块需要更正一个知识点，并不是所有的异常都会回滚事务，比如下面的代码就不会回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就不会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出现这个问题的原因是，Spring的事务只会对<code>Error异常</code>和<code>RuntimeException异常</code>及其子类进行事务回顾，其他的异常类型是不会回滚的，对应IOException不符合上述条件所以不回滚</p><ul><li><p>此时就可以使用rollbackFor属性来设置出现IOException异常回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"> <span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>rollbackForClassName等同于rollbackFor,只不过属性为异常的类全名字符串</p></li><li><p>noRollbackForClassName等同于noRollbackFor，只不过属性为异常的类全名字符串</p></li><li><p>isolation设置事务的隔离级别</p><ul><li>DEFAULT   :默认隔离级别, 会采用数据库的隔离级别</li><li>READ_UNCOMMITTED : 读未提交</li><li>READ_COMMITTED : 读已提交</li><li>REPEATABLE_READ : 重复读取</li><li>SERIALIZABLE: 串行化</li></ul></li></ul><p>介绍完上述属性后，还有最后一个事务的传播行为，为了讲解该属性的设置，我们需要完成下面的案例。</p><h4 id="6-3-2-转账业务追加日志案例"><a href="#6-3-2-转账业务追加日志案例" class="headerlink" title="6.3.2 转账业务追加日志案例"></a>6.3.2 转账业务追加日志案例</h4><h5 id="6-3-2-1-需求分析"><a href="#6-3-2-1-需求分析" class="headerlink" title="6.3.2.1 需求分析"></a>6.3.2.1 需求分析</h5><p>在前面的转案例的基础上添加新的需求，完成转账后记录日志。</p><ul><li>需求：实现任意两个账户间转账操作，并对每次转账操作在数据库进行留痕</li><li>需求微缩：A账户减钱，B账户加钱，数据库记录日志</li></ul><p>基于上述的业务需求，我们来分析下该如何实现:</p><p>①：基于转账操作案例添加日志模块，实现数据库中记录日志</p><p>②：业务层转账操作（transfer），调用减钱、加钱与记录日志功能</p><p>需要注意一点就是，我们这个案例的预期效果为:</p><p>&#x3D;&#x3D;无论转账操作是否成功，均进行转账操作的日志留痕&#x3D;&#x3D;</p><h5 id="6-3-2-2-环境准备"><a href="#6-3-2-2-环境准备" class="headerlink" title="6.3.2.2 环境准备"></a>6.3.2.2 环境准备</h5><p>该环境是基于转账环境来完成的，所以环境的准备可以参考<code>6.1.3的环境搭建步骤</code>，在其基础上，我们继续往下写</p><h6 id="步骤1-创建日志表"><a href="#步骤1-创建日志表" class="headerlink" title="步骤1:创建日志表"></a>步骤1:创建日志表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_log(</span><br><span class="line">   id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">   info <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   createDate datetime</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="步骤2-添加LogDao接口"><a href="#步骤2-添加LogDao接口" class="headerlink" title="步骤2:添加LogDao接口"></a>步骤2:添加LogDao接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_log (info,createDate) values(#&#123;info&#125;,now())&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String info)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="步骤3-添加LogService接口与实现类"><a href="#步骤3-添加LogService接口与实现类" class="headerlink" title="步骤3:添加LogService接口与实现类"></a>步骤3:添加LogService接口与实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money )</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span>+out+<span class="string">&quot;到&quot;</span>+in+<span class="string">&quot;,金额：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤4-在转账的业务中添加记录日志"><a href="#步骤4-在转账的业务中添加记录日志" class="headerlink" title="步骤4:在转账的业务中添加记录日志"></a>步骤4:在转账的业务中添加记录日志</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span><span class="keyword">throws</span> IOException ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            accountDao.outMoney(out,money);</span><br><span class="line">            accountDao.inMoney(in,money);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            logService.log(out,in,money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤5-运行程序"><a href="#步骤5-运行程序" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h6><ul><li><p>当程序正常运行，tbl_account表中转账成功，tbl_log表中日志记录成功</p></li><li><p>当转账业务之间出现异常(int i &#x3D;1&#x2F;0),转账失败，tbl_account成功回滚，但是tbl_log表未添加数据</p></li><li><p>这个结果和我们想要的不一样，什么原因?该如何解决?</p></li><li><p>失败原因:日志的记录与转账操作隶属同一个事务，同成功同失败</p></li><li><p>最终效果:无论转账操作是否成功，日志必须保留</p></li></ul><h4 id="6-3-3-事务传播行为"><a href="#6-3-3-事务传播行为" class="headerlink" title="6.3.3 事务传播行为"></a>6.3.3 事务传播行为</h4><p><img src="/../images/2024/12/1214/spring3/1630253779575.png" alt="1630253779575"></p><p>对于上述案例的分析:</p><ul><li>log方法、inMoney方法和outMoney方法都属于增删改，分别有事务T1,T2,T3</li><li>transfer因为加了@Transactional注解，也开启了事务T</li><li>前面我们讲过Spring事务会把T1,T2,T3都加入到事务T中</li><li>所以当转账失败后，所有的事务都回滚，导致日志没有记录下来</li><li>这和我们的需求不符，这个时候我们就想能不能让log方法单独是一个事务呢?</li></ul><p>要想解决这个问题，就需要用到事务传播行为，所谓的事务传播行为指的是:</p><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度。</p><p>具体如何解决，就需要用到之前我们没有说的<code>propagation属性</code>。</p><h5 id="1-修改logService改变事务的传播行为"><a href="#1-修改logService改变事务的传播行为" class="headerlink" title="1.修改logService改变事务的传播行为"></a>1.修改logService改变事务的传播行为</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"><span class="comment">//propagation设置事务属性：传播行为设置为当前操作需要新事务</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money )</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span>+out+<span class="string">&quot;到&quot;</span>+in+<span class="string">&quot;,金额：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，就能实现我们想要的结果，不管转账是否成功，都会记录日志。</p><h5 id="2-事务传播行为的可选值"><a href="#2-事务传播行为的可选值" class="headerlink" title="2.事务传播行为的可选值"></a>2.事务传播行为的可选值</h5><p><img src="/../images/2024/12/1214/spring3/1630254257628.png" alt="1630254257628"></p><p>对于我们开发实际中使用的话，因为默认值需要事务是常态的。根据开发过程选择其他的就可以了，例如案例中需要新事务就需要手工配置。其实入账和出账操作上也有事务，采用的就是默认值。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring2-IOC 和 DI 的注解开发模式</title>
      <link href="/2024/12/14/Spring2-IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/12/14/Spring2-IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring2-IOC-和-DI-的注解开发模式"><a href="#Spring2-IOC-和-DI-的注解开发模式" class="headerlink" title="Spring2-IOC 和 DI 的注解开发模式"></a>Spring2-IOC 和 DI 的注解开发模式</h2><p><strong>目标</strong></p><blockquote><ul><li>掌握IOC&#x2F;DI配置管理第三方bean</li><li>掌握IOC&#x2F;DI的注解开发</li><li>掌握IOC&#x2F;DI注解管理第三方bean</li><li>完成Spring与Mybatis及Junit的整合开发</li></ul></blockquote><h2 id="1，IOC-DI配置管理第三方bean"><a href="#1，IOC-DI配置管理第三方bean" class="headerlink" title="1，IOC&#x2F;DI配置管理第三方bean"></a>1，IOC&#x2F;DI配置管理第三方bean</h2><p>前面所讲的知识点都是基于我们自己写的类，现在如果有需求让我们去管理第三方jar包中的类，该如何管理?</p><h3 id="1-1-案例-数据源对象管理"><a href="#1-1-案例-数据源对象管理" class="headerlink" title="1.1 案例:数据源对象管理"></a>1.1 案例:数据源对象管理</h3><p>在这一节中，我们将通过一个案例来学习下对于第三方bean该如何进行配置管理。</p><p>以后我们会用到很多第三方的bean,本次案例将使用咱们前面提到过的数据源<code>Druid(德鲁伊)</code>和<code>C3P0</code>来配置学习下。</p><h4 id="1-1-1-环境准备"><a href="#1-1-1-环境准备" class="headerlink" title="1.1.1 环境准备"></a>1.1.1 环境准备</h4><p>学习之前，先来准备下案例环境:</p><ul><li><p>创建一个Maven项目</p><p><img src="/../images/2024/12/1214/1629860338328.png" alt="1629860338328"></p></li><li><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources下添加spring的配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个运行类App</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-2-思路分析"><a href="#1-1-2-思路分析" class="headerlink" title="1.1.2 思路分析"></a>1.1.2 思路分析</h4><p>在上述环境下，我们来对数据源进行配置管理，先来分析下思路:</p><blockquote><p>需求:使用Spring的IOC容器来管理Druid连接池对象</p><p>1.使用第三方的技术，需要在pom.xml添加依赖</p><p>2.在配置文件中将【第三方的类】制作成一个bean，让IOC容器进行管理</p><p>3.数据库连接需要基础的四要素<code>驱动</code>、<code>连接</code>、<code>用户名</code>和<code>密码</code>，【如何注入】到对应的bean中</p><p>4.从IOC容器中获取对应的bean对象，将其打印到控制台查看结果</p></blockquote><p><strong>思考:</strong></p><ul><li>第三方的类指的是什么?</li><li>如何注入数据库连接四要素?</li></ul><h4 id="1-1-3-实现Druid管理"><a href="#1-1-3-实现Druid管理" class="headerlink" title="1.1.3 实现Druid管理"></a>1.1.3 实现Druid管理</h4><p>带着这两个问题，把下面的案例实现下:</p><h5 id="步骤1-导入druid的依赖"><a href="#步骤1-导入druid的依赖" class="headerlink" title="步骤1:导入druid的依赖"></a>步骤1:导入<code>druid</code>的依赖</h5><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-配置第三方bean"><a href="#步骤2-配置第三方bean" class="headerlink" title="步骤2:配置第三方bean"></a>步骤2:配置第三方bean</h5><p>在applicationContext.xml配置文件中添加<code>DruidDataSource</code>的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>driverClassName:数据库驱动</li><li>url:数据库连接地址</li><li>username:数据库连接用户名</li><li>password:数据库连接密码</li><li>数据库连接的四要素要和自己使用的数据库信息一致。</li></ul><h5 id="步骤3-从IOC容器中获取对应的bean对象"><a href="#步骤3-从IOC容器中获取对应的bean对象" class="headerlink" title="步骤3:从IOC容器中获取对应的bean对象"></a>步骤3:从IOC容器中获取对应的bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">       System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-运行程序"><a href="#步骤4-运行程序" class="headerlink" title="步骤4:运行程序"></a>步骤4:运行程序</h5><p>打印如下结果: 说明第三方bean对象已经被spring的IOC容器进行管理</p><p><img src="/../images/2024/12/1214/1629887733081.png" alt="1629887733081"></p><p>做完案例后，我们可以将刚才思考的两个问题答案说下:</p><ul><li><p>第三方的类指的是什么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DruidDataSource</span><br></pre></td></tr></table></figure></li><li><p>如何注入数据库连接四要素?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setter注入</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-加载properties文件"><a href="#1-2-加载properties文件" class="headerlink" title="1.2 加载properties文件"></a>1.2 加载properties文件</h3><p>上节中我们已经完成两个数据源<code>druid</code>和<code>C3P0</code>的配置，但是其中包含了一些问题，我们来分析下:</p><ul><li>这两个数据源中都使用到了一些固定的常量如数据库连接四要素，把这些值写在Spring的配置文件中不利于后期维护</li><li>需要将这些值提取到一个外部的properties配置文件中</li><li>Spring框架如何从配置文件中读取属性值来配置就是接下来要解决的问题。</li></ul><p>问题提出来后，具体该如何实现?</p><h6 id="步骤1-准备properties配置文件"><a href="#步骤1-准备properties配置文件" class="headerlink" title="步骤1:准备properties配置文件"></a>步骤1:准备properties配置文件</h6><p>resources下创建一个jdbc.properties文件,并添加对应的属性键值对</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h6 id="步骤2-开启context命名空间"><a href="#步骤2-开启context命名空间" class="headerlink" title="步骤2:开启context命名空间"></a>步骤2:开启<code>context</code>命名空间</h6><p>在applicationContext.xml中开<code>context</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤3-加载properties配置文件"><a href="#步骤3-加载properties配置文件" class="headerlink" title="步骤3:加载properties配置文件"></a>步骤3:加载properties配置文件</h6><p>在配置文件中使用<code>context</code>命名空间下的标签来加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="步骤4-完成属性注入"><a href="#步骤4-完成属性注入" class="headerlink" title="步骤4:完成属性注入"></a>步骤4:完成属性注入</h6><p>使用<code>$&#123;key&#125;</code>来读取properties配置文件中的内容并完成属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，读取外部properties配置文件中的内容就已经完成。</p><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><p>至此，读取properties配置文件中的内容就已经完成，但是在使用的时候，有些注意事项:</p><ul><li><p>问题一:键值对的key为<code>username</code>引发的问题</p><p>1.在properties中配置键值对的时候，如果key设置为<code>username</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=root666</span><br></pre></td></tr></table></figure><p>2.在applicationContext.xml注入该属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.运行后，在控制台打印的却不是<code>root666</code>，而是自己电脑的用户名</p><p><img src="/../images/2024/12/1214/1629975934694.png" alt="1629975934694"></p><p>4.出现问题的原因是<code>&lt;context:property-placeholder/&gt;</code>标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">    System.out.println(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以自行运行，在打印出来的结果中会有一个USERNAME&#x3D;XXX[自己电脑的用户名称]</p><p>5.解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>system-properties-mode:设置为NEVER,表示不加载系统属性，就可以解决上述问题。</p><p>当然还有一个解决方案就是避免使用<code>username</code>作为属性的<code>key</code>。</p></li><li><p>问题二:当有多个properties配置文件需要被加载，该如何配置?</p><p>1.调整下配置文件的内容，在resources下添加<code>jdbc.properties</code>,<code>jdbc2.properties</code>,内容如下:</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>jdbc2.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root666</span></span><br></pre></td></tr></table></figure><p>2.修改applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>方式一:可以实现，如果配置文件多的话，每个都需要配置</li><li>方式二:<code>*.properties</code>代表所有以properties结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li><li>方式三:标准的写法，<code>classpath:</code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li><li>方式四:不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的properties配置文件</li></ul></li></ul><h2 id="2，核心容器"><a href="#2，核心容器" class="headerlink" title="2，核心容器"></a>2，核心容器</h2><p>前面已经完成bean与依赖注入的相关知识学习，接下来我们主要学习的是IOC容器中的&#x3D;&#x3D;核心容器&#x3D;&#x3D;。</p><p>这里所说的核心容器，大家可以把它简单的理解为<code>ApplicationContext</code>，前面虽然已经用到过，但是并没有系统的学习，接下来咱们从以下几个问题入手来学习下容器的相关知识:</p><ul><li>如何创建容器?</li><li>创建好容器后，如何从容器中获取bean对象?</li><li>容器类的层次结构是什么?</li><li>BeanFactory是什么?</li></ul><h3 id="2-1-容器"><a href="#2-1-容器" class="headerlink" title="2.1 容器"></a>2.1 容器</h3><h4 id="2-1-1-容器的创建方式"><a href="#2-1-1-容器的创建方式" class="headerlink" title="2.1.1 容器的创建方式"></a>2.1.1 容器的创建方式</h4><p>案例中创建<code>ApplicationContext</code>的方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;类路径下的XML配置文件&#x3D;&#x3D;</p><p>除了上面这种方式，Spring还提供了另外一种创建方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式翻译为:&#x3D;&#x3D;文件系统下的XML配置文件&#x3D;&#x3D;</p><p>使用这种方式，运行，会出现如下错误:</p><p><img src="/../images/2024/12/1214/1629983245121.png" alt="1629983245121"></p><p>从错误信息中能发现，这种方式是从项目路径下开始查找<code>applicationContext.xml</code>配置文件的，所以需要将其修改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\workspace\\spring\\spring_10_container\\src\\main\\resources\\applicationContext.xml&quot;</span>); </span><br></pre></td></tr></table></figure><p>**说明:**大家练习的时候，写自己的具体路径。</p><p>这种方式虽能实现，但是当项目的位置发生变化后,代码也需要跟着改,耦合度较高,不推荐使用。</p><h4 id="2-1-2-Bean的三种获取方式"><a href="#2-1-2-Bean的三种获取方式" class="headerlink" title="2.1.2 Bean的三种获取方式"></a>2.1.2 Bean的三种获取方式</h4><p>方式一，就是目前案例中获取的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式存在的问题是每次获取的时候都需要进行类型转换，有没有更简单的方式呢?</p><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;，BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式可以解决类型强转问题，但是参数又多加了一个，相对来说没有简化多少。</p><p>方式三:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookDao bookDao = ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure><p>这种方式就类似我们之前所学习依赖注入中的按类型注入。必须要确保IOC容器中该类型对应的bean对象只能有一个。</p><h4 id="2-1-3-容器类层次结构"><a href="#2-1-3-容器类层次结构" class="headerlink" title="2.1.3 容器类层次结构"></a>2.1.3 容器类层次结构</h4><p>(1)在IDEA中双击<code>shift</code>,输入BeanFactory</p><p><img src="/../images/2024/12/1214/1629985148294.png" alt="1629985148294"></p><p>(2)点击进入BeanFactory类，ctrl+h,就能查看到如下结构的层次关系</p><p><img src="/../images/2024/12/1214/1629984980781.png" alt="1629984980781"></p><p>从图中可以看出，容器类也是从无到有根据需要一层层叠加上来的，大家重点理解下这种设计思想。</p><h4 id="2-1-4-BeanFactory的使用"><a href="#2-1-4-BeanFactory的使用" class="headerlink" title="2.1.4 BeanFactory的使用"></a>2.1.4 BeanFactory的使用</h4><p>使用BeanFactory来创建IOC容器的具体实现方式为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更好的看出<code>BeanFactory</code>和<code>ApplicationContext</code>之间的区别，在BookDaoImpl添加如下构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不去获取bean对象，打印会发现：</p><ul><li><p>BeanFactory是延迟加载，只有在获取bean对象的时候才会去创建</p></li><li><p>ApplicationContext是立即加载，容器加载的时候就会创建bean对象</p></li><li><p>ApplicationContext要想成为延迟加载，只需要按照如下方式进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>小结</strong></p><p>这一节中所讲的知识点包括:</p><ul><li><p>容器创建的两种方式</p><ul><li>ClassPathXmlApplicationContext[掌握]</li><li>FileSystemXmlApplicationContext[知道即可]</li></ul></li><li><p>获取Bean的三种方式</p><ul><li>getBean(“名称”):需要类型转换</li><li>getBean(“名称”,类型.class):多了一个参数</li><li>getBean(类型.class):容器中不能有多个该类的bean对象</li></ul><p>上述三种方式，各有各的优缺点，用哪个都可以。</p></li><li><p>容器类层次结构</p><ul><li>只需要知晓容器的最上级的父接口为 BeanFactory即可</li></ul></li><li><p>BeanFactory</p><ul><li>使用BeanFactory创建的容器是延迟加载</li><li>使用ApplicationContext创建的容器是立即加载</li><li>具体BeanFactory如何创建只需要了解即可。</li></ul></li></ul><h3 id="2-2-核心容器总结"><a href="#2-2-核心容器总结" class="headerlink" title="2.2 核心容器总结"></a>2.2 核心容器总结</h3><p>这节中没有新的知识点，只是对前面知识的一个大总结，共包含如下内容:</p><h4 id="2-2-1-容器相关"><a href="#2-2-1-容器相关" class="headerlink" title="2.2.1 容器相关"></a>2.2.1 容器相关</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li><strong>&#x3D;&#x3D;ClassPathXmlApplicationContext(常用)&#x3D;&#x3D;</strong></li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h4 id="2-2-2-bean相关"><a href="#2-2-2-bean相关" class="headerlink" title="2.2.2 bean相关"></a>2.2.2 bean相关</h4><p><img src="/../images/2024/12/1214/1629986510487.png" alt="1629986510487"></p><p>其实整个配置中最常用的就两个属性&#x3D;&#x3D;id&#x3D;&#x3D;和&#x3D;&#x3D;class&#x3D;&#x3D;。</p><p>把scope、init-method、destroy-method框起来的原因是，后面注解在讲解的时候还会用到，所以大家对这三个属性关注下。</p><h4 id="2-2-3-依赖注入相关"><a href="#2-2-3-依赖注入相关" class="headerlink" title="2.2.3 依赖注入相关"></a>2.2.3 依赖注入相关</h4><p><img src="/../images/2024/12/1214/1629986848563.png" alt="1629986848563"></p><h2 id="3，IOC-DI注解开发"><a href="#3，IOC-DI注解开发" class="headerlink" title="3，IOC&#x2F;DI注解开发"></a>3，IOC&#x2F;DI注解开发</h2><p>Spring的IOC&#x2F;DI对应的配置开发就已经讲解完成，但是使用起来相对来说还是比较复杂的，复杂的地方在&#x3D;&#x3D;配置文件&#x3D;&#x3D;。</p><p>前面咱们聊Spring的时候说过，Spring可以简化代码的开发，到现在并没有体会到。</p><p>所以Spring到底是如何简化代码开发的呢?</p><p>要想真正简化开发，就需要用到Spring的注解开发，Spring对注解支持的版本历程:</p><ul><li>2.0版开始支持注解</li><li>2.5版注解功能趋于完善</li><li>3.0版支持纯注解开发</li></ul><p>关于注解开发，我们会讲解两块内容<code>注解开发定义bean</code>和<code>纯注解开发</code>。</p><p>注解开发定义bean用的是2.5版提供的注解，纯注解开发用的是3.0版提供的注解。</p><h3 id="3-1-注解开发定义bean"><a href="#3-1-注解开发定义bean" class="headerlink" title="3.1 注解开发定义bean"></a>3.1 注解开发定义bean</h3><p>在上述环境的基础上，我们来学一学Spring是如何通过注解实现bean的定义开发?</p><h4 id="步骤1-删除原XML配置"><a href="#步骤1-删除原XML配置" class="headerlink" title="步骤1:删除原XML配置"></a>步骤1:删除原XML配置</h4><p>将配置文件中的<code>&lt;bean&gt;</code>标签删除掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-Dao上添加注解"><a href="#步骤2-Dao上添加注解" class="headerlink" title="步骤2:Dao上添加注解"></a>步骤2:Dao上添加注解</h4><p>在BookDaoImpl类上添加<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:@Component注解不可以添加在接口上，因为接口是无法创建对象的。&#x3D;&#x3D;</p><p>XML与注解配置的对应关系:</p><p><img src="/../images/2024/12/1214/1629990315619.png" alt="1629990315619"></p><h4 id="步骤3-配置Spring的注解包扫描"><a href="#步骤3-配置Spring的注解包扫描" class="headerlink" title="步骤3:配置Spring的注解包扫描"></a>步骤3:配置Spring的注解包扫描</h4><p>为了让Spring框架能够扫描到写在类上的注解，需要在配置文件上进行包扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>component-scan</p><ul><li>component:组件,Spring将管理的bean视作自己的一个组件</li><li>scan:扫描</li></ul><p>base-package指定Spring框架扫描的包路径，它会扫描指定包及其子包中的所有类上的注解。</p><ul><li>包路径越多[如:com.itheima.dao.impl]，扫描的范围越小速度越快</li><li>包路径越少[如:com.itheima],扫描的范围越大速度越慢</li><li>一般扫描到项目的组织名称即Maven的groupId下[如:com.itheima]即可。</li></ul><h4 id="步骤4-Service上添加注解"><a href="#步骤4-Service上添加注解" class="headerlink" title="步骤4:Service上添加注解"></a>步骤4:Service上添加注解</h4><p>在BookServiceImpl类上也添加<code>@Component</code>交给Spring框架管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5-运行程序"><a href="#步骤5-运行程序" class="headerlink" title="步骤5:运行程序"></a>步骤5:运行程序</h4><p>在App类中，从IOC容器中获取BookServiceImpl对应的bean对象，打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印观察结果，两个bean对象都已经打印到控制台</p><p><img src="/../images/2024/12/1214/1630027743910.png" alt="1630027743910"></p><p><strong>说明:</strong></p><ul><li><p>BookServiceImpl类没有起名称，所以在App中是按照类型来获取bean对象</p></li><li><p>@Component注解如果不起名称，会有一个默认值就是<code>当前类名首字母小写</code>，所以也可以按照名称获取，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService)ctx.getBean(<span class="string">&quot;bookServiceImpl&quot;</span>);</span><br><span class="line">System.out.println(bookService);</span><br></pre></td></tr></table></figure></li></ul><p>对于@Component注解，还衍生出了其他三个注解<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p><p>通过查看源码会发现:</p><p><img src="/../images/2024/12/1214/1630028345074.png" alt="1630028345074"></p><p>这三个注解和@Component注解的作用是一样的，为什么要衍生出这三个呢?</p><p>方便我们后期在编写类的时候能很好的区分出这个类是属于<code>表现层</code>、<code>业务层</code>还是<code>数据层</code>的类。</p><h4 id="知识点1-Component等"><a href="#知识点1-Component等" class="headerlink" title="知识点1:@Component等"></a>知识点1:@Component等</h4><table><thead><tr><th>名称</th><th>@Component&#x2F;@Controller&#x2F;@Service&#x2F;@Repository</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring管理的bean</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h3 id="3-2-纯注解开发模式"><a href="#3-2-纯注解开发模式" class="headerlink" title="3.2 纯注解开发模式"></a>3.2 纯注解开发模式</h3><p>上面已经可以使用注解来配置bean,但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring在3.0版已经支持纯注解开发</p><ul><li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li></ul><p>具体如何实现?</p><h4 id="3-2-1-思路分析"><a href="#3-2-1-思路分析" class="headerlink" title="3.2.1 思路分析"></a>3.2.1 思路分析</h4><p>实现思路为: </p><ul><li>将配置文件applicationContext.xml删除掉，使用类来替换。</li></ul><h4 id="3-2-2-实现步骤"><a href="#3-2-2-实现步骤" class="headerlink" title="3.2.2 实现步骤"></a>3.2.2 实现步骤</h4><h5 id="步骤1-创建配置类"><a href="#步骤1-创建配置类" class="headerlink" title="步骤1:创建配置类"></a>步骤1:创建配置类</h5><p>创建一个配置类<code>SpringConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤2-标识该类为配置类"><a href="#步骤2-标识该类为配置类" class="headerlink" title="步骤2:标识该类为配置类"></a>步骤2:标识该类为配置类</h5><p>在配置类上添加<code>@Configuration</code>注解，将其标识为一个配置类,替换<code>applicationContext.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-用注解替换包扫描配置"><a href="#步骤3-用注解替换包扫描配置" class="headerlink" title="步骤3:用注解替换包扫描配置"></a>步骤3:用注解替换包扫描配置</h5><p>在配置类上添加包扫描注解<code>@ComponentScan</code>替换<code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建运行类并执行"><a href="#步骤4-创建运行类并执行" class="headerlink" title="步骤4:创建运行类并执行"></a>步骤4:创建运行类并执行</h5><p>创建一个新的运行类<code>AppForAnnotation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行AppForAnnotation,可以看到两个对象依然被获取成功</p><p><img src="/../images/2024/12/1214/1630029110506.png" alt="1630029110506"></p><p>至此，纯注解开发的方式就已经完成了，主要内容包括:</p><ul><li><p>Java类替换Spring核心配置文件</p><p><img src="/../images/2024/12/1214/1630029254372.png" alt="1630029254372"></p></li><li><p>@Configuration注解用于设定当前类为配置类</p></li><li><p>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识点1：-Configuration"><a href="#知识点1：-Configuration" class="headerlink" title="知识点1：@Configuration"></a>知识点1：@Configuration</h4><table><thead><tr><th>名称</th><th>@Configuration</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring配置类</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h4 id="知识点2：-ComponentScan"><a href="#知识点2：-ComponentScan" class="headerlink" title="知识点2：@ComponentScan"></a>知识点2：@ComponentScan</h4><table><thead><tr><th>名称</th><th>@ComponentScan</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr><td>属性</td><td>value（默认）：扫描路径，此路径可以逐层向下扫描</td></tr></tbody></table><p><strong>小结:</strong></p><p>这一节重点掌握的是使用注解完成Spring的bean管理，需要掌握的内容为:</p><ul><li>记住@Component、@Controller、@Service、@Repository这四个注解</li><li>applicationContext.xml中<code>&lt;context:component-san/&gt;</code>的作用是指定扫描包路径，注解为@ComponentScan</li><li>@Configuration标识该类为配置类，使用类替换applicationContext.xml文件</li><li>ClassPathXmlApplicationContext是加载XML配置文件</li><li>AnnotationConfigApplicationContext是加载配置类</li></ul><h3 id="3-3-注解开发bean作用范围与生命周期管理"><a href="#3-3-注解开发bean作用范围与生命周期管理" class="headerlink" title="3.3 注解开发bean作用范围与生命周期管理"></a>3.3 注解开发bean作用范围与生命周期管理</h3><p>使用注解已经完成了bean的管理，接下来按照前面所学习的内容，将通过配置实现的内容都换成对应的注解实现，包含两部分内容:<code>bean作用范围</code>和<code>bean生命周期</code>。</p><h4 id="3-3-1-Bean的作用范围"><a href="#3-3-1-Bean的作用范围" class="headerlink" title="3.3.1 Bean的作用范围"></a>3.3.1 Bean的作用范围</h4><p>(1)先运行App类,在控制台打印两个一摸一样的地址，说明默认情况下bean是单例</p><p><img src="/../images/2024/12/1214/1630031192753.png" alt="1630031192753"></p><p>(2)要想将BookDaoImpl变成非单例，只需要在其类上添加<code>@scope</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行App类，打印结果:</p><p><img src="/../images/2024/12/1214/1630031808947.png" alt="1630031808947"></p><h5 id="知识点1：-Scope"><a href="#知识点1：-Scope" class="headerlink" title="知识点1：@Scope"></a>知识点1：@Scope</h5><table><thead><tr><th>名称</th><th>@Scope</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类创建对象的作用范围<br/>可用于设置创建出的bean是否为单例对象</td></tr><tr><td>属性</td><td>value（默认）：定义bean作用范围，<br/>&#x3D;&#x3D;默认值singleton（单例），可选值prototype（非单例）&#x3D;&#x3D;</td></tr></tbody></table><h4 id="3-3-2-Bean的生命周期"><a href="#3-3-2-Bean的生命周期" class="headerlink" title="3.3.2 Bean的生命周期"></a>3.3.2 Bean的生命周期</h4><p>只需要在对应的方法上添加<code>@PostConstruct</code>和<code>@PreDestroy</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">//在构造方法之后执行，替换 init-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span> <span class="comment">//在销毁方法之前执行,替换 destroy-method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3)要想看到两个方法执行，需要注意的是<code>destroy</code>只有在容器关闭的时候，才会执行，所以需要修改App的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        System.out.println(bookDao1);</span><br><span class="line">        System.out.println(bookDao2);</span><br><span class="line">        ctx.close(); <span class="comment">//关闭容器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注意:</strong>@PostConstruct和@PreDestroy注解如果找不到，需要导入下面的jar包&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.annotation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p><img src="/../images/2024/12/1214/1630033039358.png" alt="1630033039358"></p><h3 id="3-4-注解开发依赖注入"><a href="#3-4-注解开发依赖注入" class="headerlink" title="3.4 注解开发依赖注入"></a>3.4 注解开发依赖注入</h3><p>Spring为了使用注解简化开发，并没有提供<code>构造函数注入</code>、<code>setter注入</code>对应的注解，只提供了自动装配的注解实现。</p><h4 id="3-4-1-注解实现按照类型注入"><a href="#3-4-1-注解实现按照类型注入" class="headerlink" title="3.4.1 注解实现按照类型注入"></a>3.4.1 注解实现按照类型注入</h4><p>对于这个问题使用注解该如何解决?</p><p>(1) 在BookServiceImpl类的bookDao属性上添加<code>@Autowired</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>@Autowired可以写在属性上，也可也写在setter方法上，最简单的处理方式是<code>写在属性上并将setter方法删除掉</code></li><li>为什么setter方法可以删除呢?<ul><li>自动装配基于反射设计创建对象并通过暴力反射为私有属性进行设值</li><li>普通反射只能获取public修饰的内容</li><li>暴力反射除了获取public修饰的内容还可以获取private修改的内容</li><li>所以此处无需提供setter方法</li></ul></li></ul><p>(2)@Autowired是按照类型注入，那么对应BookDao接口如果有多个实现类，比如添加BookDaoImpl2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再次运行App，就会报错</p><p><img src="/../images/2024/12/1214/1630034272959.png" alt="1630034272959"></p><p>此时，按照类型注入就无法区分到底注入哪个对象，解决方案:<code>按照名称注入</code></p><ul><li><p>先给两个Dao类分别起个名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;bookDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...2&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以注入成功，但是得思考个问题: </p><ul><li><p>@Autowired是按照类型注入的，给BookDao的两个实现起了名称，它还是有两个bean对象，为什么不报错?</p></li><li><p>@Autowired默认按照类型自动装配，如果IOC容器中同类的Bean找到多个，就按照变量名和Bean的名称匹配。因为变量名叫<code>bookDao</code>而容器中也有一个<code>booDao</code>，所以可以成功注入。</p></li><li><p>分析下面这种情况是否能完成注入呢?</p><p><img src="/../images/2024/12/1214/1630036236150.png" alt="1630036236150"></p></li><li><p>不行，因为按照类型会找到多个bean对象，此时会按照<code>bookDao</code>名称去找，因为IOC容器只有名称叫<code>bookDao1</code>和<code>bookDao2</code>,所以找不到，会报<code>NoUniqueBeanDefinitionException</code></p></li></ul></li></ul><h4 id="3-4-2-注解实现按照名称注入"><a href="#3-4-2-注解实现按照名称注入" class="headerlink" title="3.4.2 注解实现按照名称注入"></a>3.4.2 注解实现按照名称注入</h4><p>当根据类型在容器中找到多个bean,注入参数的属性名又和容器中bean的名称不一致，这个时候该如何解决，就需要使用到<code>@Qualifier</code>来指定注入哪个名称的bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier注解后的值就是需要注入的bean的名称。</p><p>&#x3D;&#x3D;注意:@Qualifier不能独立使用，必须和@Autowired一起使用&#x3D;&#x3D;</p><h4 id="3-4-3-简单数据类型注入"><a href="#3-4-3-简单数据类型注入" class="headerlink" title="3.4.3 简单数据类型注入"></a>3.4.3 简单数据类型注入</h4><p>引用类型看完，简单类型注入就比较容易懂了。简单类型注入的是基本数据类型或者字符串类型，下面在<code>BookDaoImpl</code>类中添加一个<code>name</code>属性，用其进行简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据类型换了，对应的注解也要跟着换，这次使用<code>@Value</code>注解，将值写入注解的参数中就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;itheima&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意数据格式要匹配，如将”abc”注入给int值，这样程序就会报错。</p><p>介绍完后，会有一种感觉就是这个注解好像没什么用，跟直接赋值是一个效果，还没有直接赋值简单，所以这个注解存在的意义是什么?</p><h4 id="3-4-4-注解读取properties配置文件"><a href="#3-4-4-注解读取properties配置文件" class="headerlink" title="3.4.4 注解读取properties配置文件"></a>3.4.4 注解读取properties配置文件</h4><p><code>@Value</code>一般会被用在从properties配置文件中读取内容进行使用，具体如何实现?</p><h5 id="步骤1：resource下准备properties文件"><a href="#步骤1：resource下准备properties文件" class="headerlink" title="步骤1：resource下准备properties文件"></a>步骤1：resource下准备properties文件</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">itheima888</span></span><br></pre></td></tr></table></figure><h5 id="步骤2-使用注解加载properties配置文件"><a href="#步骤2-使用注解加载properties配置文件" class="headerlink" title="步骤2: 使用注解加载properties配置文件"></a>步骤2: 使用注解加载properties配置文件</h5><p>在配置类上添加<code>@PropertySource</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="步骤3：使用-Value读取配置文件中的内容"><a href="#步骤3：使用-Value读取配置文件中的内容" class="headerlink" title="步骤3：使用@Value读取配置文件中的内容"></a>步骤3：使用@Value读取配置文件中的内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤4:运行程序</p><p>运行App类，查看运行结果，说明配置文件中的内容已经被加载到</p><p><img src="/../images/2024/12/1214/1630084683663.png" alt="1630084683663"></p><p><strong>注意:</strong></p><ul><li><p>如果读取的properties配置文件有多个，可以使用<code>@PropertySource</code>的属性来指定多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;,&quot;xxx.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中不支持使用通配符<code>*</code>,运行会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;*.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><code>@PropertySource</code>注解属性中可以把<code>classpath:</code>加上,代表从当前项目的根路径找文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4，IOC-DI注解开发管理第三方bean"><a href="#4，IOC-DI注解开发管理第三方bean" class="headerlink" title="4，IOC&#x2F;DI注解开发管理第三方bean"></a>4，IOC&#x2F;DI注解开发管理第三方bean</h2><p>前面定义bean的时候都是在自己开发的类上面写个注解就完成了，但如果是第三方的类，这些类都是在jar包中，我们没有办法在类上面添加注解，这个时候该怎么办?</p><p>遇到上述问题，我们就需要有一种更加灵活的方式来定义bean,这种方式不能在原始代码上面书写注解，一样能定义bean,这就用到了一个全新的注解&#x3D;&#x3D;@Bean&#x3D;&#x3D;。</p><p>这个注解该如何使用呢?</p><p>咱们把之前使用配置方式管理的数据源使用注解再来一遍，通过这个案例来学习下@Bean的使用。</p><h3 id="4-2-注解开发管理第三方bean"><a href="#4-2-注解开发管理第三方bean" class="headerlink" title="4.2 注解开发管理第三方bean"></a>4.2 注解开发管理第三方bean</h3><p>在上述环境中完成对<code>Druid</code>数据源的管理，具体的实现步骤为:</p><h4 id="步骤1-导入对应的jar包"><a href="#步骤1-导入对应的jar包" class="headerlink" title="步骤1:导入对应的jar包"></a>步骤1:导入对应的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-在配置类中添加一个方法"><a href="#步骤2-在配置类中添加一个方法" class="headerlink" title="步骤2:在配置类中添加一个方法"></a>步骤2:在配置类中添加一个方法</h4><p>注意该方法的返回值就是要创建的Bean对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3-在方法上添加-Bean注解"><a href="#步骤3-在方法上添加-Bean注解" class="headerlink" title="步骤3:在方法上添加@Bean注解"></a>步骤3:在方法上添加<code>@Bean</code>注解</h4><p>@Bean注解的作用是将方法的返回值制作为Spring管理的一个bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:不能使用<code>DataSource ds = new DruidDataSource()</code></strong></p><p>因为DataSource接口中没有对应的setter方法来设置属性。</p><h4 id="步骤4-从IOC容器中获取对象并打印"><a href="#步骤4-从IOC容器中获取对象并打印" class="headerlink" title="步骤4:从IOC容器中获取对象并打印"></a>步骤4:从IOC容器中获取对象并打印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此使用@Bean来管理第三方bean的案例就已经完成。</p><p>如果有多个bean要被Spring管理，直接在配置类中多些几个方法，方法上添加@Bean注解即可。</p><h3 id="4-3-引入外部配置类"><a href="#4-3-引入外部配置类" class="headerlink" title="4.3 引入外部配置类"></a>4.3 引入外部配置类</h3><p>如果把所有的第三方bean都配置到Spring的配置类<code>SpringConfig</code>中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些bean配置到不同的配置类中?</p><p>对于数据源的bean,我们新建一个<code>JdbcConfig</code>配置类，并把数据源配置到该类下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的问题是，这个配置类如何能被Spring配置类加载到，并创建DataSource对象在IOC容器中?</p><p>针对这个问题，有两个解决方案:</p><h4 id="4-3-1-使用包扫描引入"><a href="#4-3-1-使用包扫描引入" class="headerlink" title="4.3.1 使用包扫描引入"></a>4.3.1 使用包扫描引入</h4><h5 id="步骤1-在Spring的配置类上添加包扫描"><a href="#步骤1-在Spring的配置类上添加包扫描" class="headerlink" title="步骤1:在Spring的配置类上添加包扫描"></a>步骤1:在Spring的配置类上添加包扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在JdbcConfig上添加配置注解"><a href="#步骤2-在JdbcConfig上添加配置注解" class="headerlink" title="步骤2:在JdbcConfig上添加配置注解"></a>步骤2:在JdbcConfig上添加配置注解</h5><p>JdbcConfig类要放入到<code>com.itheima.config</code>包下，需要被Spring的配置类扫描到即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3-运行程序"><a href="#步骤3-运行程序" class="headerlink" title="步骤3:运行程序"></a>步骤3:运行程序</h5><p>依然能获取到bean对象并打印控制台。</p><p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p><h4 id="4-3-2-使用-Import引入"><a href="#4-3-2-使用-Import引入" class="headerlink" title="4.3.2 使用@Import引入"></a>4.3.2 使用<code>@Import</code>引入</h4><p>方案一实现起来有点小复杂，Spring早就想到了这一点，于是又给我们提供了第二种方案。</p><p>这种方案可以不用加<code>@Configuration</code>注解，但是必须在Spring配置类上使用<code>@Import</code>注解手动引入需要加载的配置类</p><h5 id="步骤1-去除JdbcConfig类上的注解"><a href="#步骤1-去除JdbcConfig类上的注解" class="headerlink" title="步骤1:去除JdbcConfig类上的注解"></a>步骤1:去除JdbcConfig类上的注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤2-在Spring配置类中引入"><a href="#步骤2-在Spring配置类中引入" class="headerlink" title="步骤2:在Spring配置类中引入"></a>步骤2:在Spring配置类中引入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><p>扫描注解可以移除</p></li><li><p>@Import参数需要的是一个数组，可以引入多个配置类。</p></li><li><p>@Import注解在配置类中只能写一次，下面的方式是&#x3D;&#x3D;不允许的&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@Import(Xxx.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-注解开发实现为第三方bean注入资源"><a href="#4-4-注解开发实现为第三方bean注入资源" class="headerlink" title="4.4 注解开发实现为第三方bean注入资源"></a>4.4 注解开发实现为第三方bean注入资源</h3><p>在使用@Bean创建bean对象的时候，如果方法在创建的过程中需要其他资源该怎么办?</p><p>这些资源会有两大类，分别是<code>简单数据类型</code> 和<code>引用数据类型</code>。</p><h4 id="4-4-1-简单数据类型"><a href="#4-4-1-简单数据类型" class="headerlink" title="4.4.1 简单数据类型"></a>4.4.1 简单数据类型</h4><h5 id="4-4-1-1-需求分析"><a href="#4-4-1-1-需求分析" class="headerlink" title="4.4.1.1 需求分析"></a>4.4.1.1 需求分析</h5><p>对于下面代码关于数据库的四要素不应该写死在代码中，应该是从properties配置文件中读取。如何来优化下面的代码?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-1-2-注入简单数据类型步骤"><a href="#4-4-1-2-注入简单数据类型步骤" class="headerlink" title="4.4.1.2 注入简单数据类型步骤"></a>4.4.1.2 注入简单数据类型步骤</h5><h6 id="步骤1-类中提供四个属性"><a href="#步骤1-类中提供四个属性" class="headerlink" title="步骤1:类中提供四个属性"></a>步骤1:类中提供四个属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-使用-Value注解引入值"><a href="#步骤2-使用-Value注解引入值" class="headerlink" title="步骤2:使用@Value注解引入值"></a>步骤2:使用<code>@Value</code>注解引入值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-引用数据类型"><a href="#4-4-2-引用数据类型" class="headerlink" title="4.4.2 引用数据类型"></a>4.4.2 引用数据类型</h4><h5 id="4-4-2-1-需求分析"><a href="#4-4-2-1-需求分析" class="headerlink" title="4.4.2.1 需求分析"></a>4.4.2.1 需求分析</h5><p>假设在构建DataSource对象的时候，需要用到BookDao对象，该如何把BookDao对象注入进方法内让其使用呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-2-注入引用数据类型步骤"><a href="#4-4-2-2-注入引用数据类型步骤" class="headerlink" title="4.4.2.2 注入引用数据类型步骤"></a>4.4.2.2 注入引用数据类型步骤</h5><h6 id="步骤1-在SpringConfig中扫描BookDao"><a href="#步骤1-在SpringConfig中扫描BookDao" class="headerlink" title="步骤1:在SpringConfig中扫描BookDao"></a>步骤1:在SpringConfig中扫描BookDao</h6><p>扫描的目的是让Spring能管理到BookDao,也就是说要让IOC容器中有一个bookDao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="步骤2-在JdbcConfig类的方法上添加参数"><a href="#步骤2-在JdbcConfig类的方法上添加参数" class="headerlink" title="步骤2:在JdbcConfig类的方法上添加参数"></a>步骤2:在JdbcConfig类的方法上添加参数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">    System.out.println(bookDao);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象。&#x3D;&#x3D;</p><h2 id="5，注解开发总结"><a href="#5，注解开发总结" class="headerlink" title="5，注解开发总结"></a>5，注解开发总结</h2><p>前面我们已经完成了XML配置和注解的开发实现，至于两者之间的差异，咱们放在一块去对比回顾下:</p><p><img src="/../images/2024/12/1214/1630134786448.png" alt="1630134786448"></p><h2 id="6，Spring整合"><a href="#6，Spring整合" class="headerlink" title="6，Spring整合"></a>6，Spring整合</h2><p>课程学习到这里，已经对Spring有一个简单的认识了，Spring有一个容器，叫做IoC容器，里面保存bean。在进行企业级开发的时候，其实除了将自己写的类让Spring管理之外，还有一部分重要的工作就是使用第三方的技术。前面已经讲了如何管理第三方bean了，下面结合IoC和DI，整合2个常用技术，进一步加深对Spring的使用理解。</p><h3 id="6-1-Spring整合Mybatis思路分析"><a href="#6-1-Spring整合Mybatis思路分析" class="headerlink" title="6.1 Spring整合Mybatis思路分析"></a>6.1 Spring整合Mybatis思路分析</h3><h4 id="6-1-1-环境准备"><a href="#6-1-1-环境准备" class="headerlink" title="6.1.1 环境准备"></a>6.1.1 环境准备</h4><p>在准备环境的过程中，我们也来回顾下Mybatis开发的相关内容:</p><h5 id="步骤1-准备数据库表"><a href="#步骤1-准备数据库表" class="headerlink" title="步骤1:准备数据库表"></a>步骤1:准备数据库表</h5><p>Mybatis是来操作数据库表，所以先创建一个数据库及表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="步骤2-创建项目导入jar包"><a href="#步骤2-创建项目导入jar包" class="headerlink" title="步骤2:创建项目导入jar包"></a>步骤2:创建项目导入jar包</h5><p>项目的pom.xml添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤3-根据表创建模型类"><a href="#步骤3-根据表创建模型类" class="headerlink" title="步骤3:根据表创建模型类"></a>步骤3:根据表创建模型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"><span class="comment">//setter...getter...toString...方法略    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤4-创建Dao接口"><a href="#步骤4-创建Dao接口" class="headerlink" title="步骤4:创建Dao接口"></a>步骤4:创建Dao接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤5-创建Service接口和实现类"><a href="#步骤5-创建Service接口和实现类" class="headerlink" title="步骤5:创建Service接口和实现类"></a>步骤5:创建Service接口和实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤6-添加jdbc-properties文件"><a href="#步骤6-添加jdbc-properties文件" class="headerlink" title="步骤6:添加jdbc.properties文件"></a>步骤6:添加jdbc.properties文件</h5><p>resources目录下添加，用于配置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>useSSL:关闭MySQL的SSL连接</p><h5 id="步骤7-添加Mybatis核心配置文件"><a href="#步骤7-添加Mybatis核心配置文件" class="headerlink" title="步骤7:添加Mybatis核心配置文件"></a>步骤7:添加Mybatis核心配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取外部properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名扫描的包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射文件扫描包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="步骤8-编写应用程序"><a href="#步骤8-编写应用程序" class="headerlink" title="步骤8:编写应用程序"></a>步骤8:编写应用程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml.bak&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        <span class="comment">// 4. 获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 5. 执行SqlSession对象执行查询，获取结果User</span></span><br><span class="line">        <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤9-运行程序"><a href="#步骤9-运行程序" class="headerlink" title="步骤9:运行程序"></a>步骤9:运行程序</h5><p><img src="/../images/2024/12/1214/1630136904087.png" alt="1630136904087"></p><h4 id="6-1-2-整合思路分析"><a href="#6-1-2-整合思路分析" class="headerlink" title="6.1.2 整合思路分析"></a>6.1.2 整合思路分析</h4><p>Mybatis的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给Spring来管理?</p><ul><li><p>Mybatis程序核心对象分析</p><p><img src="/../images/2024/12/1214/1630137189480.png" alt="1630137189480"></p><p>从图中可以获取到，真正需要交给Spring管理的是&#x3D;&#x3D;SqlSessionFactory&#x3D;&#x3D;</p></li><li><p>整合Mybatis，就是将Mybatis用到的内容交给Spring管理，分析下配置文件</p><p><img src="/../images/2024/12/1214/1630137388717.png" alt="1630137388717"></p><p><strong>说明:</strong></p><ul><li>第一行读取外部properties配置文件，Spring有提供具体的解决方案<code>@PropertySource</code>,需要交给Spring</li><li>第二行起别名包扫描，为SqlSessionFactory服务的，需要交给Spring</li><li>第三行主要用于做连接池，Spring之前我们已经整合了Druid连接池，这块也需要交给Spring</li><li>前面三行一起都是为了创建SqlSession对象用的，那么用Spring管理SqlSession对象吗?回忆下SqlSession是由SqlSessionFactory创建出来的，所以只需要将SqlSessionFactory交给Spring管理即可。</li><li>第四行是Mapper接口和映射文件[如果使用注解就没有该映射文件]，这个是在获取到SqlSession以后执行具体操作的时候用，所以它和SqlSessionFactory创建的时机都不在同一个时间，可能需要单独管理。</li></ul></li></ul><h3 id="6-2-Spring整合Mybatis"><a href="#6-2-Spring整合Mybatis" class="headerlink" title="6.2 Spring整合Mybatis"></a>6.2 Spring整合Mybatis</h3><p>前面我们已经分析了Spring与Mybatis的整合，大体需要做两件事，</p><p>第一件事是:Spring要管理MyBatis中的SqlSessionFactory</p><p>第二件事是:Spring要管理Mapper接口的扫描</p><p>具体该如何实现，具体的步骤为:</p><h4 id="步骤1-项目中导入整合需要的jar包"><a href="#步骤1-项目中导入整合需要的jar包" class="headerlink" title="步骤1:项目中导入整合需要的jar包"></a>步骤1:项目中导入整合需要的jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库需要该jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Spring与Mybatis整合的jar包</span></span><br><span class="line"><span class="comment">这个jar包mybatis在前面，是Mybatis提供的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2-创建Spring的主配置类"><a href="#步骤2-创建Spring的主配置类" class="headerlink" title="步骤2:创建Spring的主配置类"></a>步骤2:创建Spring的主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//包扫描，主要扫描的是项目中的AccountServiceImpl类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤3-创建数据源的配置类"><a href="#步骤3-创建数据源的配置类" class="headerlink" title="步骤3:创建数据源的配置类"></a>步骤3:创建数据源的配置类</h4><p>在配置类中完成数据源的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4-主配置类中读properties并引入数据源配置类"><a href="#步骤4-主配置类中读properties并引入数据源配置类" class="headerlink" title="步骤4:主配置类中读properties并引入数据源配置类"></a>步骤4:主配置类中读properties并引入数据源配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤5-创建Mybatis配置类并配置SqlSessionFactory"><a href="#步骤5-创建Mybatis配置类并配置SqlSessionFactory" class="headerlink" title="步骤5:创建Mybatis配置类并配置SqlSessionFactory"></a>步骤5:创建Mybatis配置类并配置SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置模型类的别名扫描</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>使用SqlSessionFactoryBean封装SqlSessionFactory需要的环境信息</p><p><img src="/../images/2024/12/1214/1630138835057.png" alt="1630138835057"></p><ul><li>SqlSessionFactoryBean是前面我们讲解FactoryBean的一个子类，在该类中将SqlSessionFactory的创建进行了封装，简化对象的创建，我们只需要将其需要的内容设置即可。</li><li>方法中有一个参数为dataSource,当前Spring容器中已经创建了Druid数据源，类型刚好是DataSource类型，此时在初始化SqlSessionFactoryBean这个对象的时候，发现需要使用DataSource对象，而容器中刚好有这么一个对象，就自动加载了DruidDataSource对象。</li></ul></li><li><p>使用MapperScannerConfigurer加载Dao接口，创建代理对象保存到IOC容器中</p><p><img src="/../images/2024/12/1214/1630138916939.png" alt="1630138916939"></p><ul><li>这个MapperScannerConfigurer对象也是MyBatis提供的专用于整合的jar包中的类，用来处理原始配置文件中的mappers相关配置，加载数据层的Mapper接口类</li><li>MapperScannerConfigurer有一个核心属性basePackage，就是用来设置所扫描的包路径</li></ul></li></ul><h4 id="步骤6-主配置类中引入Mybatis配置类"><a href="#步骤6-主配置类中引入Mybatis配置类" class="headerlink" title="步骤6:主配置类中引入Mybatis配置类"></a>步骤6:主配置类中引入Mybatis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-编写运行类"><a href="#步骤7-编写运行类" class="headerlink" title="步骤7:编写运行类"></a>步骤7:编写运行类</h4><p>在运行类中，从IOC容器中获取Service对象，调用方法获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤8-运行程序"><a href="#步骤8-运行程序" class="headerlink" title="步骤8:运行程序"></a>步骤8:运行程序</h4><p><img src="/../images/2024/12/1214/1630139036627.png" alt="1630139036627"></p><p>支持Spring与Mybatis的整合就已经完成了，其中主要用到的两个类分别是:</p><ul><li>&#x3D;&#x3D;SqlSessionFactoryBean&#x3D;&#x3D;</li><li>&#x3D;&#x3D;MapperScannerConfigurer&#x3D;&#x3D;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-1 IOC 和 DI 详解</title>
      <link href="/2024/12/13/Spring_day01/"/>
      <url>/2024/12/13/Spring_day01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-IOC和DI-详解"><a href="#Spring-IOC和DI-详解" class="headerlink" title="Spring IOC和DI 详解"></a>Spring IOC和DI 详解</h1><blockquote><p>前言：这是一个系列，主要讲解Spring的核心部分，包括IOC、AOP等。这一部分讲解的是IOC和DI，内容如下。</p></blockquote><p>这一篇包括的内容有：</p><ol><li>Spring核心概念</li><li>IOC 和 DI 的案例；</li><li>IOC的Bean详解；</li><li>DI的几种注入方式；</li></ol><h2 id="Spring核心概念"><a href="#Spring核心概念" class="headerlink" title="Spring核心概念"></a>Spring核心概念</h2><p>Spring我们常讲的是它的两个核心，即IOC和AOP，这两个分别是什么意思呢？怎么体现的呢？这就是我们要学习的。所以我们主要学习四个方面：(1)IOC,(2)整合Mybatis(IOC的具体应用)，(3)AOP,(4)声明式事务(AOP的具体应用)。</p><h3 id="Spring家族"><a href="#Spring家族" class="headerlink" title="Spring家族"></a>Spring家族</h3><p>Spring其实是一个广泛的体系：</p><p><img src="/../images/2024/12/1213/image.png" alt="alt text"></p><p>我们主要关注Spring Framework （Spring的核心）、Spring Boot、Spring Cloud<br>像什么SpringSecurity也会用到的。</p><p>Spring Framework4的体系如下：</p><p><img src="/../images/2024/12/1213/image-1.png" alt="alt text"></p><h3 id="IOC、IOC容器、DI、Bean"><a href="#IOC、IOC容器、DI、Bean" class="headerlink" title="IOC、IOC容器、DI、Bean"></a>IOC、IOC容器、DI、Bean</h3><p>IOC、DI这一部分相当于是一种设计模式，一种设计思想，Spring实现了这种思想；</p><p>IOC：控制反转，原来我们创建对象都是直接new，而控制反转就是将创建对象的权利交给外部，由主动new产生对象转换为由外部提供对象。</p><p>IOC容器：Spring技术对IOC思想进行了实现，Spring提供了一个容器，称为IOC容器，用来充当IOC思想中的”外部”。</p><p>Bean对象：IOC容器中放的就是一个个Bean对象。</p><p>DI：依赖注入，当IOC容器中创建好service和dao对象后，程序不能正常执行，因为service运行需要依赖dao对象，IOC容器中虽然有service和dao对象，但是service对象和dao对象没有任何关系，需要把dao对象交给service,也就是说要绑定service和dao对象之间的关系，这就是依赖注入，一般有通过Setter方法注入，通过构造方法注入，自动装配。</p><p>最终效果：充分解耦，使用IOC容器管理bean（IOC），在IOC容器内将有依赖关系的bean进行关系绑定（DI），最终结果为:使用对象时不仅可以直接从IOC容器中获取，并且获取到的bean已经绑定了所有的依赖关系.</p><p>这种设计思想在于解耦，假如我们每个类都依赖一个接口，而该接口的实现类目前用的是类1，但是类1某一天不能满足需求了，我们需要将实现类都换成类2，这样子是不是要每个类中的接口实现类都要修改，而我们用IOC的方式，可以直接在配置文件中修改实现类为类2即可。</p><h2 id="IOC-和-DI-的入门"><a href="#IOC-和-DI-的入门" class="headerlink" title="IOC 和 DI 的入门"></a>IOC 和 DI 的入门</h2><p>需求分析:将BookServiceImpl和BookDaoImpl交给Spring管理，并从容器中获取对应的bean<br>对象进行方法调用。</p><h3 id="IOC入门"><a href="#IOC入门" class="headerlink" title="IOC入门"></a>IOC入门</h3><ol><li>创建Maven的java项目</li></ol><p><img src="/../images/2024/12/1213/image-2.png" alt="alt text"></p><ol start="2"><li>pom.xml添加Spring的依赖jar包</li></ol><p><img src="/../images/2024/12/1213/image-3.png" alt="alt text"></p><ol start="3"><li>创建BookService,BookServiceImpl，BookDao和BookDaoImpl四个类</li></ol><p><img src="/../images/2024/12/1213/image-4.png" alt="alt text"></p><ol start="4"><li>resources下添加spring配置文件，并完成bean的配置</li></ol><p><img src="/../images/2024/12/1213/image-5.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-6.png" alt="alt text"></p><ol start="5"><li>使用Spring提供的接口完成IOC容器的创建</li></ol><p><img src="/../images/2024/12/1213/image-7.png" alt="alt text"></p><ol start="6"><li>从容器中获取对象进行方法调用</li></ol><p><img src="/../images/2024/12/1213/image-8.png" alt="alt text"></p><h3 id="DI入门"><a href="#DI入门" class="headerlink" title="DI入门"></a>DI入门</h3><p>DI就是将两个Bean连接在一起：</p><p>需求:基于IOC入门案例，在BookServiceImpl类中删除new对象的方式，使用Spring的DI完成<br>Dao层的注入</p><ol><li>删除业务层中使用new的方式创建的dao对象</li></ol><p><img src="/../images/2024/12/1213/image-9.png" alt="alt text"></p><ol start="2"><li>在业务层提供BookDao的setter方法</li></ol><p><img src="/../images/2024/12/1213/image-10.png" alt="alt text"></p><ol start="3"><li>在配置文件中添加依赖注入的配置</li></ol><p><img src="/../images/2024/12/1213/image-11.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-12.png" alt="alt text"></p><p>这种其实是Setter注入的方法；</p><ol start="4"><li>运行程序调用方法</li></ol><p><img src="/../images/2024/12/1213/image-13.png" alt="alt text"></p><h2 id="IOC的Bean详解"><a href="#IOC的Bean详解" class="headerlink" title="IOC的Bean详解"></a>IOC的Bean详解</h2><h3 id="Bean基础配置"><a href="#Bean基础配置" class="headerlink" title="Bean基础配置"></a>Bean基础配置</h3><h4 id="基本配置-id-和-class"><a href="#基本配置-id-和-class" class="headerlink" title="基本配置 id 和 class"></a>基本配置 id 和 class</h4><p><img src="/../images/2024/12/1213/image-14.png" alt="alt text"></p><h4 id="别名-name"><a href="#别名-name" class="headerlink" title="别名 name"></a>别名 name</h4><p><img src="/../images/2024/12/1213/image-15.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-16.png" alt="alt text"></p><p>配置了别名之后，在核心容器中可以通过别名来获取Bean</p><h4 id="作用范围-scope-单例还是原型"><a href="#作用范围-scope-单例还是原型" class="headerlink" title="作用范围 scope 单例还是原型"></a>作用范围 scope 单例还是原型</h4><p><img src="/../images/2024/12/1213/image-17.png" alt="alt text"></p><p>bean为单例的意思是在Spring的IOC容器中只会有该类的一个对象</p><p>bean对象只有一个就避免了对象的频繁创建与销毁，达到了bean对象的复用，性能高</p><p>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</p><p>因为所有请求线程共用一个bean对象，所以会存在线程安全问题。</p><p>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</p><p>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</p><p>表现层对象、业务层对象、数据层对象、工具对象适合交给容器管理，因为内部一般不会封装实例对象。</p><h3 id="bean实例化"><a href="#bean实例化" class="headerlink" title="bean实例化"></a>bean实例化</h3><p>这一部分需要研究bean的三种实例化方法：构造方法,静态工厂和实例工厂。后面两种了解一下就行，主要是写一些框架的时候可能会用到。</p><p>1.构造方法实例化：这是默认的方法，Spring的核心容器通过类的构造方法实例化对象，会执行默认的构造方法。</p><p>2.静态工厂方式创建</p><p><img src="/../images/2024/12/1213/image-18.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-19.png" alt="alt text"></p><p>将以上的静态工厂创造的方式替换为配置文件的方式，通过如下配置：</p><p><img src="/../images/2024/12/1213/image-20.png" alt="alt text"></p><p>3.实例工厂方式创建（FactoryBean）</p><p><img src="/../images/2024/12/1213/image-21.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-22.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-23.png" alt="alt text"></p><p>也可以通过Factory类来实现，这样配置类就可以少写一点了</p><p><img src="/../images/2024/12/1213/image-24.png" alt="alt text"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T getObject() throws Exception;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">default boolean isSingleton() &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><p>主要是bean从创建到销毁的过程：</p><ul><li>初始化容器<ol><li>创建对象(内存分配)</li><li>执行构造方法</li><li>执行属性注入(set操作)</li><li>执行bean初始化方法</li></ol></li><li>使用bean<ol><li>执行业务操作</li></ol></li><li>关闭&#x2F;销毁容器<ol><li>执行bean销毁方法</li></ol></li></ul><p>如何在bean的创建之后和销毁之前把我们需要添加的内容添加去，即bean的初始化和销毁方法，这边主要用到两种方式。</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p><img src="/../images/2024/12/1213/image-25.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-26.png" alt="alt text"></p><p>如何在JVM容器关闭之前先关闭IOC容器：</p><p><img src="/../images/2024/12/1213/image-27.png" alt="alt text"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>实现接口：</p><p><img src="/../images/2024/12/1213/image-28.png" alt="alt text"></p><h2 id="DI的几种注入方式；"><a href="#DI的几种注入方式；" class="headerlink" title="DI的几种注入方式；"></a>DI的几种注入方式；</h2><h3 id="Setter注入："><a href="#Setter注入：" class="headerlink" title="Setter注入："></a>Setter注入：</h3><p>分为引用数据类型注入和简单数据类型注入。name是有讲究的，一般我们设置set方法就是将首字母大写然后设置，所以设置name的时候是将首字母小写去掉set。这有没有约定的味道呢？</p><p>需求:在bookServiceImpl对象中注入userDao</p><ol><li>在BookServiceImpl中声明userDao属性，为userDao属性提供setter方法</li></ol><p><img src="/../images/2024/12/1213/image-29.png" alt="alt text"></p><ol start="2"><li>在配置文件中使用property标签注入 ref</li></ol><p><img src="/../images/2024/12/1213/image-30.png" alt="alt text"></p><p>简单数据类型注入：value</p><p><img src="/../images/2024/12/1213/image-31.png" alt="alt text"></p><h3 id="构造函数注入："><a href="#构造函数注入：" class="headerlink" title="构造函数注入："></a>构造函数注入：</h3><p>需求：将BookServiceImpl类中的bookDao修改成使用构造器的方式注入。</p><ol><li>将bookDao的setter方法删除掉，添加带有bookDao参数的构造方法。</li></ol><p><img src="/../images/2024/12/1213/image-32.png" alt="alt text"></p><ol start="2"><li>在applicationContext.xml中配置</li></ol><p><img src="/../images/2024/12/1213/image-33.png" alt="alt text"></p><p>name属性对应的值为构造函数中方法形参的参数名，必须要保持一致。<br>ref属性指向的是spring的IOC容器中其他bean对象。</p><p>简单数据类型注入一样用value即可：</p><p><img src="/../images/2024/12/1213/image-34.png" alt="alt text"></p><p>也可以通过type来设置：</p><p><img src="/../images/2024/12/1213/image-35.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-36.png" alt="alt text"></p><ol><li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</li></ol><ul><li>强制依赖指对象在创建的过程中必须要注入指定的参数</li></ul><ol start="2"><li>可选依赖使用setter注入进行，灵活性强</li></ol><ul><li>可选依赖指对象在创建过程中注入的参数可有可无</li></ul><ol start="3"><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相<br>对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选<br>依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注<br>入</li><li>自己开发的模块推荐使用setter注入</li></ol><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</p><p>自动装配的方式：</p><ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul><p>按类型：</p><p><img src="/../images/2024/12/1213/image-37.png" alt="alt text"></p><p>需要注入属性的类中对应属性的setter方法不能省略</p><p>被注入的对象必须要被Spring的IOC容器管理</p><p>按照类型在Spring的IOC容器中如果找到多个对象，会报NoUniqueBeanDefinitionException</p><p>按名称：</p><p><img src="/../images/2024/12/1213/image-38.png" alt="alt text"></p><ol><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推<br>荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ol><h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3><p><img src="/../images/2024/12/1213/image-39.png" alt="alt text"></p><p><img src="/../images/2024/12/1213/image-40.png" alt="alt text"></p><p>Properties是Java用来读取配置文件的一个类。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git关键点速记</title>
      <link href="/2024/12/12/Git%E5%85%B3%E9%94%AE%E7%82%B9%E9%80%9F%E8%AE%B0/"/>
      <url>/2024/12/12/Git%E5%85%B3%E9%94%AE%E7%82%B9%E9%80%9F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言：最近又重温了下廖雪峰老师的Git教程，实在是通俗易懂、醍醐灌顶，想记录一下这个Git教程的关键点，便于以后查看。</p></blockquote><p>Git的主要作用是版本管理和分支管理，对个人开发者来说，可能版本管理会比较重要，分支管理在协作开发中会比较有作用。</p><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><p>初始化一个Git仓库，首先得下载Git <a href="https://git-scm.com/downloads">Git - Downloads</a><br>然后进入一个目录，最好是非英文<br>执行命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建完仓库之后，会有隐藏的.git目录，这里面就存放git的版本信息等。</p><p><strong>Git管理是文本文件，对于二进制文件，只能知道其创建还是删除了，对于修改的操作是不知道的，像图片、视频、docx文档等都是二进制文件。</strong></p><h3 id="Git的版本管理"><a href="#Git的版本管理" class="headerlink" title="Git的版本管理"></a>Git的版本管理</h3><p>先看Git版本库模型：</p><p><img src="/../images/2024/12/1212/img.png" alt="img.png"><br>我们在Git管理的目录中对文件进行修改（增删改）之后，可以执行以下git命令<br>以readme.txt为例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m &quot;XXX&quot;</span><br></pre></td></tr></table></figure><p><strong>add添加到暂存区，commit提交到本地仓库。</strong></p><p><strong>可以多次add，一次commit，这样暂存区中的所有修改都会提交到本地仓库中去。</strong></p><h4 id="Git的回退操作"><a href="#Git的回退操作" class="headerlink" title="Git的回退操作"></a>Git的回退操作</h4><p>可以分为两种：</p><h5 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h5><p>第一种是回退版本，即已经提交了之后想要回退到之前的提交状态或者叫之前的版本。这里需要知道一个概念，当前的版本一般用 HEAD 来表示，HEAD相当于一个指针，指向当前的提交状态。</p><p>我们可以先查看提交历史，然后使用 git reset 根据版本号回退到之前的版本；如果回退之后后悔了想要恢复到新版本，可以先 git reflog，然后再 git reset；</p><p>如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log 查看提交历史</span><br><span class="line">git reset --hard 1094a 根据提交ID回退      git reset --hard HEAD^ 这个表示上一个版本，上上个就是HEAD^^ 前一百个就是HEAD~100</span><br><span class="line"></span><br><span class="line">git reflog 查看命令历史 会出现当前命令执行时的版本号（提交ID）</span><br><span class="line">git reset --hard 1094a 根据提交ID回退</span><br></pre></td></tr></table></figure><h5 id="修改回退"><a href="#修改回退" class="headerlink" title="修改回退"></a>修改回退</h5><p>Git管理的是修改而不是文件，所以如果你对一个文件改了又改回去，那么git status之后是没有变化的；</p><p>当然修改也可以回退，这里可以用 git checkout – file命令，其实也可以用 git restore命令，以后可以直接用 git status，然后看提示命令就行。</p><p>git checkout – file ：</p><p>一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次 git commit 或 git add 时的状态。</p><p>而 git reset 也可以将提交到暂存的修改撤销回工作区。</p><p>所以：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.如果是工作区修改</span><br><span class="line">git status</span><br><span class="line">git checkout -- readme.txt 其实是用版本库中的文件替换工作区文件</span><br><span class="line"></span><br><span class="line">2.如果是暂存区修改回退，然后再撤销修改</span><br><span class="line">git status</span><br><span class="line">git reset HEAD readme.txt</span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><h3 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h3><p>一般我们用Github、Gitee 或者自己的服务器做远程仓库，Git的理念是分布式协作，是没有远程仓库的，我们加上远程仓库的概念是为了让协作更方便。开发的时候仍然可以不需要像SVN一样必须联网才能写代码。</p><p>如果用Github的话需要先连接公钥私钥，这里只做Git命令的分享。</p><p>1.以Github为例，我们可以先在本地创建仓库，后在Github上创建仓库，然后将两者连接，再将本地的内容push到远程仓库去。</p><p>2.第二种是先创建Github仓库，然后clone到本地再进行代码开发；</p><p>第一种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git</span><br><span class="line">git push -u origin master</span><br><span class="line">由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的</span><br><span class="line">master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class="line">git remote -v 查看远程库信息</span><br><span class="line">git remote rm origin 删除远程库连接 origin只是个名字，可以在创建连接时自定义。</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>分支是比较重要的内容，这张图可以比较好的理解分支，HEAD是当前的分支，其实是指向当前分支的最新提交结点。<br><img src="/../images/2024/12/1212/img_1.png" alt="img_1.png"></p><p>Git鼓励大量使用分支：</p><p>查看分支：git branch</p><p>创建分支：git branch <name></p><p>切换分支：git checkout <name>或者git switch <name></p><p>创建+切换分支：git checkout -b <name>或者git switch -c <name></p><p>合并某分支到当前分支：git merge <name></p><p>删除分支：git branch -d <name></p><p>我一般喜欢用git switch</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>对于相同文件的像同行，如果每个分支有不同的代码，会出现冲突，这个时候Git不能快速处理，需要手动解决冲突。</p><p><img src="/../images/2024/12/1212/img_2.png" alt="img_2.png"></p><p>可以先用以下命令合并分支</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge feature1</span><br></pre></td></tr></table></figure><p>然后去vscode或其他编辑上解决冲突，可以全accept incoming ，也可以全部reject。</p><p>解决完冲突之后再次提交，就是下面这样的：</p><p><img src="/../images/2024/12/1212/img_3.png" alt="img3.png"></p><p>可以用以下命令查看git提交图：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="Fast-Forward"><a href="#Fast-Forward" class="headerlink" title="Fast Forward"></a>Fast Forward</h4><p>在没有冲突时，Git会用FF的模式，这样子的提交记录就会很平滑，只有一条直线，看不出来这里是合并过的。所以我们可以用 –no-ff 禁止ff，如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>那么，提交记录就会变成这样：</p><p><img src="/../images/2024/12/1212/img_4.png" alt="img4.png"></p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="/../images/2024/12/1212/img_5.png" alt="img5.png"></p><h4 id="多人协作模式"><a href="#多人协作模式" class="headerlink" title="多人协作模式"></a>多人协作模式</h4><p>一般会有master分支、dev分支、bug分支、feature分支等。</p><ol><li>首先，可以尝试用git push origin <branch-name>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！<br>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin&#x2F;<branch-name>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</li></ol><p>git pull 是 git fetch + git merge：</p><p><img src="/../images/2024/12/1212/img_6.png" alt="img6.png"></p><h4 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h4><ul><li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p></li><li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p></li></ul><h3 id="自建服务器"><a href="#自建服务器" class="headerlink" title="自建服务器"></a>自建服务器</h3><p>公司用的自己的服务器做远程仓库，可以使用以下命令创建裸仓库，裸仓库不会有工作目录，但是会有修改信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare sample.git</span><br></pre></td></tr></table></figure><p>然后再将自己的电脑和这个远程仓库连接就行。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强烈推荐！2024年最新开源Java项目脚手架</title>
      <link href="/2024/12/08/%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%812024%E5%B9%B4%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90Java%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2024/12/08/%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%812024%E5%B9%B4%E6%9C%80%E6%96%B0%E5%BC%80%E6%BA%90Java%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="强烈推荐！2024年最新开源Java项目脚手架"><a href="#强烈推荐！2024年最新开源Java项目脚手架" class="headerlink" title="强烈推荐！2024年最新开源Java项目脚手架"></a>强烈推荐！2024年最新开源Java项目脚手架</h1><p>最近实习做项目，在研究Java项目相关的脚手架。今天推荐几个 Java 项目快速开发脚手架。以下项目来自于码云Gitee以及Github，大家可以参考一下这些脚手架的代码，我觉得风格迥异，但是整体质量都很不错。</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>ruoyi-vue</li><li>Snowy</li><li>ruoyi-vue-pro</li><li>pig</li><li>eladmin</li></ol><h2 id="ruoyi-vue-若依"><a href="#ruoyi-vue-若依" class="headerlink" title="ruoyi-vue 若依"></a>ruoyi-vue 若依</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>一直想做一款后台管理系统，看了很多优秀的开源项目但是发现没有合适的。于是利用空闲休息时间开始自己写了一套后台系统。如此有了若依。</p></blockquote><p>若依是作者的女儿名字，这也是一个非常出名的项目了，用来自己做项目和外包快速开发是没有问题的。</p><h4 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>若依官网：<a href="http://ruoyi.vip/">http://ruoyi.vip(opens new window)</a></li><li>演示地址：<a href="http://demo.ruoyi.vip/">http://demo.ruoyi.vip(opens new window)</a></li><li>代码下载：<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue</a></li></ul><h3 id="推荐理由"><a href="#推荐理由" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>完善的文档</strong></em>：ruoyi-vue提供了详细的开发文档，对新手友好，易于上手。</li><li><em><strong>丰富的功能</strong></em>：内置多种常用功能，减少重复开发工作。 </li><li><em><strong>社区活跃</strong></em>：拥有庞大的用户群体和活跃的社区，遇到问题时容易找到解决方案。</li></ul><h3 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>企业级应用开发</strong></em>：所有的 Web 应用程序，如网站管理后台，网站会员中心，CMS，CRM，OA。</li></ul><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208224808448.png" alt="image-20241208224808448"></p><h2 id="2-Snowy"><a href="#2-Snowy" class="headerlink" title="2. Snowy"></a>2. Snowy</h2><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>Snowy是一个基于Spring Boot和Vue的前后端分离后台管理系统框架。它注重轻量化和模块化，提供了代码生成器等工具，大大提升了开发效率。</p><h4 id="相关网站-1"><a href="#相关网站-1" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>官方网站：<a href="http://snowy.layui.com/">http://snowy.layui.com/</a> </li><li>GitHub：<a href="https://github.com/xiaonuobase/snowy">https://github.com/xiaonuobase/snowy</a></li></ul><h3 id="推荐理由-1"><a href="#推荐理由-1" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>轻量化</strong></em>：Snowy的设计理念是轻量化，便于维护和定制。 </li><li><em><strong>功能非常全</strong></em>：项目架构图就在项目中放了好几张，可见一斑。吃透这个项目可以学会很多。</li><li><em><strong>国产化</strong></em>：软件层面完全符合等保测评要求，同时实现国产化机型、中间件、数据库适配。 这个团队一共五个人，也是非常的厉害。也有一些外包的需求。</li></ul><h3 id="适合场景-1"><a href="#适合场景-1" class="headerlink" title="适合场景"></a>适合场景</h3><p><em><strong>中大型项目</strong></em>：适用于需要快速启动且注重系统轻量化的中大型项目。 </p><h3 id="项目展示-1"><a href="#项目展示-1" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208225245139.png" alt="image-20241208225245139"></p><h2 id="3-ruoyi-vue-pro"><a href="#3-ruoyi-vue-pro" class="headerlink" title="3. ruoyi-vue-pro"></a>3. ruoyi-vue-pro</h2><h3 id="项目简介-1"><a href="#项目简介-1" class="headerlink" title="项目简介"></a>项目简介</h3><p>ruoyi-vue-pro是基于ruoyi-vue的升级版，增加了更多高级功能和优化。它同样是一个前后端分离的系统，但提供了更多企业级特性。这是另一个人开发的，他们团队的主要产品是yudao，也可以关注一下，<a href="https://gitee.com/yudaocode/yudao-boot-mini%E3%80%82%E8%B7%9FSnowy%E4%B8%80%E6%A0%B7%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%AA%E5%BE%88%E5%BC%BA%E5%8A%B2%E7%9A%84%E5%9B%A2%E9%98%9F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%A4%96%E5%8C%85%E9%9C%80%E6%B1%82%E3%80%82">https://gitee.com/yudaocode/yudao-boot-mini。跟Snowy一样，也是个很强劲的团队，可以做外包需求。</a></p><h4 id="相关网站-2"><a href="#相关网站-2" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>GitHub：<a href="https://github.com/YunaiV/ruoyi-vue-pro">https://github.com/YunaiV/ruoyi-vue-pro</a></li><li>演示地址【Vue3 + element-plus】：[<a href="http://dashboard-vue3.yudao.iocoder.cn/">http://dashboard-vue3.yudao.iocoder.cn</a></li><li>启动文档：<a href="https://doc.iocoder.cn/quick-start/">https://doc.iocoder.cn/quick-start/</a></li></ul><h3 id="推荐理由-2"><a href="#推荐理由-2" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>功能丰富</strong></em>：在ruoyi-vue的基础上，增加了更多高级功能，如工作流、调度中心等。</li><li><em><strong>性能优化</strong></em>：针对性能进行了优化，更适合大型项目。 </li><li><em><strong>开源友好</strong></em>：采用了MIT协议，所有代码全部开源，没有商业版本，这也是他们主打的一个特点。同时功能也非常丰富。</li></ul><h3 id="适合场景-2"><a href="#适合场景-2" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>大型企业项目</strong></em>：适用于需要高级功能和性能优化的大型企业级应用。</li></ul><h3 id="项目展示-2"><a href="#项目展示-2" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208230425256.png" alt="image-20241208230425256"></p><h2 id="4-pig"><a href="#4-pig" class="headerlink" title="4. pig"></a>4. pig</h2><h3 id="项目简介-2"><a href="#项目简介-2" class="headerlink" title="项目简介"></a>项目简介</h3><p>pig是一个基于Spring Boot 2.x和Vue的前后端分离的快速开发平台。它提供了丰富的组件和工具，旨在帮助开发者快速构建系统。 </p><h4 id="相关网站-3"><a href="#相关网站-3" class="headerlink" title="相关网站"></a>相关网站</h4><ul><li>官方网站：<a href="http://pig4cloud.com/">http://pig4cloud.com/</a></li><li>GitHub：<a href="https://github.com/pigxcloud/pig">https://github.com/pigxcloud/pig</a></li></ul><h3 id="推荐理由-3"><a href="#推荐理由-3" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>快速开发</strong></em>：提供了大量的快速开发工具和组件，如代码生成器、接口文档等。 </li><li><em><strong>易于部署</strong></em>：支持Docker部署，简化了部署流程。 </li><li><em><strong>社区支持</strong></em>：拥有活跃的社区，提供及时的技术支持和交流。</li></ul><h3 id="适合场景-3"><a href="#适合场景-3" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>初创公司和敏捷开发团队</strong></em>：适用于需要快速迭代和部署的初创公司或敏捷开发团队。</li></ul><h2 id="5-eladmin"><a href="#5-eladmin" class="headerlink" title="5. eladmin"></a>5. eladmin</h2><h3 id="项目简介-3"><a href="#项目简介-3" class="headerlink" title="项目简介"></a>项目简介</h3><p>eladmin是一个基于Spring Boot和Vue的后台管理系统，它集成了众多实用的功能模块，如日志管理、定时任务等，是一个全面的后台解决方案。 </p><h4 id="相关网站-4"><a href="#相关网站-4" class="headerlink" title="相关网站"></a>相关网站</h4><p>官方网站：<a href="https://el-admin.vip/">https://el-admin.vip/</a><br>GitHub：<a href="https://github.com/elunez/eladmin">https://github.com/elunez/eladmin</a></p><h3 id="推荐理由-4"><a href="#推荐理由-4" class="headerlink" title="推荐理由"></a>推荐理由</h3><ul><li><em><strong>功能全面</strong></em>：涵盖了后台管理系统的各个方面，减少了额外的开发工作。 </li><li><em><strong>安全可靠</strong></em>：注重系统安全，提供了多种安全策略。 </li><li><em><strong>界面美观</strong></em>：基于Element UI，界面美观且用户体验良好。</li></ul><h3 id="适合场景-4"><a href="#适合场景-4" class="headerlink" title="适合场景"></a>适合场景</h3><ul><li><em><strong>后台管理工具开发</strong></em>：一个很经典的开发项目框架，适合后台管理工具的开发。</li></ul><h3 id="项目展示-3"><a href="#项目展示-3" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="/../images/2024/12/1208/image-20241208231011899.png" alt="image-20241208231011899"></p>]]></content>
      
      
      <categories>
          
          <category> Java技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再出后续！多媒体实验之宽幅和选做篇</title>
      <link href="/2024/04/18/%E7%BB%AD%E9%9B%86/"/>
      <url>/2024/04/18/%E7%BB%AD%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="再出后续！多媒体实验之宽幅和选做篇"><a href="#再出后续！多媒体实验之宽幅和选做篇" class="headerlink" title="再出后续！多媒体实验之宽幅和选做篇"></a>再出后续！多媒体实验之宽幅和选做篇</h1><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>3、设计实现一个视频特效程序，能够将两个（或多个）视频拼接成一个宽幅视频。</p><p>4、试将水波纹模拟程序和YUV视频显示程序结合起来，实现在视频中叠加水波纹（选做）。</p><h3 id="内容1：宽幅视频"><a href="#内容1：宽幅视频" class="headerlink" title="内容1：宽幅视频"></a>内容1：宽幅视频</h3><p>之前的版本中您可以看到我是直接再创建了一个det_image2来存储第二张图片，然后同时显示det_image和det_image2。但是这样的做法似乎不符合内容的要求。再思考了一下，真正的做法应该是构建一个两倍宽的背景图，再将det_image2的宽度设为原来的2倍，然后在放置像素点时，将两张图片的像素都放进去，直接显示det_image2。</p><ol><li><p>构建2倍宽的背景图<img src="/../images/2024/04/0418/xuji/01%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8.jpg" alt="image-20240418111314658"></p></li><li><p>设置det_image2的宽度为2倍宽，我们用这个变量来显示，无论用det_image还是det_image2都是一样的：<img src="/../images/2024/04/0418/xuji/02%E4%B8%A4%E5%80%8D%E5%AE%BD.jpg" alt="02两倍宽"></p></li><li><p>关键代码如下：</p></li></ol><p><img src="/../images/2024/04/0418/xuji/03%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%811.png" alt="image-20240418111840992"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].r = r2;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].g = g2;</span><br><span class="line">det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j + <span class="number">352</span>].b = b2;</span><br></pre></td></tr></table></figure><ol start="4"><li>显示det_image2的时候宽度也要设置为两倍；<img src="/../images/2024/04/0418/xuji/04%E4%B8%A4%E5%80%8D%E6%98%BE%E7%A4%BA.jpg" alt="04两倍显示"></li><li>效果如下，看起来是一样的，但是原理是一样的：<img src="/../images/2024/04/0418/xuji/05%E6%95%88%E6%9E%9C.jpg" alt="image-20240418112116881"></li></ol><h3 id="内容2：选做部分（视频波纹）"><a href="#内容2：选做部分（视频波纹）" class="headerlink" title="内容2：选做部分（视频波纹）"></a>内容2：选做部分（视频波纹）</h3><p>原理是这样的：只需要修改渲染函数中的内容即可，实验二中是对bmp图片的像素点进行偏移量的转换，对于视频来说，那么首先yuv转码为rgb的格式，然后对每一帧的rgb值也进行像素点的偏移。所以关键的代码是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; cyDib - <span class="number">1</span>; y++) <span class="comment">//y就是i，x就是j没问题</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; cxDib - <span class="number">1</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算偏移</span></span><br><span class="line">        <span class="type">int</span> xoff = buffer_2[y][x - <span class="number">1</span>] - buffer_2[y][x + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> yoff = buffer_2[y - <span class="number">1</span>][x] - buffer_2[y + <span class="number">1</span>][x];</span><br><span class="line">        <span class="comment">// 边界处理</span></span><br><span class="line">        <span class="keyword">if</span> (xoff &gt;= cxDib)xoff = cxDib - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (xoff &lt; <span class="number">0</span>)xoff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (yoff &gt;= cyDib)yoff = cyDib - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (yoff &lt; <span class="number">0</span>)yoff = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 处理图像偏移，以背景图片做波纹</span></span><br><span class="line">        <span class="comment">/*det_image[y][x].b = *(pbits + 0 + (x + xoff) * 3 + (y + yoff) * cxDib * 3); </span></span><br><span class="line"><span class="comment">        det_image[y][x].g = *(pbits + 1 + (x + xoff) * 3 + (y + yoff) * cxDib * 3);</span></span><br><span class="line"><span class="comment">        det_image[y][x].r = *(pbits + 2 + (x + xoff) * 3 + (y + yoff) * cxDib * 3);*/</span></span><br><span class="line"></span><br><span class="line">        det_image[y][x].b = det_image[y + yoff][x + xoff].b;</span><br><span class="line">        det_image[y][x].g = det_image[y + yoff][x + xoff].g;</span><br><span class="line">        det_image[y][x].r = det_image[y + yoff][x + xoff].r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示当前帧</span></span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br></pre></td></tr></table></figure><p>效果如下：<img src="/../images/2024/04/0418/xuji/06%E6%95%88%E6%9E%9C2.jpg" alt="06效果2"></p><p>更多内容可以查看：<a href="https://cds007.github.io/">https://cds007.github.io/</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最终卷！实验三！2024 CSU 多媒体技术与应用实验三（详细版）</title>
      <link href="/2024/04/17/%E6%9C%80%E7%BB%88%E5%8D%B7%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/17/%E6%9C%80%E7%BB%88%E5%8D%B7%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1、YUV视频文件显示程序为基础，结合图像融合原理与方法，设计并实现一个给YUV视频添加动态字幕的程序（类似卡拉OK动态字幕）。</p><p>2、设计实现一个视频特效程序，能够将两个视频实现淡入淡出。</p><p>3、设计实现一个视频特效程序，能够将两个（或多个）视频拼接成一个宽幅视频。</p><p>4、试将水波纹模拟程序和YUV视频显示程序结合起来，实现在视频中叠加水波纹（选做）。</p><h3 id="内容1：添加动态字幕"><a href="#内容1：添加动态字幕" class="headerlink" title="内容1：添加动态字幕"></a>内容1：添加动态字幕</h3><ol><li>首先，创建一个WIN32项目，如何创建项目？请参考这篇文章：<a href="https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501">https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501</a></li><li>导入我们的素材：</li></ol><p><img src="/../images/2024/04/0417/lab3/01%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E7%B4%A0%E6%9D%90.jpg" alt="01新建项目导入素材"></p><ol start="3"><li>（附：如果您感兴趣的话，可以做一下视频文件的显示内容，跟实验部分没关系，但是可以显示多种类型的视频格式，具体请参考教材中的代码，效果如下，当然我不是为了放我们gege的视频）<img src="/../images/2024/04/0417/lab3/02%E6%8C%89%E7%85%A7%E4%B9%A6%E6%9C%AC%E4%B8%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%EF%BC%88%E4%B8%8D%E6%98%AF%E5%AE%9E%E9%AA%8C%E5%86%85%E5%AE%B9%EF%BC%89.jpg" alt="02按照书本上代码实现视频的播放（不是实验内容）"></li><li>回到实验部分，接下来我们要完成的是如何显示一个YUV的视频格式；首先，在framework.h最下面添加一个头文件。<img src="/../images/2024/04/0417/lab3/03%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt="03头文件"></li><li>然后，回到主函数，在最前面添加如下宏定义：<img src="/../images/2024/04/0417/lab3/04%E4%B8%BB%E5%87%BD%E6%95%B0%E5%A4%B4%E9%83%A8.jpg" alt="04主函数头部"></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_WIDTH    352</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_HIGHT    288</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">COLOR</span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE b;</span><br><span class="line">    BYTE g;</span><br><span class="line">    BYTE r;</span><br><span class="line">&#125;RGBCOLOR;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>设置用于视频加载和背景图片（background.bmp）的全局变量，复制下面的代码块中的即可，图片给的少了融合图像的部分，我们内容1只用到了det_image，内容二开始会用到det_image2，所以您不妨先复制下来再说，待会都用得到的；<img src="/../images/2024/04/0417/lab3/05%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9const.jpg" alt="05全局变量修改const"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于加载视频文件</span></span><br><span class="line"><span class="type">static</span> FILE* ifp;  <span class="comment">//file pointer</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;foreman.yuv&quot;</span>;</span><br><span class="line"><span class="type">static</span> BYTE      mybuf[<span class="number">45621248</span>]; <span class="comment">//arry,store the video file</span></span><br><span class="line"><span class="type">static</span> BYTE* pBity, * pBitu, * pBitv;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>       y[<span class="number">288</span>][<span class="number">352</span>], u[<span class="number">144</span>][<span class="number">176</span>], v[<span class="number">144</span>][<span class="number">176</span>];</span><br><span class="line"><span class="comment">//背景图像</span></span><br><span class="line"><span class="type">static</span> FILE* ifpback;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* filenameback = <span class="string">&quot;background.bmp&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> mybufback[IMAGE_WIDTH * IMAGE_HIGHT * <span class="number">3</span> + <span class="number">100</span>];</span><br><span class="line"><span class="type">static</span> BITMAPFILEHEADER* pbmfh;</span><br><span class="line"><span class="type">static</span> BITMAPINFO* pbmi;</span><br><span class="line"><span class="type">static</span> BYTE* pbits;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>              cxDib, cyDib;</span><br><span class="line"><span class="comment">//融合图像</span></span><br><span class="line"><span class="type">static</span> COLOR det_image[IMAGE_HIGHT][IMAGE_WIDTH];<span class="comment">//要显示的目标图像1</span></span><br><span class="line"><span class="type">static</span> COLOR det_image2[IMAGE_HIGHT][IMAGE_WIDTH];<span class="comment">//要显示的目标图像2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> n = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>在主函数中添加如下代码，用来打开视频文件和图像文件：<img src="/../images/2024/04/0417/lab3/06%E4%B8%BB%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81.jpg" alt="06主函数代码"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开视频文件</span></span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;ifp, filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mybuf, <span class="number">45621248</span>, <span class="number">1</span>, ifp);</span><br><span class="line">pBity = mybuf;</span><br><span class="line">pBitu = mybuf + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">pBitv = mybuf + <span class="number">352</span> * <span class="number">288</span> + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开图像文件</span></span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;ifpback, filenameback, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mybufback, <span class="number">307200</span>, <span class="number">1</span>, ifpback);</span><br><span class="line">pbmfh = (BITMAPFILEHEADER*)mybufback;</span><br><span class="line">pbmi = (BITMAPINFO*)(pbmfh + <span class="number">1</span>);</span><br><span class="line">pbits = (BYTE*)pbmfh + pbmfh-&gt;bfOffBits;</span><br><span class="line">cxDib = pbmi-&gt;bmiHeader.biWidth;</span><br><span class="line">cyDib = pbmi-&gt;bmiHeader.biHeight;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>添加一个计时器（你懂的，在Resource.h文件中添加）；</p><p><img src="/../images/2024/04/0417/lab3/07%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="07计时器"></p></li><li><p>初始化计时器，没错，就是放在InitInstance函数下面，实验二中提到过：</p></li></ol><p><img src="/../images/2024/04/0417/lab3/08%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="08初始化计时器"></p><ol start="10"><li>主窗口过程函数新增代码（图片没截取全，代码我放在下面了）（我这儿代码跟书上的不太一样，注意别出现图片倒转的情况了）原理解释：其实就是读取每一帧的YUV矩阵，然后转成了RGB，要么从头读要么从尾读，都可以的。注意！！！！HDC的定义处别写错了：</li></ol><p><img src="/../images/2024/04/0417/lab3/09%E4%B8%BB%E7%AA%97%E5%8F%A3%E8%BF%87%E7%A8%8B%E6%96%B0%E5%A2%9E%E4%BB%A3%E7%A0%81.jpg" alt="09主窗口过程新增代码"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> wmId, wmEvent;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HDC hdc;<span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="type">int</span> changeColor;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新添加代码的开始处</span></span><br><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">    hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">    n = n + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">299</span>) n = <span class="number">0</span>;</span><br><span class="line">    pBity = pBity + (<span class="number">352</span> * <span class="number">288</span> + <span class="number">2</span> * (<span class="number">176</span> * <span class="number">144</span>)) * n;</span><br><span class="line">    pBitu = pBity + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">    pBitv = pBitu + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//read a new frame of the yuv file</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">144</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">176</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            u[i][j] = *(pBitu + j + <span class="number">176</span> * (i));</span><br><span class="line">            v[i][j] = *(pBitv + j + <span class="number">176</span> * (i));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//read y，and translate yuv int rgb and display the pixel</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//read y</span></span><br><span class="line">            y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">            y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">            <span class="comment">//translate</span></span><br><span class="line">            <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">                <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">            <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line">            <span class="comment">//存储到目标图像矩阵</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 显示当前帧</span></span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">        <span class="number">30</span>,</span><br><span class="line">        <span class="number">20</span>,</span><br><span class="line">        <span class="number">352</span>,</span><br><span class="line">        <span class="number">288</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">288</span>,</span><br><span class="line">        det_image,</span><br><span class="line">        pbmi,</span><br><span class="line">        DIB_RGB_COLORS);</span><br><span class="line">    <span class="comment">// 恢复指向图像数据首字节</span></span><br><span class="line">    pBity = mybuf;</span><br><span class="line">    <span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 新添加代码结束</span></span><br></pre></td></tr></table></figure><ol start="11"><li>显示效果就是这样子的：</li></ol><img src="E:\BaiduSyncdisk\大三下\多媒体技术应用\实验\实验三\水印版\WPS图片批量处理\10成功显示.jpg" alt="10成功显示" style="zoom:50%;" /><ol start="12"><li>接下来我们做字幕的部分，咱不着急，先从普通字幕开始做起，<strong>原理是什么呢？</strong>其实原理就是图片的下方有一个灰色的背景图，这个背景图只有文字那一部分不是黑的，那么我们在读取背景的时候，如果这个像素是黑的，那么我们就将这个像素的值用视频帧的rgb值来替代，如果这个像素不是黑的，那么就用背景图的像素来替代。<strong>那么如何添加你自己的字幕呢？</strong>我们可以用windows自带的画图工具去添加文字，然后保存为bmp文件即可，background.bmp是老师给的软件资源里面的，字幕别是黑色就行：<img src="/../images/2024/04/0417/lab3/12%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%B7%BB%E5%8A%A0%E5%AD%97%E5%B9%95.jpg" alt="12画图工具添加字幕"></li><li>然后我们将第10步的代码中添加图像融合的步骤，像下面这样子：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">n = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n&gt;<span class="number">299</span>) n = <span class="number">0</span>;</span><br><span class="line">pBity = pBity + (<span class="number">352</span> * <span class="number">288</span> + <span class="number">2</span> * (<span class="number">176</span> * <span class="number">144</span>))*n;</span><br><span class="line">pBitu = pBity + <span class="number">352</span> * <span class="number">288</span>;</span><br><span class="line">pBitv = pBitu + <span class="number">176</span> * <span class="number">144</span>;</span><br><span class="line"><span class="comment">//read a new frame of the yuv file</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">144</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">176</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">u[i][j] = *(pBitu + j + <span class="number">176</span> * (i));</span><br><span class="line">v[i][j] = *(pBitv + j + <span class="number">176</span> * (i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//read y，and translate yuv int rgb and display the pixel</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">288</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">352</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//read y</span></span><br><span class="line">y[i][j] = *(pBity + j + (i)* <span class="number">352</span>);</span><br><span class="line"><span class="comment">//translate</span></span><br><span class="line"><span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (r&lt;<span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r&gt;<span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line"><span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + </span><br><span class="line"><span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (g&lt;<span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (g&gt;<span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line"><span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (b&lt;<span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b&gt;<span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"><span class="comment">// 取字幕图标图像的像素值</span></span><br><span class="line"><span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>)*cxDib * <span class="number">3</span>);</span><br><span class="line"> <span class="comment">// 如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line"><span class="keyword">if</span> (rback ==<span class="number">0</span> &amp;&amp; gback ==<span class="number">0</span> &amp;&amp; bback ==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">&#125;<span class="keyword">else</span><span class="comment">//否则，就传送字幕图标图像的当前像素值到目标图像</span></span><br><span class="line">&#123;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line"><span class="number">30</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="number">352</span>,</span><br><span class="line"><span class="number">288</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">288</span>,</span><br><span class="line">det_image,</span><br><span class="line">pbmi,</span><br><span class="line">DIB_RGB_COLORS);</span><br><span class="line">pBity = mybuf; <span class="comment">// let pBity to point at the first place of the file</span></span><br><span class="line"><span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>14.单字幕效果就是这样子的啦：</p><p><img src="/../images/2024/04/0417/lab3/13%E5%8D%95%E5%AD%97%E5%B9%95%E6%95%88%E6%9E%9C.jpg" alt="13单字幕效果"></p><ol start="15"><li><p>然后我们来完成动态字幕的效果吧！首先！我们添加一个随机变量changeColor来随时间的变化而变化，让changeColor随着n变化即可。</p><p><img src="/../images/2024/04/0417/lab3/14changeColor.jpg" alt="14changeColor"></p></li><li><p>然后再添加这样一个else if就可以啦，意思就是y小于这个值时显示绿色，y大于这个值时显示原来的字幕，（颜色是自己定义的）<img src="/../images/2024/04/0417/lab3/14%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E8%AE%A9%E5%85%B6%E9%9A%8F%E7%9D%80%E5%B8%A7%E6%95%B0%E5%8F%98%E5%8C%96.jpg" alt="14增加一个变量让其随着帧数变化"></p></li><li><p>动态字幕的效果如下：</p></li></ol><p><img src="/../images/2024/04/0417/lab3/16%E5%8A%A8%E6%80%81%E5%AD%97%E5%B9%95%E6%95%88%E6%9E%9C.jpg" alt="16动态字幕效果"></p><h3 id="内容2：淡入淡出"><a href="#内容2：淡入淡出" class="headerlink" title="内容2：淡入淡出"></a>内容2：淡入淡出</h3><ol><li>添加全局变量：</li></ol><p><img src="/../images/2024/04/0417/lab3/17%E8%A7%86%E9%A2%912%E5%8F%98%E9%87%8F.jpg" alt="17视频2变量"></p><ol start="2"><li>主函数中打开视频2（跟内容1如出一辙的)：</li></ol><p><img src="/../images/2024/04/0417/lab3/18%E6%89%93%E5%BC%80%E8%A7%86%E9%A2%912.jpg" alt="18打开视频2"></p><ol start="3"><li>修改主过程函数：</li></ol><p><img src="/../images/2024/04/0417/lab3/19%E4%BF%AE%E6%94%B9WM_TIMER%EF%BC%88%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA+%E5%AD%97%E5%B9%95%E7%89%88%EF%BC%89.jpg" alt="19修改WM_TIMER（淡入淡出+字幕版）"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">关键代码如下：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//read y</span></span><br><span class="line">        y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">        y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">        <span class="comment">//translate</span></span><br><span class="line">        <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第2个视频</span></span><br><span class="line">        <span class="type">int</span> r2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &lt; <span class="number">0</span>) r2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &gt; <span class="number">255</span>) r2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &lt; <span class="number">0</span>) g2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &gt; <span class="number">255</span>) g2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &lt; <span class="number">0</span>) b2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &gt; <span class="number">255</span>) b2 = <span class="number">255</span>;</span><br><span class="line">        <span class="comment">//定义透明度参数</span></span><br><span class="line">        <span class="type">double</span> para = n / <span class="number">300.0</span>;</span><br><span class="line">        <span class="comment">////两帧图像的当前像素的融合，结果放入目标图像矩阵中</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字幕图标图像的像素值</span></span><br><span class="line">        <span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line">        <span class="keyword">if</span> (rback == <span class="number">0</span> &amp;&amp; gback == <span class="number">0</span> &amp;&amp; bback == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*det_image[288 - i - 1][j].r = r;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].g = g;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].b = b;*/</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现单字幕注释这个else if</span></span><br><span class="line">        <span class="comment">//左半部分的字幕颜色改变部分</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; changeColor) &#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = <span class="number">0</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback + <span class="number">100</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右半部分颜色不改变</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>效果如下：</p><p><img src="/../images/2024/04/0417/lab3/20%E6%95%88%E6%9E%9C.jpg" alt="20效果"></p></li></ol><h3 id="内容3：宽幅视频"><a href="#内容3：宽幅视频" class="headerlink" title="内容3：宽幅视频"></a>内容3：宽幅视频</h3><ol><li><p>这个也比较简单，在上面代码的基础上，直接修改主过程函数如下：</p><p><img src="/../images/2024/04/0417/lab3/21%E6%B7%BB%E5%8A%A0%E5%AE%BD%E5%B9%85%E8%A7%86%E9%A2%91.jpg" alt="21添加宽幅视频"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">288</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">352</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//read y</span></span><br><span class="line">        y[i][j] = *(pBity + j + (i) * <span class="number">352</span>);</span><br><span class="line">        y2[i][j] = *(pBity2 + j + (i) * <span class="number">352</span>);</span><br><span class="line">        <span class="comment">//translate</span></span><br><span class="line">        <span class="type">int</span> r = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span>) r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">255</span>) r = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; <span class="number">255</span>) g = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b = (<span class="number">298</span> * (y[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">255</span>) b = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第2个视频</span></span><br><span class="line">        <span class="type">int</span> r2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">409</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &lt; <span class="number">0</span>) r2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (r2 &gt; <span class="number">255</span>) r2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> g2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) - <span class="number">100</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) - <span class="number">208</span> * (v2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) +</span><br><span class="line">            <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &lt; <span class="number">0</span>) g2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g2 &gt; <span class="number">255</span>) g2 = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> b2 = (<span class="number">298</span> * (y2[i][j] - <span class="number">16</span>) + <span class="number">516</span> * (u2[i / <span class="number">2</span>][j / <span class="number">2</span>] - <span class="number">128</span>) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &lt; <span class="number">0</span>) b2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b2 &gt; <span class="number">255</span>) b2 = <span class="number">255</span>;</span><br><span class="line">        <span class="comment">//定义透明度参数</span></span><br><span class="line">        <span class="type">double</span> para = n / <span class="number">300.0</span>;</span><br><span class="line">        <span class="comment">////两帧图像的当前像素的融合，结果放入目标图像矩阵中</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//宽幅视频</span></span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g;</span><br><span class="line">        det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r2;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g2;</span><br><span class="line">        det_image2[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字幕图标图像的像素值</span></span><br><span class="line">        <span class="type">int</span> rback = *(pbits + <span class="number">2</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> gback = *(pbits + <span class="number">1</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> bback = *(pbits + <span class="number">0</span> + j * <span class="number">3</span> + (cyDib - i - <span class="number">1</span>) * cxDib * <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//如果当前字幕图标图像像素值是黑色，就传送视频像素值到目标图像</span></span><br><span class="line">        <span class="keyword">if</span> (rback == <span class="number">0</span> &amp;&amp; gback == <span class="number">0</span> &amp;&amp; bback == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*det_image[288 - i - 1][j].r = r;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].g = g;</span></span><br><span class="line"><span class="comment">            det_image[288 - i - 1][j].b = b;*/</span></span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = r * (<span class="number">1</span> - para) + r2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = g * (<span class="number">1</span> - para) + g2 * para;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = b * (<span class="number">1</span> - para) + b2 * para;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现单字幕注释这个else if</span></span><br><span class="line">        <span class="comment">//左半部分的字幕颜色改变部分</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; changeColor) &#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = <span class="number">0</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback + <span class="number">100</span>;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右半部分颜色不改变</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].r = rback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].g = gback;</span><br><span class="line">            det_image[<span class="number">288</span> - i - <span class="number">1</span>][j].b = bback;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 显示当前帧</span></span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">20</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">382</span>,</span><br><span class="line">    <span class="number">20</span>,</span><br><span class="line">    <span class="number">352</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">288</span>,</span><br><span class="line">    det_image2,</span><br><span class="line">    pbmi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br></pre></td></tr></table></figure><ol start="2"><li>效果如下：<img src="/../images/2024/04/0417/lab3/image-20240417222717925.png" alt="image-20240417222717925"></li></ol></li></ol><p>到此，实验三完成了。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137892392">https://blog.csdn.net/cds008/article/details/137892392</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全新超详细！实验二来袭！2024 CSU 多媒体技术与应用实验二（详细版）</title>
      <link href="/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9D%A5%E8%A2%AD%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%81%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%9D%A5%E8%A2%AD%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1．向内存加载两个或多个 BMP位图文件</p><p>2．利用像素操作实现单色（R、G、B）、灰度图像的显示</p><p>3．通过操作像素实现图像的倒立和正立显示</p><p>4．实现两个图像的叠加（一张风景照 一张自己的人物照）</p><p>5．改变教材给出的波纹模拟程序中石头大小（stonesize）、石头重量（stoneweight）和显示帧频率等参数，观察模拟效果，并分析所看到现象的原因。</p><h3 id="内容1：加载多个位图文件"><a href="#内容1：加载多个位图文件" class="headerlink" title="内容1：加载多个位图文件"></a>内容1：加载多个位图文件</h3><ol><li>首先，创建一个WIN32项目，如何创建项目？请参考这篇文章：<a href="https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501">https://blog.csdn.net/cds008/article/details/137749511?spm=1001.2014.3001.5501</a></li><li>接下来，我们按照教材中的步骤进行操作，首先添加全局变量，位置注释里有写，创建的代码模板中是会有的：<img src="/../images/2024/04/0414/lab2/01%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="01添加全局变量"></li><li>添加图片显示的代码，这段代码是添加在wWinMain函数中的，你也可以自己写一个函数封装这个代码，然后在wWinMain中去调用，并做好前置声明。代码的内容如下，这里是两张图片的添加：<img src="/../images/2024/04/0414/lab2/02%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="02添加图片显示代码"></li></ol><p>​也可以封装这两个代码，再放到wWinMain函数中：</p><p><img src="/../images/2024/04/0414/lab2/02%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82.jpg" alt="02封装一层"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载第一张图片</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadImage1</span><span class="params">(HINSTANCE hInstance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_1.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;加载图像错误&quot;</span>, <span class="string">L&quot;message&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hbmp = (HBITMAP)<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_1.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">GetObject</span>(hbmp, <span class="built_in">sizeof</span>(BITMAP), &amp;bmp);</span><br><span class="line">    bi.biSize = <span class="built_in">sizeof</span>(BITMAPINFOHEADER);</span><br><span class="line">    bi.biWidth = bmp.bmWidth;</span><br><span class="line">    bi.biHeight = bmp.bmHeight;</span><br><span class="line">    bi.biPlanes = bmp.bmPlanes;</span><br><span class="line">    bi.biBitCount = bmp.bmBitsPixel;</span><br><span class="line">    bi.biCompression = bmp.bmType;</span><br><span class="line">    bi.biSizeImage = bmp.bmWidth * bmp.bmHeight * bmp.bmBitsPixel / <span class="number">8</span>;</span><br><span class="line">    bi.biXPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi.biYPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi.biClrImportant = <span class="number">0</span>;</span><br><span class="line">    hDib = <span class="built_in">GlobalAlloc</span>(GHND, bi.biSizeImage);</span><br><span class="line">    lpbitmap = (BYTE*)<span class="built_in">GlobalLock</span>(hDib);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadImage2</span><span class="params">(HINSTANCE hInstance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_3.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;加载图像错误&quot;</span>, <span class="string">L&quot;message&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hbmp2 = (HBITMAP)<span class="built_in">LoadImage</span>(hInstance, <span class="string">L&quot;image_3.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">GetObject</span>(hbmp2, <span class="built_in">sizeof</span>(BITMAP), &amp;bmp2);</span><br><span class="line">    bi2.biSize = <span class="built_in">sizeof</span>(BITMAPINFOHEADER);</span><br><span class="line">    bi2.biWidth = bmp2.bmWidth;</span><br><span class="line">    bi2.biHeight = bmp2.bmHeight;</span><br><span class="line">    bi2.biPlanes = bmp2.bmPlanes;</span><br><span class="line">    bi2.biBitCount = bmp2.bmBitsPixel;</span><br><span class="line">    bi2.biCompression = bmp2.bmType;</span><br><span class="line">    bi2.biSizeImage = bmp2.bmWidth * bmp2.bmHeight * bmp2.bmBitsPixel / <span class="number">8</span>;</span><br><span class="line">    bi2.biXPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi2.biYPelsPerMeter = <span class="number">0</span>;</span><br><span class="line">    bi2.biClrImportant = <span class="number">0</span>;</span><br><span class="line">    hDib2 = <span class="built_in">GlobalAlloc</span>(GHND, bi2.biSizeImage);</span><br><span class="line">    lpbitmap2 = (BYTE*)<span class="built_in">GlobalLock</span>(hDib2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>重写重绘事件函数，具体代码参考如下：<img src="/../images/2024/04/0414/lab2/02%E9%87%8D%E7%BB%98%E5%87%BD%E6%95%B0.jpg" alt="02重绘函数"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取位图1</span></span><br><span class="line"><span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">    hbmp,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (UINT)bmp.bmHeight,</span><br><span class="line">    lpbitmap,</span><br><span class="line">    (BITMAPINFO*)&amp;bi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="comment">//获取位图2</span></span><br><span class="line"><span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">    hbmp2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (UINT)bmp2.bmHeight,</span><br><span class="line">    lpbitmap2,</span><br><span class="line">    (BITMAPINFO*)&amp;bi2,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line"><span class="comment">//显示单张图片</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetDIBits1</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">    <span class="number">20</span>,<span class="comment">//x</span></span><br><span class="line">    <span class="number">20</span>,<span class="comment">//y</span></span><br><span class="line">    bi.biWidth,</span><br><span class="line">    bi.biHeight,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    bi.biHeight,</span><br><span class="line">    lpbitmap,</span><br><span class="line">    (BITMAPINFO*)&amp;bi,</span><br><span class="line">    DIB_RGB_COLORS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示单张图片2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetDIBits2</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetDIBitsToDevice</span>(hdc,</span><br><span class="line">        <span class="number">300</span>,<span class="comment">//x</span></span><br><span class="line">        <span class="number">20</span>,<span class="comment">//y</span></span><br><span class="line">        bi2.biWidth,</span><br><span class="line">        bi2.biHeight,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        bi2.biHeight,</span><br><span class="line">        lpbitmap2,</span><br><span class="line">        (BITMAPINFO*)&amp;bi2,</span><br><span class="line">        DIB_RGB_COLORS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入素材，素材来自于老师的软件资源：<img src="/../images/2024/04/0414/lab2/03%E5%AF%BC%E5%85%A5%E7%B4%A0%E6%9D%90.jpg" alt="03导入素材"></p></li><li><p>接下来直接编译运行项目，即可看到我们的两个位图文件：<img src="/../images/2024/04/0414/lab2/03%E6%98%BE%E7%A4%BA%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87.jpg" alt="03显示两张图片"></p><p>到此，内容一结束。</p></li></ol><h3 id="内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示"><a href="#内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示" class="headerlink" title="内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示"></a>内容二：利用像素操作实现单色（R、G、B）、灰度图像的显示</h3><ol><li>在内容一完成的基础上，我们可以直接在重写重绘函数中的区域中添加如下代码，具体是那条注释下面的代码，上面那个是内容的部分：<img src="/../images/2024/04/0414/lab2/04%E5%8D%95%E8%89%B2%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="04单色显示代码"></li></ol><p>当然，我们也可以将这部分代码封装起来，成为一个函数，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单色显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowRGB</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// RGB单色显示</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span> + bi.biWidth, i + <span class="number">50</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, g, <span class="number">0</span>));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span> + bi.biWidth * <span class="number">2</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>结果显示如下：<img src="/../images/2024/04/0414/lab2/05%E5%8D%95%E8%89%B2%E6%98%BE%E7%A4%BA.jpg" alt="05单色显示"></p></li><li><p>灰度图像的显示，依然是只有一段代码：<img src="/../images/2024/04/0414/lab2/06%E7%81%B0%E5%BA%A6%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81.jpg" alt="06灰度显示代码"></p></li></ol><p>封装后的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//灰度显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowGray</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE average = (r + g + b) / <span class="number">3</span>;</span><br><span class="line">            BYTE y = r * <span class="number">0.299</span> + g * <span class="number">0.58</span> + b * <span class="number">0.114</span>;</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(g, g, g));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span> + bi.biWidth + <span class="number">2</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(average, average, average));</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span> + bi.biWidth * <span class="number">2</span> + <span class="number">4</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(y, y, y));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>灰度图像的显示结果：<img src="/../images/2024/04/0414/lab2/07%E7%81%B0%E5%BA%A6%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.jpg" alt="07灰度显示图片"></li></ol><h3 id="内容三：倒立和正立"><a href="#内容三：倒立和正立" class="headerlink" title="内容三：倒立和正立"></a>内容三：倒立和正立</h3><ol><li><p>这一部分依然很简单，跟内容二的步骤几乎是一样的，我们直接给代码即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒立显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daoli</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//倒立</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + i * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">100</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正立显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhengli</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正立</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">500</span>, i + <span class="number">50</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要将这段代码放到重绘函数中即可，也就是**&#x2F;&#x2F; TODO: 在此处添加使用 hdc 的任何绘图代码…**这段代码后面。</p></li></ol><h3 id="内容四：图像叠加"><a href="#内容四：图像叠加" class="headerlink" title="内容四：图像叠加"></a>内容四：图像叠加</h3><p>内容依然是跟上面的步骤一样的，很简单。直接给代码了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//叠加显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">diejia</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bi.biHeight; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bi.biWidth; j++) &#123;</span><br><span class="line">            BYTE r1 = *(lpbitmap + <span class="number">2</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g1 = *(lpbitmap + <span class="number">1</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b1 = *(lpbitmap + <span class="number">0</span> + j * <span class="number">4</span> + (bi.biHeight - i - <span class="number">1</span>) * bi.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//读取第二幅图像的RGB分量</span></span><br><span class="line">            BYTE r2 = *(lpbitmap2 + <span class="number">2</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE g2 = *(lpbitmap2 + <span class="number">1</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            BYTE b2 = *(lpbitmap2 + <span class="number">0</span> + j * <span class="number">4</span> + (bi2.biHeight - i - <span class="number">1</span>) * bi2.biWidth * <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//两幅图像的对应分量按比例叠加，a=0.5</span></span><br><span class="line">            BYTE r = r1 / <span class="number">2</span> + r2 / <span class="number">2</span>;</span><br><span class="line">            BYTE g = g1 / <span class="number">2</span> + g2 / <span class="number">2</span>;</span><br><span class="line">            BYTE b = b1 / <span class="number">2</span> + b2 / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//显示合成图像</span></span><br><span class="line">            <span class="built_in">SetPixel</span>(hdc, j + <span class="number">180</span> + bi.biWidth * <span class="number">2</span>, i + <span class="number">20</span>, <span class="built_in">RGB</span>(r, g, b));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/../images/2024/04/0414/lab2/10%E5%8F%A0%E5%8A%A0%E6%98%BE%E7%A4%BA%EF%BC%88%E6%9C%AC%E4%BA%BA%E7%85%A7%E7%89%87%EF%BC%89.jpg" alt="10叠加显示（本人照片）"></p><h3 id="内容五：波纹显示"><a href="#内容五：波纹显示" class="headerlink" title="内容五：波纹显示"></a>内容五：波纹显示</h3><p>这个有点复杂，我们重新新建了一个项目用来完成这部分内容（所有的代码均来自老师所给的软件资源或者教材中）。</p><ol><li><p>新建一个WIN32项目，并导入stone.bmp的素材；</p></li><li><p>在framework.h头文件中添加内容：<img src="/../images/2024/04/0414/lab2/11%E5%A4%B4%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0.jpg" alt="11头文件添加"></p></li><li><p>在主函数中最前面添加宏定义：<img src="/../images/2024/04/0414/lab2/12%E4%B8%BB%E5%87%BD%E6%95%B0%E6%B7%BB%E5%8A%A0.jpg" alt="12主函数添加"></p></li><li><p>定义水波纹全局变量：<img src="/../images/2024/04/0414/lab2/13%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="13全局变量"></p></li><li><p>对接下来需要添加的函数进行前向声明：<img src="/../images/2024/04/0414/lab2/14%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E.jpg" alt="14前向声明"></p></li><li><p>波能初始化，此段代码加在wWinMain函数中：<img src="/../images/2024/04/0414/lab2/15%E6%B3%A2%E8%83%BD%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="15波能初始化"></p></li><li><p>定义一个计时器（在Resource.h文件中）：<img src="/../images/2024/04/0414/lab2/16%E5%AE%9A%E4%B9%89%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="16定义计时器"></p></li><li><p>设置计时器：</p><p><img src="/../images/2024/04/0414/lab2/17%E8%AE%BE%E7%BD%AE%E8%AE%A1%E6%97%B6%E5%99%A8.jpg" alt="17设置计时器"></p></li><li><p>添加过程函数（再添加一个WM_TIMER）：</p><p><img src="/../images/2024/04/0414/lab2/18%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B.jpg" alt="18添加过程"></p><p>这一部分的完整代码是这样的，如果编译运行不了可以直接复制我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">        <span class="comment">//获取位图1</span></span><br><span class="line">        <span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">            hbmp,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (UINT)bmp.bmHeight,</span><br><span class="line">            lpbitmap,</span><br><span class="line">            (BITMAPINFO*)&amp;bi,</span><br><span class="line">            DIB_RGB_COLORS);</span><br><span class="line">        <span class="comment">//获取位图2</span></span><br><span class="line">        <span class="built_in">GetDIBits</span>(hdc,</span><br><span class="line">            hbmp2,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (UINT)bmp2.bmHeight,</span><br><span class="line">            lpbitmap2,</span><br><span class="line">            (BITMAPINFO*)&amp;bi2,</span><br><span class="line">            DIB_RGB_COLORS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示位图1</span></span><br><span class="line">        <span class="built_in">SetDIBits1</span>(hdc);</span><br><span class="line">        <span class="comment">//显示位图2</span></span><br><span class="line">        <span class="built_in">SetDIBits2</span>(hdc);</span><br><span class="line">        <span class="comment">//单色rgb</span></span><br><span class="line">        <span class="built_in">ShowRGB</span>(hdc);</span><br><span class="line">        <span class="comment">//灰度图显示</span></span><br><span class="line">        <span class="built_in">ShowGray</span>(hdc);</span><br><span class="line">        <span class="comment">//倒立显示</span></span><br><span class="line">        <span class="built_in">daoli</span>(hdc);</span><br><span class="line">        <span class="comment">//正立显示</span></span><br><span class="line">        <span class="built_in">zhengli</span>(hdc);</span><br><span class="line">        <span class="comment">//叠加显示</span></span><br><span class="line">        <span class="built_in">diejia</span>(hdc);</span><br><span class="line">        <span class="comment">//波纹模拟</span></span><br><span class="line">        <span class="comment">//setDiBitsStone(hdc);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将声明的三个函数全部添加进来：</p><p><img src="/../images/2024/04/0414/lab2/19%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0.jpg" alt="19三个函数"></p></li><li><p>效果如下：</p><p><img src="/../images/2024/04/0414/lab2/20%E6%95%88%E6%9E%9C.jpg" alt="20效果"></p></li></ol><p>到此，实验二完成了。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137754611">https://blog.csdn.net/cds008/article/details/137754611</a></p><p>有问题可在评论区交流~</p><p>实验三过两天再写，码字累了。</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全新超详细！2024 CSU 多媒体技术与应用实验一（详细版）</title>
      <link href="/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
      <url>/2024/04/14/%E5%85%A8%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%812024-CSU-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p>Visual Studio2022</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1．设计一个程序，利用三个Media Session同时播放三个音频文件。</p><p>2.打开两个音频文件（限Wav文件，并具有相同的采样频率和量化深度），然后用第二个音频文件左声道代替第一个音频文件左声道，但保留第一个音频文件的右声道，最后播放第一个音频文件，并观察结果。</p><p>3．设计实现静音效果。</p><h3 id="实验前置内容"><a href="#实验前置内容" class="headerlink" title="实验前置内容"></a>实验前置内容</h3><h4 id="如何用VS2022创建一个WIN32项目"><a href="#如何用VS2022创建一个WIN32项目" class="headerlink" title="如何用VS2022创建一个WIN32项目"></a>如何用VS2022创建一个WIN32项目</h4><p>创建项目-&gt;选择windows桌面应用程序即可，里面会有一些示例代码，项目是可以直接运行的（直接无脑下一步就行）。</p><p><img src="/../images/2024/04/0414/lab1/01%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg" alt="01新建项目"></p><h4 id="如何获取免费的音频"><a href="#如何获取免费的音频" class="headerlink" title="如何获取免费的音频"></a>如何获取免费的音频</h4><p>老师的代码中只提供了TheClassic.wav文件，而我们的实验中是需要更多的wav文件的，这里我是去<a href="https://www.ear0.com这个网站中下载的,建议最好下载wav格式的文件,因为mp3可能会出现一些问题./">https://www.ear0.com这个网站中下载的，建议最好下载wav格式的文件，因为mp3可能会出现一些问题。</a></p><h4 id="如何让你的程序播放音频"><a href="#如何让你的程序播放音频" class="headerlink" title="如何让你的程序播放音频"></a>如何让你的程序播放音频</h4><p>有两种方式，一种是使用playSound组件，一种是使用MediaSession组件，实验用的是第二种，我们都介绍一下。你也可以按照我的步骤去添加一遍代码，因为我的项目中包含了这两种方式。</p><h5 id="playSound组件播放音频的步骤"><a href="#playSound组件播放音频的步骤" class="headerlink" title="playSound组件播放音频的步骤"></a>playSound组件播放音频的步骤</h5><ol><li><p>打开资源视图，我们在菜单栏里添加两个按钮，分别为播放和暂停；步骤如下：<img src="/../images/2024/04/0414/lab1/02%E6%89%93%E5%BC%80%E8%B5%84%E6%BA%90%E8%A7%86%E5%9B%BE.jpg" alt="02打开资源视图"></p></li><li><p>然后重新设计menu，添加两个按钮：<img src="/../images/2024/04/0414/lab1/03%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1menu.jpg" alt="03重新设计menu"></p></li><li><p>双击按钮，在右下角的栏目里修改一下ID：<img src="/../images/2024/04/0414/lab1/04%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9id.jpg" alt="04双击修改id"></p></li><li><p>然后我们回到Resource.h文件中，删除掉刚刚被我们替换的ID，保留刚刚更改的ID：<img src="/../images/2024/04/0414/lab1/05%E5%88%A0%E9%99%A4id.jpg" alt="05删除id"></p></li><li><p>回到.cpp文件，首先在头文件中添加MMsystem.h文件：</p><p><img src="/../images/2024/04/0414/lab1/07%E6%B7%BB%E5%8A%A0h%E5%92%8C%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81.jpg" alt="07添加h和处理代码"></p></li><li><p>然后我们在主窗口函数中添加事件，使用PlaySound函数来控制音乐的播放与暂停（这里被注释的就是我们需要添加的，其他的先不用管，那是第二种方法要用到的代码）：<img src="/../images/2024/04/0414/lab1/07%E6%B7%BB%E5%8A%A0%E4%B8%BB%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81.jpg" alt="07添加主窗口代码"></p></li><li><p>将音频文件放入到项目目录中：<img src="/../images/2024/04/0414/lab1/081%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84.jpg" alt="081音频文件的路径"></p></li><li><p>接下来直接编译是会出错的，我们还需要添加链接文件，步骤是点击项目-&gt;属性-&gt;链接器-&gt;附加依赖项，然后添加库：<img src="/../images/2024/04/0414/lab1/09%E7%82%B9%E5%87%BB%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7%E7%84%B6%E5%90%8E%E6%B7%BB%E5%8A%A0playSound%E5%BA%93.jpg" alt="09点击项目属性然后添加playSound库"></p></li><li><p>OK！现在你可以编译运行你的代码，然后播放进行测试：<img src="/../images/2024/04/0414/lab1/10%E6%92%AD%E6%94%BE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95.jpg" alt="10播放进行测试"></p></li></ol><h5 id="MediaSession组件播放音频的步骤"><a href="#MediaSession组件播放音频的步骤" class="headerlink" title="MediaSession组件播放音频的步骤"></a>MediaSession组件播放音频的步骤</h5><ol><li><p>在刚刚的项目中，我们直接修改一下framework.h，添加最后两个头文件：<img src="/../images/2024/04/0414/lab1/11%E4%BF%AE%E6%94%B9framework%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt="11修改framework头文件"></p></li><li><p>然后我们再添加一些依赖项（参考playSound中的添加步骤）<img src="/../images/2024/04/0414/lab1/12%E5%86%8D%E6%AC%A1%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E9%A1%B9.jpg" alt="12再次添加依赖项"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mfplat.lib</span><br><span class="line">mfreadwrite.lib</span><br><span class="line">mfuuid.lib</span><br><span class="line">propsys.lib</span><br><span class="line">shell32.lib</span><br><span class="line">d2d1.lib</span><br><span class="line">winmm.lib</span><br><span class="line">mf.lib</span><br><span class="line"><span class="comment">//这是本次实验中需要用到的所有依赖项，你可以直接全部引入进去。针对这个步骤中的依赖项，你可以选择看PPT或者教材中的步骤。</span></span><br></pre></td></tr></table></figure></li><li><p>接下来，回到我们的.cpp文件中，在添加全局变量的区域中去创建我们待会需要用到的全局变量：<img src="/../images/2024/04/0414/lab1/13%E5%88%9B%E5%BB%BA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.jpg" alt="13创建全局变量"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">IMFMediaSession* m_pSession;</span><br><span class="line">IMFSourceResolver* m_pSourceResolver = <span class="literal">NULL</span>;</span><br><span class="line">IUnknown* pSource = <span class="literal">NULL</span>;</span><br><span class="line">IMFMediaSource* m_pSource;</span><br><span class="line">IMFTopology* m_pTopology = <span class="literal">NULL</span>;</span><br><span class="line">IMFPresentationDescriptor* m_pSourcePD = <span class="literal">NULL</span>;</span><br><span class="line">DWORD cSourceStreams = <span class="number">0</span>;</span><br><span class="line">IMFTopologyNode* pSourceNode = <span class="literal">NULL</span>;</span><br><span class="line">IMFTopologyNode* pOutputNode = <span class="literal">NULL</span>;</span><br><span class="line">IMFActivate* pSinkActivate = <span class="literal">NULL</span>;</span><br><span class="line">IMFStreamDescriptor* pSD = <span class="literal">NULL</span>;</span><br><span class="line">IMFMediaTypeHandler* pHandler = <span class="literal">NULL</span>;</span><br><span class="line">IMFActivate* pActivate = <span class="literal">NULL</span>;</span><br><span class="line">PROPVARIANT var;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建媒体会话函数，我们可以将这个函数放在代码的最下面：</p><p><img src="/../images/2024/04/0414/lab1/14%E5%88%9B%E5%BB%BA%E5%AA%92%E4%BD%93%E4%BC%9A%E8%AF%9D.jpg" alt="14创建媒体会话"></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateMediaSession</span><span class="params">(HWND hWnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr;</span><br><span class="line">    <span class="comment">// 初始化Media Foundation平台</span></span><br><span class="line">    hr = <span class="built_in">MFStartup</span>(MF_VERSION);</span><br><span class="line">    <span class="comment">// 创建媒体会话</span></span><br><span class="line">    hr = <span class="built_in">MFCreateMediaSession</span>(<span class="literal">NULL</span>, &amp;m_pSession);</span><br><span class="line">    <span class="comment">// 创建源解析器</span></span><br><span class="line">    hr = <span class="built_in">MFCreateSourceResolver</span>(&amp;m_pSourceResolver);</span><br><span class="line">    MF_OBJECT_TYPE ObjectType = MF_OBJECT_INVALID;</span><br><span class="line">    <span class="comment">// 利用源解析器创建媒体源</span></span><br><span class="line">    hr = m_pSourceResolver-&gt;<span class="built_in">CreateObjectFromURL</span>(</span><br><span class="line">        <span class="string">L&quot;TheClassic.wav&quot;</span>, <span class="comment">// URL of the source.</span></span><br><span class="line">        MF_RESOLUTION_MEDIASOURCE, <span class="comment">// Create a source object.</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// Optional property store.</span></span><br><span class="line">        &amp;ObjectType, <span class="comment">// Receives the created object type. </span></span><br><span class="line">        &amp;pSource <span class="comment">// Receives a pointer to the media source.</span></span><br><span class="line">    );</span><br><span class="line">    hr = pSource-&gt;<span class="built_in">QueryInterface</span>(<span class="built_in">IID_PPV_ARGS</span>(&amp;m_pSource));</span><br><span class="line">    <span class="comment">// Create the presentation descriptor for the media source.</span></span><br><span class="line">    hr = m_pSource-&gt;<span class="built_in">CreatePresentationDescriptor</span>(&amp;m_pSourcePD);</span><br><span class="line">    <span class="comment">// Create a new topology.</span></span><br><span class="line">    hr = <span class="built_in">MFCreateTopology</span>(&amp;m_pTopology);</span><br><span class="line">    <span class="comment">// Get the number of streams in the media source.</span></span><br><span class="line">    hr = m_pSourcePD-&gt;<span class="built_in">GetStreamDescriptorCount</span>(&amp;cSourceStreams);</span><br><span class="line">    <span class="comment">// For each stream, create the topology nodes and add them to the topology.</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; cSourceStreams; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BOOL fSelected = FALSE;</span><br><span class="line">        hr = m_pSourcePD-&gt;<span class="built_in">GetStreamDescriptorByIndex</span>(i, &amp;fSelected, &amp;pSD);</span><br><span class="line">        hr = pSD-&gt;<span class="built_in">GetMediaTypeHandler</span>(&amp;pHandler);</span><br><span class="line">        GUID guidMajorType;</span><br><span class="line">        hr = pHandler-&gt;<span class="built_in">GetMajorType</span>(&amp;guidMajorType);</span><br><span class="line">        <span class="keyword">if</span> (MFMediaType_Audio == guidMajorType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create the audio renderer.</span></span><br><span class="line">            hr = <span class="built_in">MFCreateAudioRendererActivate</span>(&amp;pActivate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (MFMediaType_Video == guidMajorType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create the video renderer.</span></span><br><span class="line">            hr = <span class="built_in">MFCreateVideoRendererActivate</span>(hWnd, &amp;pActivate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建拓扑的输入节点（即源节点）</span></span><br><span class="line">        hr = <span class="built_in">MFCreateTopologyNode</span>(MF_TOPOLOGY_SOURCESTREAM_NODE, &amp;pSourceNode);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_SOURCE, m_pSource);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_PRESENTATION_DESCRIPTOR,</span><br><span class="line">            m_pSourcePD);</span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">SetUnknown</span>(MF_TOPONODE_STREAM_DESCRIPTOR, pSD);</span><br><span class="line">        hr = m_pTopology-&gt;<span class="built_in">AddNode</span>(pSourceNode);</span><br><span class="line">        <span class="comment">// 创建拓扑的输出节点</span></span><br><span class="line">        hr = <span class="built_in">MFCreateTopologyNode</span>(MF_TOPOLOGY_OUTPUT_NODE, &amp;pOutputNode);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetObject</span>(pActivate);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetUINT32</span>(MF_TOPONODE_STREAMID, <span class="number">0</span>);</span><br><span class="line">        hr = pOutputNode-&gt;<span class="built_in">SetUINT32</span>(MF_TOPONODE_NOSHUTDOWN_ON_REMOVE, FALSE);</span><br><span class="line">        hr = m_pTopology-&gt;<span class="built_in">AddNode</span>(pOutputNode);</span><br><span class="line">        <span class="comment">// Connect the source node to the output node.</span></span><br><span class="line">        hr = pSourceNode-&gt;<span class="built_in">ConnectOutput</span>(<span class="number">0</span>, pOutputNode, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将拓扑设置给Media Session</span></span><br><span class="line">    m_pSession-&gt;<span class="built_in">SetTopology</span>(<span class="number">0</span>, m_pTopology);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>添加前向声明（刚刚添加的函数）：</p><p><img src="/../images/2024/04/0414/lab1/15%E6%B7%BB%E5%8A%A0%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E.jpg" alt="15添加前向声明"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawBackground</span><span class="params">(HWND hWnd)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>然后我们在winMain主函数中引入刚刚创建的函数：</p><p><img src="/../images/2024/04/0414/lab1/16%E5%BC%95%E5%85%A5%E5%87%BD%E6%95%B0.jpg" alt="16引入函数"></p></li><li><p>最后，我们重新写一下在playSound方法中写过的按钮事件即可，（到此，你可以编译运行一下代码，是一样的效果）：<img src="/../images/2024/04/0414/lab1/17%E8%AE%A9%E6%88%91%E4%BB%AC%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E9%9F%B3%E4%B9%90.jpg" alt="17让我们重新生成音乐"></p></li></ol><p>到此，前置内容结束，接下来是我们的实验部分。</p><h4 id="利用三个Media-Session同时播放三个音频文件"><a href="#利用三个Media-Session同时播放三个音频文件" class="headerlink" title="利用三个Media Session同时播放三个音频文件"></a>利用三个Media Session同时播放三个音频文件</h4><p>这个其实比较简单，我们只需要重复刚刚的步骤三次即可。</p><ol><li><p>在已经实现MediaSession组件播放音频的基础上，我们定义三个Media Session（代码没给全，你可以自己添加一下）：<img src="/../images/2024/04/0414/lab1/18%E5%AE%9A%E4%B9%89%E4%B8%89%E4%B8%AAmediasession%E7%94%9F%E6%88%90%E4%B8%89%E4%B8%AA%E9%9F%B3%E4%B9%90.jpg" alt="18定义三个mediasession生成三个音乐"></p></li><li><p>然后我们可以编写几乎相同的三个CreateMediaSession函数（其中，只有媒体源的URL是不一样的，媒体源需要你下载好并放到同一个目录中去，具体可以参考如何获取免费的音频）</p><p><img src="/../images/2024/04/0414/lab1/image-20240414192449708.png" alt="image-20240414192449708"></p></li><li><p>接下来，我们继续在winMain主函数中引入刚刚创建的函数，然后再重写一下按钮事件，这时可以启动三个mediaSession看看，此时应该能听到三个音乐的声音，到此，实验一的第一个内容完成了！：</p><p><img src="/../images/2024/04/0414/lab1/19%E5%90%AF%E5%8A%A8%E4%B8%89%E4%B8%AAmediasession.jpg" alt="19启动三个mediasession"></p></li></ol><h4 id="声道替换"><a href="#声道替换" class="headerlink" title="声道替换"></a>声道替换</h4><ol><li>第一个步骤，需要你在完成刚刚的实验的基础上，按照教材的步骤，去编写转码内容，完成<strong>音频转码程序</strong>的部分（教材给的很详细，直接按步骤来就可以了，其中的代码你也可以在老师所给的软件资源中的AudioMix中查看）<img src="/../images/2024/04/0414/lab1/image-20240414193540620.png" alt="image-20240414193540620"></li></ol><p>​代码可以参考这个项目：<img src="/../images/2024/04/0414/lab1/image-20240414193606498.png" alt="image-20240414193606498"></p><ol start="2"><li><p>这里我是直接按照教材，将AudioMix的代码复制到我的项目中的，我只写下需要修改的地方，首先是这个地方我们播放out1.wav即可，这里的按钮事件是我自己添加的按钮，你也可以添加你自己的按钮来控制声道替换的播放事件：</p><p><img src="/../images/2024/04/0414/lab1/21%E7%BC%96%E5%86%99%E6%92%AD%E6%94%BEout1.jpg" alt="21编写播放out1"></p></li><li><p>其次是这个文件名需要修改，请修改为你自己的音频文件，否则项目是运行不成功的：</p><p><img src="/../images/2024/04/0414/lab1/21%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D.jpg" alt="21修改文件名"></p></li><li><p>然后我们就可以运行一下我们的项目了，这个时候应该是可以按照教材中步骤运行成功的：<img src="/../images/2024/04/0414/lab1/22%E6%92%AD%E6%94%BEout1%E5%B8%A6%E8%80%B3%E6%9C%BA%E6%95%88%E6%9E%9C%E6%9B%B4%E4%BD%B3.jpg" alt="22播放out1带耳机效果更佳"></p></li><li><p>但是！教材中的代码跟实验内容还是有点不同的，我们需要重写下WriteWaveData函数，我们只需要知道，这个是实现我们的代码的核心函数即可，具体的引用关系，你也可以再看看教材的介绍。以下是我们重写的代码。<img src="/../images/2024/04/0414/lab1/image-20240414194119662.png" alt="image-20240414194119662"></p></li></ol><p>其中，被注释掉的地方就是教材的代码，没被注释的就是我们重写的代码。至此，实验二的部分就完成了，您可以直接运行代码，然后播放out1.wav即可，关于播放的形式您可以选择在菜单中新建一个按钮点击播放。</p><h4 id="静音效果"><a href="#静音效果" class="headerlink" title="静音效果"></a>静音效果</h4><p>不知道聪明的你是否发现了，其实在声道替换的最后，我们已经实现了静音效果，实际上，您只需播放out2.wav即可，这个就是一个静音文件。其实pAudioData控制的就是out1.wav中的数据流，pAudioDataAnother控制的就是out2.wav中的数据流。你也可以自己在菜单中添加一个按钮，然后写一个事件来控制out2.wav的播放与暂停。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>播放的时候我们可以设置自己的背景，代码可以参考我的，也可以参考老师的软件资源提供的，下面是我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我重写了下加载图片的方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawBackground</span><span class="params">(HWND hwnd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载图片</span></span><br><span class="line">    HBITMAP hBitmap = (HBITMAP)<span class="built_in">LoadImage</span>(<span class="literal">NULL</span>, <span class="string">L&quot;groundimage2.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hBitmap) &#123;</span><br><span class="line">        <span class="comment">// 加载图片失败，可以处理错误</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取窗口设备上下文</span></span><br><span class="line">    HDC hdcWindow = <span class="built_in">GetDC</span>(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建与窗口设备上下文兼容的内存设备上下文</span></span><br><span class="line">    HDC hdcMem = <span class="built_in">CreateCompatibleDC</span>(hdcWindow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择位图到内存设备上下文</span></span><br><span class="line">    HBITMAP hOldBitmap = (HBITMAP)<span class="built_in">SelectObject</span>(hdcMem, hBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取窗口的客户区大小</span></span><br><span class="line">    RECT rect;</span><br><span class="line">    <span class="built_in">GetClientRect</span>(hwnd, &amp;rect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将内存设备上下文的内容复制到窗口设备上下文</span></span><br><span class="line">    <span class="built_in">StretchBlt</span>(hdcWindow, <span class="number">0</span>, <span class="number">0</span>, rect.right, rect.bottom, hdcMem, <span class="number">0</span>, <span class="number">0</span>, rect.right, rect.bottom, SRCCOPY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复旧位图</span></span><br><span class="line">    <span class="built_in">SelectObject</span>(hdcMem, hOldBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理资源</span></span><br><span class="line">    <span class="built_in">ReleaseDC</span>(hwnd, hdcWindow);</span><br><span class="line">    <span class="built_in">DeleteDC</span>(hdcMem);</span><br><span class="line">    <span class="built_in">DeleteObject</span>(hBitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个函数放在这个重绘事件下即可：</p><p><img src="/../images/2024/04/0414/lab1/image-20240414194657682.png" alt="image-20240414194657682"></p><p>当然，你可能还需要对这个函数进行前置的声明。</p><p>最终的效果就是这样的：</p><p><img src="/../images/2024/04/0414/lab1/24%E5%AE%9E%E9%AA%8C%E6%95%88%E6%9E%9C.jpg" alt="24实验效果"></p><p><img src="/../images/2024/04/0414/lab1/25%E5%AE%9E%E9%AA%8C%E6%95%88%E6%9E%9C.jpg" alt="25实验效果"></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.codenong.com/cs106759209/#google_vignette">https://www.codenong.com/cs106759209/#google_vignette</a></p><p>更多内容可以查看：<a href="https://blog.csdn.net/cds008/article/details/137749511">https://blog.csdn.net/cds008/article/details/137749511</a></p><p>有问题可在评论区交流~</p>]]></content>
      
      
      <categories>
          
          <category> 多媒体技术及应用实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多媒体技术及应用实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之链表篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之链表篇"><a href="#跟练代码随想录之链表篇" class="headerlink" title="跟练代码随想录之链表篇"></a>跟练代码随想录之链表篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-移除链表元素（leetcode203）"><a href="#1-移除链表元素（leetcode203）" class="headerlink" title="1.移除链表元素（leetcode203）"></a><strong>1.移除链表元素（leetcode203）</strong></h4><p>这题算是链表里比较基础的了，构建了链表的基本思想。</p><p>两种方法，1：头节点和中间节点分开处理，这样要先用一个while循环，找到第一个不为val 的节点，充当头节点；</p><p>2：声明一个虚拟节点dummyNode，其next指向头节点，然后直接一个while循环来判断，相等则删，不等则next；注意，判断的是当前节点的next，因为这是单向链表，我们想删next，需要有cur，我们想删cur，却没有cur的前一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>&amp;&amp;cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.val==val) cur.next = cur.next.next;</span><br><span class="line">            <span class="keyword">else</span> cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-设计链表（leetocde707）"><a href="#2-设计链表（leetocde707）" class="headerlink" title="2.设计链表（leetocde707）"></a><strong>2.设计链表（leetocde707）</strong></h4><p>这个设计还挺麻烦的，有很多小细节要注意，哪怕我看了卡尔的视频，但是还是debug了三次才ac。</p><p>我链表插入是没有问题的，主要的出bug的地方在 第53行，不能等于，因为size也可以添加到尾部；第66行，如果大于size要return null；第28行，语法错误，不能直接index。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.next=null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node dummy;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dummy = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;=size) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.next.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node head = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        head.next = dummy.next;</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=null)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;size) <span class="keyword">return</span> ;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = cur.next;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;=size) <span class="keyword">return</span> ;</span><br><span class="line">        Node cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(index!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="3-翻转链表（leetcode206）"><a href="#3-翻转链表（leetcode206）" class="headerlink" title="3.翻转链表（leetcode206）"></a><strong>3.翻转链表（leetcode206）</strong></h4><p>这题讲的也是很清晰的，翻转链表的话是需要三个指针的；</p><p>因为我们是单链表，所以需要一个pre指针保留上一个位置，需要一个cur指针保存当前位置，但是为了能让循环遍历下去，我们需要一个temp指针来保留下一个位置，从而不断遍历。而循环终止条件我们可以模拟一下就是当cur等于空时，循环终止。</p><p>而递归的写法，其实就是参考双指针的写法来的，跟双指针一模一样，所以递归不是凭空想出来的，递归的过程就是循环的过程。</p><p>递归这里有个坑，<em><strong>在第52行，我们需要用一个值来接收下一层递归的返回值，不然我们第一层递归是拿不到下面层递归的返回值的，这里卡尔没讲清楚。</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur, ListNode pre)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> pre; <span class="comment">//终止条件</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = pre; <span class="comment">//每层递归做的事情</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">retNode</span> <span class="operator">=</span> reverse(temp,cur);</span><br><span class="line">        <span class="keyword">return</span> retNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-两两交换链表中的节点（leetcode24）"><a href="#4-两两交换链表中的节点（leetcode24）" class="headerlink" title="4.两两交换链表中的节点（leetcode24）"></a><strong>4.两两交换链表中的节点（leetcode24）</strong></h4><p>这题的话，还是注意一个虚拟头节点的使用吧，要操纵3个节点。</p><p>容易出现的问题就是空指针和死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//最好是用虚拟头节点，因为这个过程需要3个节点，1节点来指向后面两个节点，后面两个节点进行交换</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">//考虑好遍历终止条件，有奇数偶数之差</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//把1和3保存</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp1</span> <span class="operator">=</span> cur.next.next.next; <span class="comment">//顶多为null，不会空指针</span></span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            cur.next.next = temp;</span><br><span class="line">            temp.next = temp1;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-删除链表的倒数第N个节点（leetcode19）"><a href="#5-删除链表的倒数第N个节点（leetcode19）" class="headerlink" title="5.删除链表的倒数第N个节点（leetcode19）"></a><strong>5.删除链表的倒数第N个节点（leetcode19）</strong></h4><p>这题的话主要是快慢指针的思想。以后看到找倒数的多少多少个，就想到快慢指针！</p><p>然后为什么用dummy，下面也讲了。统一性问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        <span class="comment">//建议使用虚拟头结点，这样会方便很多，要不然每次针对头结点（没有前一个指针指向头结点），还要单独处理。</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        n++; <span class="comment">//这个是细节，多走一步才能找到前一个</span></span><br><span class="line">        <span class="keyword">while</span>(n--!=<span class="number">0</span>&amp;&amp;fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果不n++而是循环结束再执行可能空指针异常</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以用正数的方式来，总之还是一个虚拟头节点，这个会方便很多。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> size+<span class="number">1</span>-n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(pos--!=<span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-环形链表（leetcode142）"><a href="#6-环形链表（leetcode142）" class="headerlink" title="6.环形链表（leetcode142）"></a><strong>6.环形链表（leetcode142）</strong></h4><p>这个的话，有点难度。</p><p>有三个地方需要注意：</p><p>​    <em><strong>&#x2F;&#x2F;如何判断有环：快慢指针</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img.png" alt="image-20240407204627236"></p><p><em><strong>&#x2F;&#x2F;如何判断入口处在那里：相遇起点追及证明（利用时间相等建立等式）</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img_1.png" alt="image-20240407204708453"></p><p>​    <em><strong>&#x2F;&#x2F;为什么一圈内一定被追上</strong></em></p><p><em><strong>把圈展开就行</strong></em></p><p><img src="/../images/2024/04/0407/lianbiao/img_2.png" alt="image-20240407204724632"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//如何判断有环：快慢指针</span></span><br><span class="line">        <span class="comment">//如何判断入口处在那里：相遇起点追及证明（利用时间相等建立等式）</span></span><br><span class="line">        <span class="comment">//为什么一圈内一定被追上</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="comment">//判断初始节点</span></span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                index1 = fast;</span><br><span class="line">                index2 = head;</span><br><span class="line">                <span class="keyword">while</span>(index1!=index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-反转链表II（leetcode92）"><a href="#7-反转链表II（leetcode92）" class="headerlink" title="7.反转链表II（leetcode92）"></a><strong>7.反转链表II（leetcode92）</strong></h4><p><img src="/../images/2024/04/0407/lianbiao/img_3.png" alt="image-20240407204749215"></p><p>这是小米面试手撕的一道算法，其实我那个想法是正确的，参考了反转链表1，面试官提醒我的是第二种方法。</p><p>第二种是穿针引线的方法，pre是不变的，cur其实也是不变的，指向一个节点，只有temp是变的，一直指向cur.next。</p><p>然后示例中先是3，2再是4 3 2.最后完成。</p><p>下面第一个是我的想法代码，第二种方法是面试官提示我的穿针引线法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//参考反转链表I法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        first = dummy;</span><br><span class="line">        last = dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre2</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;left-<span class="number">1</span>)&#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            pre2 = pre2.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        pre2 = pre2.next;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;right+<span class="number">1</span>)&#123;</span><br><span class="line">            last = last.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = pre.next;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=right-left)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        first.next = pre;</span><br><span class="line">        pre2.next = last;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//穿针引线法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;left-<span class="number">1</span>)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;right-left)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = temp.next;</span><br><span class="line">            temp.next = pre.next;</span><br><span class="line">            pre.next = temp;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之哈希表篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E5%93%88%E5%B8%8C%E8%A1%A8%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E5%93%88%E5%B8%8C%E8%A1%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之哈希表篇"><a href="#跟练代码随想录之哈希表篇" class="headerlink" title="跟练代码随想录之哈希表篇"></a>跟练代码随想录之哈希表篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-有效的字母异位词（leetocde242）"><a href="#1-有效的字母异位词（leetocde242）" class="headerlink" title="1.有效的字母异位词（leetocde242）"></a><strong>1.有效的字母异位词（leetocde242）</strong></h4><p>有效的字母异位词，就是两个字符串是由相同个数的字母组成的，比如abbc和bbac。这题一看就是用哈希来做。</p><p>一般的哈希结构我们有三种，<strong>用哈希数组、哈希set、哈希map来做。</strong></p><p><strong>个数小的时候可以用数组，大的时候可以用set，有明确k-v值的话可以用map。</strong></p><p><strong>这里我们可以用最简单的数组来做。</strong></p><p><img src="/../images/2024/04/0407/haxi/img.png" alt="image-20240407203212200"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是用哈希数组来做：O（n）的复杂度：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">if</span> (s.length()!=t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            hash[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash[t.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;hash.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-两个数组的交集（leetocde349）"><a href="#2-两个数组的交集（leetocde349）" class="headerlink" title="2.两个数组的交集（leetocde349）"></a><strong>2.两个数组的交集（leetocde349）</strong></h4><p>什么时候要用哈希表呢。比如一个什么什么判断是否出现过，这种就是用哈希表。</p><p>然后为什么不用数组呢，因为比如像0，5，20000，这样就要开很大的数组，如果元素比较集中且较小就可以用数组。</p><p><img src="/../images/2024/04/0407/haxi/img_1.png" alt="image-20240407203242297"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length==<span class="number">0</span>||nums2.length==<span class="number">0</span>||nums1==<span class="literal">null</span>||nums2==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        Set&lt;Integer&gt; retSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(i)) retSet.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-两数之和（leetcode1）"><a href="#3-两数之和（leetcode1）" class="headerlink" title="3.两数之和（leetcode1）"></a><strong>3.两数之和（leetcode1）</strong></h4><p>这题要判断每个元素是否之前出现过。所以其实还是比较简单的，时间复杂度O(n)就够了。</p><p><img src="/../images/2024/04/0407/haxi/img_2.png" alt="image-20240407203304121"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] retArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer,Integer&gt; Map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> target-nums[i];</span><br><span class="line">            <span class="keyword">if</span> (Map.containsKey(p))&#123;</span><br><span class="line">                retArr[<span class="number">0</span>] = Map.get(p);</span><br><span class="line">                retArr[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> retArr;</span><br><span class="line">            &#125;</span><br><span class="line">            Map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用HashMap就可以了。</span></span><br></pre></td></tr></table></figure><h4 id="4-四数相加II（leetcode454）"><a href="#4-四数相加II（leetcode454）" class="headerlink" title="4.四数相加II（leetcode454）"></a><strong>4.四数相加II（leetcode454）</strong></h4><p>哈希表里比较经典的题目。</p><p>先循环nums1和nums2，保存a+b的值到map中，然后循环后两个数组的值，获取数组和，去判断map中是否有相反数，有的话就让value+1，其实还是很好理解的，这个过程。</p><p><img src="/../images/2024/04/0407/haxi/img_3.png" alt="image-20240407203324989"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums2)&#123;</span><br><span class="line">                map.put((i+j),map.getOrDefault((i+j),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums4)&#123;</span><br><span class="line">                result+=map.getOrDefault((<span class="number">0</span>-i-j),<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-三数之和（leetcode15）"><a href="#5-三数之和（leetcode15）" class="headerlink" title="5.三数之和（leetcode15）"></a><strong>5.三数之和（leetcode15）</strong></h4><p>这题我感觉真的还是蛮难的，看了这么多题。哈希的思路很好想，跟上面那题挺像，但是难在去重；</p><p>然后好做的方法是双指针，但是也难在去重，这个去重的逻辑真的不好想。</p><p>​    <img src="/../images/2024/04/0407/haxi/img_4.png" alt="0"></p><p>注意看我的注释，有很多细节要注意，要考虑好多种测试用例和边界情况：</p><p>比如 -1 -1 -1 -1  1 1 1 1 1，这种如何去重；</p><p>比如  0 0  0 00 0 0 这种对于i而言如何去重；</p><p>比如要先保存结果再去移动去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">            <span class="comment">//对i去重</span></span><br><span class="line">            <span class="comment">//细节下面这个逻辑在000的样例中会下标越界</span></span><br><span class="line">            <span class="comment">//while(i&gt;=1&amp;&amp;nums[i]==nums[i-1]) i++; //说明i之前已经被加过了</span></span><br><span class="line">            <span class="comment">//得改成这样：</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">1</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//细节不能等于，不然就是同一个数字了</span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//先保存结果</span></span><br><span class="line">                    List&lt;Integer&gt; retList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    retList.add(nums[i]);</span><br><span class="line">                    retList.add(nums[left]);</span><br><span class="line">                    retList.add(nums[right]);</span><br><span class="line">                    list.add(retList);</span><br><span class="line">                    <span class="comment">//对left和right去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="comment">//细节，最后还要移动</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-四数之和（leetcode18）"><a href="#6-四数之和（leetcode18）" class="headerlink" title="6.四数之和（leetcode18）"></a><strong>6.四数之和（leetcode18）</strong></h4><p>这题是在三数之和的上面演进的，考虑的细节还是比较多的，注意的是target可能小于0！！！</p><p>所以我们这里一个是剪枝如何剪枝，我考虑 了nums[i]&gt;target，我认为这个还是比较正确的，卡尔没讲到；</p><p>然后就是去重的操作，注意我的注释细节；</p><p>有个用法可以学学，怎么把一组数转为list，<strong>用到Arrays.asList()</strong></p><p>​    <img src="/../images/2024/04/0407/haxi/img_5.png" alt="0"></p><p>把第一层结束之后，后面的步骤就跟三数之和是一样的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//两级剪枝，两级去重</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">//一级</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//真正的剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;target/<span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//一级去重，思路是一样的，只记录i第一次当-2的情况</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">1</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> target-nums[i];</span><br><span class="line">                <span class="comment">//这个剪枝可能不是最优的</span></span><br><span class="line">                <span class="comment">//if (nums[i]+nums[j]&gt;target) break;</span></span><br><span class="line">                <span class="comment">//二番目，这里想的太简单了，不能这样剪枝，对于负数的target不适用</span></span><br><span class="line">                <span class="keyword">if</span> (j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[j]+nums[left]+nums[right]&gt;sum) right--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nums[j]+nums[left]+nums[right]&lt;sum) left++;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//先保存再去重</span></span><br><span class="line">                        result.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟练代码随想录之数组篇</title>
      <link href="/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/"/>
      <url>/2024/04/07/%E8%B7%9F%E7%BB%83%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="跟练代码随想录之数组篇"><a href="#跟练代码随想录之数组篇" class="headerlink" title="跟练代码随想录之数组篇"></a>跟练代码随想录之数组篇</h2><blockquote><p>写在前面，这个系列是跟着B站的代码随想录跟练算法的部分。算法还是比较薄弱，慢慢打基础吧，这篇文章很久以前就写好了，只是发布的时间比较晚了，最近也是打算迁移一下自己的文章。</p></blockquote><h4 id="友链到卡哥"><a href="#友链到卡哥" class="headerlink" title="友链到卡哥"></a>友链到卡哥</h4><p><a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h4 id="1-二分查找（leetcode704）"><a href="#1-二分查找（leetcode704）" class="headerlink" title="1.二分查找（leetcode704）"></a><strong>1.二分查找（leetcode704）</strong></h4><p>看懂了，有两种写法，如果是左闭右闭的写法的话，那么left可以等于right，right&#x3D;mid-1，left&#x3D;mid+1；</p><p>如果是左闭右开的写法的话，那么left</p><p>总结：最好是用左闭右闭的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target) right=middle-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target) left=middle+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-移除数组元素（leetcode27）"><a href="#2-移除数组元素（leetcode27）" class="headerlink" title="2.移除数组元素（leetcode27）"></a><strong>2.移除数组元素（leetcode27）</strong></h4><p>这题就是移除数组中所有值为val的元素，用一个快慢数组来解决，代码一看就能明白，能想到吗？跟数组有关的，大概率是要用双指针来优化，将n2的复杂度优化为n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast]!=val) nums[low++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-有序数组的平方（leetcode977）"><a href="#3-有序数组的平方（leetcode977）" class="headerlink" title="3.有序数组的平方（leetcode977）"></a><strong>3.有序数组的平方（leetcode977）</strong></h4><p>如果用暴力sort来排序的话，那么时间复杂度是n+nlogn，用双指针可以有效地变为n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.pow(nums[i],<span class="number">2</span>)&gt;Math.pow(nums[j],<span class="number">2</span>)) result[k--] = (<span class="type">int</span>)Math.pow(nums[i++],<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> result[k--] = (<span class="type">int</span>)Math.pow(nums[j--],<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里用Math函数可能会慢1ms，用nums[i]*nums[i]可能会快一点。</span></span><br><span class="line"><span class="comment">//其实就是从两边进行比较，大的放最右边，因为这个序列是有序数组。</span></span><br></pre></td></tr></table></figure><h4 id="4-长度最小的子数组（leetcode209）"><a href="#4-长度最小的子数组（leetcode209）" class="headerlink" title="4.长度最小的子数组（leetcode209）"></a><strong>4.长度最小的子数组（leetcode209）</strong></h4><p>这题是用滑动窗口来解决，记住，j 是 窗口的终止节点，并且，此滑动窗口的时间复杂度是On，严格来说是O2n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,sum=<span class="number">0</span>,result=Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//j是终止的节点</span></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;nums.length;j++)&#123;</span><br><span class="line">            sum+=nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j-i+<span class="number">1</span>&lt;result) result = j-i+<span class="number">1</span>;</span><br><span class="line">                sum-=nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-螺旋矩阵（leetcode59）"><a href="#5-螺旋矩阵（leetcode59）" class="headerlink" title="5.螺旋矩阵（leetcode59）"></a><strong>5.螺旋矩阵（leetcode59）</strong></h4><p>这题真的还挺有意思的，为什么呢？</p><p>第一，确定不变量，我们要的是左闭右开，这样子做完4次处理，每个数都能被处理到，如果是左闭右闭，那么会有四个数被重复赋值了；</p><p>第二，确定起始位置和偏移量，startx,starty,offset，startx和starty决定了每一轮从哪儿开始进行遍历，offset决定了每一轮遍历的终点，其实startx，starty就是每一轮最左上角那个点。</p><p>第三，每次遍历时，要严格遵守上面的规则，左闭右开和起始位置、偏移位置的规则。</p><p>看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix =<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=n/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j=starty;j&lt;n-offset;j++) matrix[startx][j]=count++;</span><br><span class="line">            <span class="keyword">for</span> (i=startx;i&lt;n-offset;i++) matrix[i][j] = count++;</span><br><span class="line">            <span class="keyword">for</span> (;j&gt;starty;j--) matrix[i][j] = count++;</span><br><span class="line">            <span class="keyword">for</span> (;i&gt;startx;i--) matrix[i][j] = count++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            offset++;</span><br><span class="line">            cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">1</span>) matrix[n/<span class="number">2</span>][n/<span class="number">2</span>]=count;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次就ac，牛逼。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
          <category> 跟练代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编撰并发布自己的hexo博文</title>
      <link href="/2024/04/07/%E5%A6%82%E4%BD%95%E7%BC%96%E6%92%B0%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E6%96%87/"/>
      <url>/2024/04/07/%E5%A6%82%E4%BD%95%E7%BC%96%E6%92%B0%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何编撰并发布自己的博文"><a href="#如何编撰并发布自己的博文" class="headerlink" title="如何编撰并发布自己的博文"></a>如何编撰并发布自己的博文</h2><blockquote><p>写在前面，发布博客我个人认为是一个比较重要的习惯，反映了一个人近期的成长，这篇教程主要关于如何编撰并发布自己的hexo博文。</p></blockquote><h3 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github等git仓库上</span><br><span class="line">hexo n “my article” #完整命令为hexo new,用于新建一篇名为“my article”的文章</span><br></pre></td></tr></table></figure><h3 id="hexo编撰博文的常用步骤"><a href="#hexo编撰博文的常用步骤" class="headerlink" title="hexo编撰博文的常用步骤"></a>hexo编撰博文的常用步骤</h3><ol><li><p>hexo n 命令生成md文件</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img1.png" alt="img1"></p></li></ol><p>​然后我们就可以在post目录下看到刚新建的md文件了。</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img.png" alt="image-20240407170817681"></p><ol start="2"><li><p>编写md文件：</p><p>我们可以使用Typora编辑器来编写，非常的好用，非常的简单，平时也可以用；当然手搓也很简单。</p><p><a href="https://typoraio.cn/">typora中文官网</a></p></li></ol><p>​3.常见的hexo前置信息：</p><p>​hexo前置信息是放在文章前面的，包括标签，分类，主题等等，可以用于标识一篇文章；下面是一些常见的前置信息：</p><table><thead><tr><th>title</th><th>网页文章标题</th></tr></thead><tbody><tr><td>date</td><td>文章创建日期</td></tr><tr><td>comments</td><td>文章评论功能是否启动</td></tr><tr><td>tags</td><td>文章标签</td></tr><tr><td>categories</td><td>文章分类</td></tr><tr><td>keywords</td><td>文章关键字</td></tr></tbody></table><p>​具体如何使用，可以参考：</p><p>​<a href="https://zhuanlan.zhihu.com/p/50787870">标签和分类设置</a></p><p>​<a href="https://zhuanlan.zhihu.com/p/645394881">评论设置ButterFly</a></p><p>​ 例如：</p><p><img src="/../images/2024/04/0407/how_to_write_blog/img_1.png" alt="image-20240407171556866"></p><ol start="4"><li>发布文章：</li></ol><p>​接下来，打开命令行，分别输入hexo g，hexo s（可选），hexo d命令即可。然后就能看到自己的博文啦！ </p><ol start="5"><li>参考文章：<br><a href="https://zhuanlan.zhihu.com/p/50787870">https://zhuanlan.zhihu.com/p/50787870</a><br><a href="https://zhuanlan.zhihu.com/p/645394881">https://zhuanlan.zhihu.com/p/645394881</a><br><a href="https://blog.csdn.net/qq_54743738/article/details/120943085">https://blog.csdn.net/qq_54743738/article/details/120943085</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非Spring项目Maven配置</title>
      <link href="/2024/03/06/%E9%9D%9ESpring%E9%A1%B9%E7%9B%AEMaven%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/06/%E9%9D%9ESpring%E9%A1%B9%E7%9B%AEMaven%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在做软创的项目时，遇到了一个需求，就是如何在一个非Spring项目中使用MyBatis-Plus，我觉得这个需求还是挺有价值的，因为我们现在很多项目都是Spring项目，思维比较死板。所以我记录了这个问题。</p><p>时间比较紧，内容写的跳跃性可能比较强，大家跟上。</p><h2 id="1、Maven配置"><a href="#1、Maven配置" class="headerlink" title="1、Maven配置"></a>1、Maven配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.30&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 导入mybatis-plus相关依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h3><p>设计到的主要文件夹和Java类我用红框圈起来了，domain实体类，mapper存放Mapper类，service存放服务类，resources&#x2F;mapper存放映射xml文件，MyBatis3Test存放测试类：</p><p><img src="/../images/20240306/image-20240306171527565.png" alt="image-20240306171527565"></p><h3 id="3、开始设计"><a href="#3、开始设计" class="headerlink" title="3、开始设计"></a>3、开始设计</h3><h4 id="3-1-domain类的设计"><a href="#3-1-domain类的设计" class="headerlink" title="3.1 domain类的设计"></a>3.1 domain类的设计</h4><ol><li><p>先设计数据库表，我直接在IDEA里面设计了。如下图：</p><p><img src="/../images/20240306/image-20240306172635405.png" alt="image-20240306172635405"></p></li></ol><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table testuser</span><br><span class="line">(</span><br><span class="line">    name   varchar(32) default NULL null comment &#x27;姓名&#x27;,</span><br><span class="line">    age    int         default 0    null comment &#x27;年龄&#x27;,</span><br><span class="line">    userid int                      not null comment &#x27;用户id&#x27;,</span><br><span class="line">    constraint userid</span><br><span class="line">        primary key (userid)</span><br><span class="line">)</span><br><span class="line">    comment &#x27;用来测试的user类&#x27;;</span><br></pre></td></tr></table></figure><p>​2.然后设计domain类：代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package generator.domain;</span><br><span class="line"></span><br><span class="line">//import com.baomidou.mybatisplus.annotations.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line">import lombok.Data;</span><br><span class="line">@Data</span><br><span class="line">@TableName(value =&quot;testuser&quot;)</span><br><span class="line">public class TestUser &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    @TableId</span><br><span class="line">    private Integer userid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-Mapper类设计："><a href="#3-2-Mapper类设计：" class="headerlink" title="3.2 Mapper类设计："></a>3.2 Mapper类设计：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package generator.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.mapper.BaseMapper;</span><br><span class="line">import generator.domain.TestUser;</span><br><span class="line"></span><br><span class="line">public interface TestUserMapper extends BaseMapper&lt;TestUser&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-SQL映射文件设计："><a href="#3-3-SQL映射文件设计：" class="headerlink" title="3.3 SQL映射文件设计："></a>3.3 SQL映射文件设计：</h4><p><img src="/../images/20240306/image-20240306173414367.png" alt="image-20240306173414367"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &quot;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;generator.mapper.TestUserMapper&quot;&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-核心配置文件："><a href="#3-4-核心配置文件：" class="headerlink" title="3.4 核心配置文件："></a>3.4 核心配置文件：</h4><p>这里不一定是 mysql.cj.jdbc ，如果报错，就把 cj 去掉。</p><p><img src="/../images/20240306/image-20240306173656194.png" alt="image-20240306173656194"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 在控制台输出执行的sql语句 --&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;environments default=&quot;mysql&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;mysql&quot; &gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jqzc&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/TestUserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-5-编写测试类"><a href="#3-5-编写测试类" class="headerlink" title="3.5 编写测试类"></a>3.5 编写测试类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import generator.mapper.GpsMapper;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.Configuration;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.MybatisSessionFactoryBuilder;</span><br><span class="line">import com.baomidou.mybatisplus.MybatisXMLConfigBuilder;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.Wrapper;</span><br><span class="line">import com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line">import generator.domain.TestUser;</span><br><span class="line">import generator.mapper.TestUserMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MyBatis3Test &#123;</span><br><span class="line"></span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory = null;</span><br><span class="line">    /**</span><br><span class="line">     * 测试从数据库里获取GPS的信息</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void getGPS() throws Exception&#123;</span><br><span class="line">        //获取配置文件的输入流</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis.cfg.xml&quot;);</span><br><span class="line"></span><br><span class="line">        MybatisSessionFactoryBuilder mybatisSessionFactoryBuilder = new MybatisSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        //通过配置文件获取session工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = mybatisSessionFactoryBuilder.build(inputStream);</span><br><span class="line"></span><br><span class="line">        //获取一个session会话</span><br><span class="line">        SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        TestUserMapper mapper = session.getMapper(TestUserMapper.class);</span><br><span class="line"></span><br><span class="line">        TestUser user = mapper.selectById(1);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我用了一个Junit进行测试，你也可以自己编写一个类。</p><p>测试结果如下：<img src="/../images/20240306/image-20240306174536612.png" alt="image-20240306174536612"></p><p>根据上面的代码可以看出，mybatis-plus的启动就是加载核心文件（这里是mybatis.cfg.xml）,通过核心文件加载相关的sql映射文件完成对普通映射文件与mapper映射文件的封装（区分普通映射文件与mapper映射文件的方式是映射文件的namespece是否是接口的全路径），然后就可以通过会话对象（SqlSession）获取mapper访问数据库了。<br>当使用spring对其进行整合时，spring的配置文件将代替mybatis-plus的核心文件，并且mapper与sqlsession会话将交给spring去管理。我们只需给spring指定去那里获取sql映射文件与mapper接口即可。</p><p>参考链接：<a href="https://www.jianshu.com/p/042567d0b5a2">https://www.jianshu.com/p/042567d0b5a2</a></p>]]></content>
      
      
      <categories>
          
          <category> Java项目经验谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSU-OJ部署教程</title>
      <link href="/2024/03/04/CSU-OJ%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2024/03/04/CSU-OJ%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有点突发奇想，又有点心血来潮，想把之前做的CSU-OJ系统部署到服务器上，于是乎写下了这篇教程。</p><h2 id="1-服务器购买"><a href="#1-服务器购买" class="headerlink" title="1.服务器购买"></a>1.服务器购买</h2><p>我是在腾讯云上购买的服务器，本来还在想这个2h4g的服务器也太贵了吧，一个月就要100米，然后群里有个老哥说可以买幻兽帕鲁的服务器，2h16g，一个月只要32，我直接说老哥你真牛，这波羊毛被你薅到了。于是我买了一个月的幻兽帕鲁的服务器，然后改装了一下。<br>服务器购买地址：<a href="https://curl.qcloud.com/loqNrwQ4">服务器</a><br><img src="/../images/csuoj-dev/%E4%BB%B7%E6%A0%BC%E6%88%AA%E5%9B%BE.png" alt="服务器价格" title="Markdown"></p><h2 id="2-服务器初始化"><a href="#2-服务器初始化" class="headerlink" title="2.服务器初始化"></a>2.服务器初始化</h2><h3 id="2-1-重装系统"><a href="#2-1-重装系统" class="headerlink" title="2.1 重装系统"></a>2.1 重装系统</h3><p>首先进入控制台，在应用管理的界面找到重装系统，然后我们重装系统为 <strong>宝塔Linux面板  8.0.5 腾讯云专享版</strong> ，用宝塔主打一个方便快捷。<br>然后我们在防火墙处开放8888端口，为了安全起见，可以编辑我们的可访问ip为我们主机的ip地址。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE2.png" alt="ip"></p><h3 id="2-2-装配环境"><a href="#2-2-装配环境" class="headerlink" title="2.2 装配环境"></a>2.2 装配环境</h3><p>然后我们点击登录，在腾讯的命令行界面输入登入宝塔的命令（登录按钮旁边有命令），之后就可以进入宝塔界面了！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE3.png" alt="界面"></p><p>我们在跳出来的基本配置安装弹窗中选择LNNP即可。（下图为安装完之后）<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE4.png" alt="lnmp"></p><p>顺便我们可以在面板设置-&gt;面板账户，面板密码界面把账号和密码修改一下。</p><h2 id="3-部署规划"><a href="#3-部署规划" class="headerlink" title="3.部署规划"></a>3.部署规划</h2><p>可以想一下我们项目需要什么依赖，路径地址是什么。<br>前端：<a href="http://ip/">http://ip</a></p><p>后端：<a href="http://ip/api">http://ip/api</a> 实际运行在8121端口，默认用nginx做转发（避免跨域问题的麻烦）。</p><p>代码沙箱 <a href="http://ip:8090/executeCode">http://ip:8090/executeCode</a> 运行在8080端口。</p><p>nginx：80端口</p><p>数据库：3306端口</p><p>Redis：6379端口</p><p>Java</p><p>Maven</p><h2 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4.安装依赖"></a>4.安装依赖</h2><p>搜索Redis，直接安装7.2.4 stable版本。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE5.png" alt="redis"></p><h3 id="4-1-安装MySQL数据库"><a href="#4-1-安装MySQL数据库" class="headerlink" title="4.1 安装MySQL数据库"></a>4.1 安装MySQL数据库</h3><p>首先得先检查一下我们防火墙的端口，要把3306端口开放一下。</p><p>然后在数据库界面添加一个新的数据库，添加完之后我们可以在IDEA或者Navicat上先连接这个数据库，然后我们再运行SQL文件.从而将数据库的数据导入到这个新建的远程数据库中去。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE6.png" alt="mysql"></p><p>导入完之后就是这样子咯<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE7.png" alt="导入"></p><h3 id="4-2-安装Redis依赖"><a href="#4-2-安装Redis依赖" class="headerlink" title="4.2 安装Redis依赖"></a>4.2 安装Redis依赖</h3><p>我们可以先尝试访问一下Redis，发现是不可以访问的，这是因为我们的Redis没有设置访问权限<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE8.png" alt="访问"></p><p>我们要先在宝塔里面设置一下访问权限的问题。在Redis的设置，性能设置界面，我们先把我们的bind设置为0.0.0.0，让外网可以访问我们的redis，然后设置一下密码。这样我们的本机就可以访问redis了，（后续得修改，不能用0.0.0.0，不然会被入侵）。</p><p>如果还不行的话，可能是防火墙没有打开。</p><h3 id="4-3-Java环境的安装"><a href="#4-3-Java环境的安装" class="headerlink" title="4.3 Java环境的安装"></a>4.3 Java环境的安装</h3><p>我们在宝塔-&gt;网站-&gt;Java项目中添加Java环境，我们选择添加jdk1.8.0<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE9.png" alt="java"></p><p>然后我们在命令行中安装maven，输入以下命令<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE10.png" alt="maven"></p><h2 id="5-部署代码沙箱到服务器上去"><a href="#5-部署代码沙箱到服务器上去" class="headerlink" title="5.部署代码沙箱到服务器上去"></a>5.部署代码沙箱到服务器上去</h2><p>首先我们在IDEA 的maven中执行package命令，将代码沙箱打包成一个jar包。<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE11.png" alt="jar"></p><p>打包完成之后我们可以现在本地测试一下，用java -jar 命令运行以下jar包看看可不可以。<br>如果没有问题的话，我们再将jar包上传到宝塔面板中去：<br>点击文件，然后在www&#x2F;wwwroot目录下，我们将jar包拖上去就ok了。</p><p>上传完之后，我们就可以建立一个新的java项目了：<br>点击网站，然后添加Java项目，选择jar包，改端口为8090，然后设置开机自启，点击提交，就ok啦！<br>我们可以通过该页面的设置-&gt;项目日志，来查看项目的日志。由此判断项目是否处于运行状态中。</p><p>怎么判断能不能用呢？我们可以在我们的后端中，调用一下服务器ip+8090的端口，看看项目能否正常运行，可以的话，说明代码沙箱是部署成功的！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE12.png" alt="判断"></p><p>提示一下，如果发现执行不了的话，可能是没有开放8090端口噢！<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE13.png" alt="判断"><br>通过就是ok的啦！</p><h2 id="6-部署前端"><a href="#6-部署前端" class="headerlink" title="6.部署前端"></a>6.部署前端</h2><ol><li>修改跨域ip为服务器ip；</li><li>打包前端文件，命令是yarn build，如果遇到问题，可以自行百度一下，一般不会有问题；</li></ol><p>我这里出现的问题是编译报错JavaScript heap out of memory，node内存溢出，Exit status 134。这个的话其实是js文件太大了，导致不能构建出来项目，解决方案就是 打开cmd窗口，然后输入 这条命令 即可。<br><code>setx NODE_OPTIONS --max_old_space_size=4096</code></p><ol start="3"><li>然后我们进入宝塔面板，点击网站，点创建php项目（其实就是前端），然后我们将dist文件导入进去，设置好域名（没有域名的话可以先用ip代替）。这样前端就部署完成了。</li><li>这里可能有个坑，就是输入网址时nginx可能报404的错误，这是因为框架的路由，实际上是没有部署当前这个网址到nginx上的，所以我们得用一条命令转发到index.html上，具体命令我们可以查看这个网址：<a href="https://router.vuejs.org/guide/essentials/history-mode.html#nginx">https://router.vuejs.org/guide/essentials/history-mode.html#nginx</a></li></ol><h2 id="7-部署后端"><a href="#7-部署后端" class="headerlink" title="7.部署后端"></a>7.部署后端</h2><ol><li><p>修改application.properties文件中的MySQL的url、用户名、密码；</p></li><li><p>修改redis的url、密码；</p></li><li><p>执行mvn的package命令，将项目打包成一个jar包；</p></li><li><p>可以先在本地上测试一下jar包，我这里出现了一个bug：<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE14.png" alt="bug"><br>排查之后发现，应该是文心一言的java版本，不能用1.8，得用17及以上的。</p></li><li><p>上传jar包到服务器上；（跟代码沙箱那一步是一样的）</p></li><li><p>这里我遇到了两个坑，我之前在防火墙那里设置了只能我的本机访问Redis和MySQL，然后部署上去我发现后端也访问不了，所以在防火墙那里还要加入服务器的ip允许策略。</p></li><li><p>在前端nginx那里加入以下命令，将api网址下的都转发到8121端口下。</p><p> location &#x2F;api {<br> proxy_pass <a href="http://127.0.0.1:8121/">http://127.0.0.1:8121</a>;<br> proxy_set_header Host $proxy_host;<br> proxy_set_header X-Real-IP $remote_addr;<br> proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br> proxy_buffering off;<br> proxy_set_header Connection “”;<br> }</p></li></ol><h2 id="8-前后端联调测试"><a href="#8-前后端联调测试" class="headerlink" title="8.前后端联调测试"></a>8.前后端联调测试</h2><p>测试一下基本流程，没有问题，舒服了，家人们~<br><img src="/../images/csuoj-dev/%E6%88%AA%E5%9B%BE15.png" alt="完全体"><br>后续的工作：可以把域名加进去，之前买了个域名，现在可以派上用场了。</p><p>绑定域名的话我打算再出一篇文章，内容包括：如何购买域名，如何在宝塔上绑定域名，如何在DNS服务商处解析DNS域名。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7266374030147076157">https://juejin.cn/post/7266374030147076157</a></p><p><a href="https://blog.csdn.net/Jacksun_huang/article/details/90054923">https://blog.csdn.net/Jacksun_huang/article/details/90054923</a></p>]]></content>
      
      
      <categories>
          
          <category> 搞机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> 后端 </tag>
            
            <tag> OJ系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/09/hello-world/"/>
      <url>/2023/08/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
